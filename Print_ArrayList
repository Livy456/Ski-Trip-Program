/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* OCTOBER 19, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import java.util.*;						// IMPORTS ARRAYLIST

public class Print_ArrayList extends Menu_GUI implements ActionListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton next;			// CREATES A JBUTTON
	private JButton previous;		// CREATES A JBUTTON
	private JButton quit;			// CREATES A JBUTTON
	private JButton returnB;		// CREATES A JBUTTON
	private JButton nextMenu;		// CREATES A JBUTTON
	private Font font;				// CREATES A FONT
	private JFrame frame;			// CREATES A JFRAME
	private Container container;	// CREATES A CONTAINER
	private JLabel printID;			// CREATES A JLABEL
	private JLabel printName;		// CREATES A JLABEL
	private JLabel printcustNum;	// CREATES A JLABEL
	private JLabel printSize;		// CREATES A JLABEL
	private JLabel printDate;		// CREATES A JLABEL
	private JLabel printCost;		// CREATES A JLABEL
	private JLabel printTotSz;		// CREATES A JLABEL
	private JLabel printTotCost;	// CREATES A JLABEL
	private JLabel printBus;		// CREATES A JLABEL
	private JLabel printRefund;		// CREATES A JLABEL
	private JLabel printSeats;		// CREATES A JLABEL
	private JLabel custNum;			// CREATES A JLABEL
	private JLabel grpID;			// CREATES A JLABEL
	private JLabel grpSz;			// CREATES A JLABEL
	private JLabel nm;				// CREATES A JLABEL
	private JLabel dt;				// CREATES A JLABEL
	private JLabel cst;				// CREATES A JLABEL
	private JLabel bus;				// CREATES A JLABEL
	private JLabel refund;			// CREATES A JLABEL
	private JLabel seats;			// CREATES A JLABEL
	private JLabel totalSz;			// CREATES A JLABEL
	private JLabel printTot;		// CREATES A JLABEL
	private JLabel totProf;			// CREATES A JLABEL
	private String total;			// STRING REPRESENTATION OF TOTAL PROFIT FROM ALL CUSTOMERS
	private int num;				// NUMBER OF CUSTOMER ITERATED THROUGH OUT
	private int printed;			// NUMBER OF CUSTOMER PRINTED OUT TO THE SCREEN
	private int size;				// SIZE OF ALL CUSTOMERS WITH SAME DATE
	private String dateCost;		// TOTAL PROFIT FOR A SPECIFIC DATE
	private String date;			// SPECIFIC SKI TRIP DATE
	private int totalDateSize;		// TOTAL CUSTOMERS FOR A SPECIFIC DATE
	private int dateBus;			// TOTAL BUSES NEEDED FOR A SPECIFIC DATE
	private int dateRefund;			// TOTAL REFUNDS NEEDED FOR A SPECIFIC DATE
	private int dateSeats;			// TOTAL AVAILABLE SEATS NEEDED FOR A SPECIFIC DATE
	ArrayList<JLabel> allCust = new ArrayList<JLabel>();		// CREATES AN ARRAYLIST OF JLABELS
	ArrayList<Customer> customer1;	// CREATES AN ARRAYLIST OF CUSTOMERS
	ArrayList<Customer> customer2;	// CREATES AN ARRAYLIST OF CUSTOMERS

	public Print_ArrayList(ArrayList<Customer>cust1, int menu, int cnt)
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		total = calculateTotCost();	// CALL TO CALCULATE TOTAL COST
		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		customer1 = new ArrayList<Customer>();				// INSTANTIATES A CUSTOMER1
		next = new JButton("Next");							// INSTANTIATES A JBUTTON
		previous = new JButton("Previous");					// INSTANTIATES A JBUTTON
		quit = new JButton("Quit Program");					// INSTANTIATES A JBUTTON
		returnB = new JButton("Return");					// INSTANTIATES A JBUTTON
		nextMenu = new JButton();							// INSTANTIATES A JBUTTON
		custNum = new JLabel("Customer Number");			// INSTANTIATES A JLABEL
		grpID = new JLabel("Group ID");						// INSTANTIATES A JLABEL
		nm = new JLabel("Name");							// INSTANTIATES A JLABEL
		dt = new JLabel("Date");							// INSTANTIATES A JLABEL
		grpSz = new JLabel("Group Size");					// INSTANTIATES A JLABEL
		cst = new JLabel("Cost");							// INSTANTIATES A JLABEL
		printTot = new JLabel("Total: ");					// INSTANTIATES A JLABEL
		totProf = new JLabel("$" + total);					// INSTANTIATES A JLABEL
		font = new Font("Times New Roman",Font.BOLD,15);	// INSTANTIATES A FONT
		frame = new JFrame("List of Ski Trip Customers");	// INSTANTIATES A FRAME
		container = frame.getContentPane();					// CREATES A CONTENT PANE, WHICH  
															// HOLDS THE OBJECTS ON THE FRAME
		customer1 = cust1;	// CUSTOMER 2 REFERENCE THE SAME MEMORY ADDRESS

		
		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(200, 140, 1010, 550);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH OF JFRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.WHITE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/****************************************************************/
		/*  IF STATEMENT TO CHECK IF MENU NUMBER IS FOR THE REMOVE MENU */
		/****************************************************************/
		if (menu == 1)
		{
			menuNum = menu;						// ASSIGNS THE MENU NUMBER
			nextMenu.setText("Remove Menu");	// SETS TEXT TO REMOVE MENU
			nextMenu.setVisible(true);			// DISPLAYS THE BUTTON
		}
		
		/*********************************************************************/
		/*  ELSE IF STATEMENT TO CHECK IF MENU NUMBER IS FOR THE MODIFY MENU */
		/*********************************************************************/
		else if(menu == 2)
		{
			menuNum = menu;						// ASSIGNS THE MENU NUMBER
			nextMenu.setText("Modify Menu");	// SETS TEXT TO MODIFY MENU
			nextMenu.setVisible(true);			// DISPLAYS THE BUTTON
		}
		
		/************************************************************************************/
		/*  ELSE IF STATEMENT TO CHECK IF MENU NUMBER IS FOR THE DISPLAY CUSTOMER LIST MENU */
		/************************************************************************************/
		else if(menu == 3)
		{
			menuNum = menu;					// ASSIGNS THE MENU NUMBER
			nextMenu.setText("");			// SETS TEXT TO BLANK
			nextMenu.setVisible(false);		// HIDES THE BUTTON
		}
		
		/***********************************************************************************/
		/*  ELSE IF STATEMENT TO CHECK IF MENU NUMBER IS FOR THE DISPLAY TOTAL PROFIT MENU */
		/***********************************************************************************/
		else if(menu == 4)
		{
			menuNum = menu;							// ASSIGNS THE MENU NUMBER
			nextMenu.setText("");					// SETS TEXT TO BLANK
			nextMenu.setVisible(false);				// HIDES THE BUTTON
			printTot.setFont(font);					// SETS THE FONT OF THE PRINT PROFIT LABEL
			totProf.setFont(font);					// SETS THE FONT OF THE TOTAL PROFIT LABEL
			printTot.setBounds(20, 340, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			totProf.setBounds(770, 340, 150, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			container.add(printTot);				// ADDS "TOTAL" TO THE CONTAINER
			container.add(totProf);					// ADDS THE TOTAL PROFIT TO THE CONTAINER
		}
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		custNum.setFont(font);		// SETS THE FONT OF THE CUSTOMER NUMBER LABEL
		grpID.setFont(font);		// SETS THE FONT OF THE GROUP ID LABEL	
		nm.setFont(font);			// SETS THE FONT OF THE NAME LABEL
		dt.setFont(font);			// SETS THE FONT OF THE DATE LABEL
		grpSz.setFont(font);		// SETS THE FONT OF THE GROUP SIZE LABEL
		cst.setFont(font);			// SETS THE FONT OF THE COST LABEL
		
		/**************************/
		/* SETS BOUNDS FOR BUTTON */
		/**************************/
		next.setBounds(720, 370, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		previous.setBounds(630, 370, 85, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quit.setBounds(720, 445, 120, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(630, 445, 85, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nextMenu.setBounds(630, 400, 120, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custNum.setBounds(20, 10, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpID.setBounds(180, 10, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nm.setBounds(310, 10, 300, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dt.setBounds(620, 10, 90, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSz.setBounds(750, 10, 110, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		cst.setBounds(870, 10, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
	 	/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		next.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		previous.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED 
		quit.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED 
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nextMenu.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED

		int count = 0;		// DECLARES AND INTIALIZES A COUNT TO RESET THE Y-VALUES
		
		/***********************************************************************/
		/* FOR LOOP TO ADD PRINT CUSTOMER NUMBER LABELS TO ARRAYLIST OF LABELS */
		/***********************************************************************/
		for(int i=cnt;i<custList.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
			int custNum = i+1;		// DELCARES CUSTOMER NUMBER
			
			/*********************************************************************/
			/* IF STATEMENT TO CHECK IF CUSTOMER NUMBER IS A SINGLE DIGIT NUMBER */	
			/*********************************************************************/
			if(custNum < 10)
			{
				printcustNum = new JLabel("0"+custNum);	// INSTANTIATES A NEW PRINT CUSTOMER NUMBER LABEL
			}
			
			/**************************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF CUSTOMER NUMBER IS A DOUBLE DIGIT NUMBER */	
			/**************************************************************************/
			else if(custNum >= 10)
			{
				printcustNum = new JLabel(""+custNum);			// INSTANTIATES A NEW PRINT CUSTOMER NUMBER LABEL
			}
			
			printcustNum.setBounds(20, y, 50, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printcustNum.setFont(font);	// SETS FONT
			allCust.add(printcustNum);	// ADDS PRINT CUSTOMER NUMBER LABEL TO ARRAYLIST OF LABELS 
			
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		count = 0;	// INITIALIZES COUNT

		
		/****************************************************************/
		/* FOR LOOP TO ADD PRINT GROUP ID LABELS TO ARRAYLIST OF LABELS */
		/****************************************************************/
		for(int i=cnt;i<cust1.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
			
			printID = new JLabel(""+cust1.get(i).getID());	// INSTANTIATES A NEW PRINT ID LABEL
			printID.setBounds(180, y, 150, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printID.setFont(font);				// SETS FONT
			allCust.add(printID);				// ADDS PRINT ID LABEL TO ARRAYLIST OF LABELS 
			
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		count = 0;	// INITIALIZES COUNT
		
		/************************************************************/
		/* FOR LOOP TO ADD PRINT NAME LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=cnt;i<cust1.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				
			printName = new JLabel(""+cust1.get(i).getName());// INSTANTIATES A NEW PRINT NAME LABEL
			printName.setBounds(310, y, 300, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printName.setFont(font);				// SETS FONT
			allCust.add(printName);					// ADDS PRINT NAME LABEL TO ARRAYLIST OF LABELS
			
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		count = 0;	// INITIALIZES COUNT
		
		/************************************************************/
		/* FOR LOOP TO ADD PRINT DATE LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=cnt;i<cust1.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				
			printDate = new JLabel(""+cust1.get(i).getDate());	// INSTANTIATES A NEW PRINT DATE LABEL
			printDate.setBounds(620, y, 90, 25);// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printDate.setFont(font);			// SETS FONT
			allCust.add(printDate);				// ADDS PRINT DATE LABEL TO ARRAYLIST OF LABELS 
			
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		count = 0;	// INITIALIZES COUNT
		
		/************************************************************/
		/* FOR LOOP TO ADD PRINT SIZE LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=cnt;i<cust1.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
			int x = 795;				// DECLARES X VARIABLE FOR X POSITION
			String len = "" + cust1.get(i).getSize();
			
			/*****************************************************************/
			/* IF STATEMENT TO CHECK IF GROUP COST IS LESS THAN THREE DIGITS */
			/*****************************************************************/
			if(len.length() < 3)
			{
				x+= 7 + (3%len.length());	// CALCULATES HOW MUCH TO SHIFT X-VALUE BY
				
				/*********************************************************/
				/* IF STATEMENT TO CHECK IF GROUP COST IS ONLY ONE DIGIT */
				/*********************************************************/
				if (len.length() == 1)
				{
					x+=10;		// MOVES X-COORDINATE OVER TO RIGHT BY 7
				}
			}
			
			printSize = new JLabel(""+cust1.get(i).getSize());	// INSTANTIATES A NEW PRINT SIZE LABEL
			printSize.setBounds(x, y, 110, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printSize.setFont(font);			// SETS FONT
			allCust.add(printSize);				// ADDS PRINT SIZE LABEL TO ARRAYLIST OF LABELS 
			
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		count = 0;	// INITIALIZES COUNT
		
		/************************************************************/
		/* FOR LOOP TO ADD PRINT COST LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=cnt;i<cust1.size();i++)
		{
			int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
			int x = 900;				// DECLARES X VARIABLE FOR X POSITION
			String len = "" + cust1.get(i).getCost();	// STRING REPRESENTATION OF COST
			
			/*****************************************************************/
			/* IF STATEMENT TO CHECK IF GROUP COST IS LESS THAN EIGHT DIGITS */
			/*****************************************************************/
			if(len.length() < 8)
			{
				x+= 8 + (8%len.length());	// CALCULATES HOW MUCH TO SHIFT X-COORDINTATE BY
				
				/***********************************************************/
				/* IF STATEMENT TO CHECK IF GROUP COST IS ONLY FOUR DIGITS */
				/***********************************************************/
				if (len.length() == 5)
				{
					x+=20;		// SHIFTS X-COORDINATE OVER TO RIGHT BY 20
				}
			}
			
			printCost = new JLabel("$"+cust1.get(i).getCost());	// INSTANTIATES A NEW PRINT COST LABEL
			printCost.setBounds(x, y, 100, 25);	 // SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
			printCost.setFont(font);			 // SETS FONT
			allCust.add(printCost);				 // ADDS PRINT COST LABEL TO ARRAYLIST OF LABELS 
		
			/********************************************************************/
			/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
			/********************************************************************/
			if ((i+1)%10 == 0)
			{
				break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
			}
			
			count+=1;
		}
		
		num = cnt+10; 	// NUMBER OF CUSTOMERS PRINTED TO THE SCREEN
		
		/*********************************************************************************/
		/* IF STATEMENT TO CHECK IF NUMBER OF CUSTOMERS ALREADY PRINTED EXCEEDS CUSTLIST */	
		/*********************************************************************************/
		if(num >= cust1.size())
		{
			next.setVisible(false);		// HIDES THE NEXT BUTTON ONCE ALL THE CUSTOMERS 
										// HAVE BEEN PRINTED TO THE SCREEN
		}
		
		/*********************************************************************************/
		/* IF STATEMENT TO CHECK IF CUSTOMER INFORMATION OUTPUT IS STILL ON FIRST SCREEN */	
		/*********************************************************************************/
		if(num <=10)
		{
			previous.setVisible(false);	// HIDES THE PREVIOUS BUTTON SINCE ONLY TEN CUSTOMERS
										// HAVE BEEN PRINTED TO THE SCREEN
		}
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(next);		// ADDS NEXT BUTTON TO CONTAINER
		container.add(previous);	// ADDS PREVIOUS BUTTON TO CONTAINER
		container.add(quit);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(nextMenu);	// ADDS NEXT MENU BUTTON TO CONTAINER
		container.add(custNum);		// ADDS CUSTOMER NUMBER LABEL TO CONTAINER
		container.add(grpID);		// ADDS GROUP ID NUMBER LABEL TO CONTAINER
		container.add(nm);			// ADDS GROUP NAME LABEL TO CONTAINER
		container.add(grpSz);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dt);			// ADDS GROUP DATE LABEL TO CONTAINER
		container.add(cst);			// ADDS GROUP COST LABEL TO CONTAINER
		
		/************************************************/
		/* ENHANCED FOR LOOP TO ADD LABELS TO CONTAINER */
		/************************************************/
		for(JLabel j:allCust)
		{
			container.add(j);	// ADDS LABEL TO CONTAINER
		}
	}
	
	public Print_ArrayList(ArrayList<Customer> cust2, int prt, int mnNm, String cst2, String dt2, int totSz, int b, int rfnd, int sts)
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{	
		/**************************/
		/* INITIALIZATION SECTION */
		/**************************/
		menuNum = mnNm;				// ASSIGNS THE MENU NUMBER FROM PRINT DATE
		dateCost = cst2;			// INITIALIZES TOTAL COST FOR A SPECIFIC DATE
		date = dt2;					// INITIALIZES SPECIFIC SKI TRIP DATE
		totalDateSize = totSz;		// INITIALIZES TOTAL CUSTOMERS FOR A SPECIFIC DATE
		dateBus = b;				// INITIALIZES TOTAL BUSES NEEDED FOR A SPECIFIC DATE
		dateRefund = rfnd;			// INITIALIZES TOTAL REFUNDS NEEDED FOR A SPECIFIC DATE
		dateSeats = sts;			// INITIALIZES TOTAL AVAILABLE SEATS FOR A SPECIFIC DATE
			
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		customer2 = new ArrayList<Customer>();					// INSTANTIATES AN ARRAYLIST
		next = new JButton("Next");								// INSTANTIATES A JBUTTON
		previous = new JButton("Previous");						// INSTANTIATES A JBUTTON
		quit = new JButton("Quit Program");						// INSTANTIATES A JBUTTON
		returnB = new JButton("Return to Print Date");			// INSTANTIATES A JBUTTON
		custNum = new JLabel("Customer Number");				// INSTANTIATES A JLABEL
		grpID = new JLabel("Group ID");							// INSTANTIATES A JLABEL
		nm = new JLabel("Name");								// INSTANTIATES A JLABEL
		dt = new JLabel("Date");								// INSTANTIATES A JLABEL
		grpSz = new JLabel("Group Size");						// INSTANTIATES A JLABEL
		cst = new JLabel("Cost");								// INSTANTIATES A JLABEL
		bus = new JLabel("Number of Buses Needed: ");			// INSTANTIATES A JLABEL
		refund = new JLabel("Number of Refunds Needed: ");		// INSTANTIATES A JLABEL
		seats = new JLabel("Number of Seats Available: ");		// INSTANTIATES A JLABEL
		totalSz = new JLabel("Total: ");						// INSTANTIATES A JLABEL
		printTotSz = new JLabel("" + totSz);					// INSTANTIATES A JLABEL
		printTotCost = new JLabel("$"+cst2);					// INSTANTIATES A JLABEL
		printBus = new JLabel("" + b);							// INSTANTIATES A JLABEL
		printRefund = new JLabel("" + rfnd);					// INSTANTIATES A JLABEL
		printSeats  = new JLabel("" + sts);						// INSTANTIATES A JLABEL
		font = new Font("Times New Roman",Font.BOLD,15);		// INSTANTIATES A FONT
		frame = new JFrame("List of Ski Trip Customers");		// INSTANTIATES A FRAME
		container = frame.getContentPane();						// CREATES A CONTENT PANE, WHICH  
																// HOLDS THE OBJECTS ON THE FRAME
		customer2 = cust2;	// CUSTOMER 2 REFERENCE THE SAME MEMORY ADDRESS
		
		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(300, 80, 1010, 610);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH												// AND WIDTH OF THE JFRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.WHITE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		custNum.setFont(font);		// SETS THE FONT OF THE CUSTOMER NUMBER LABEL
		grpID.setFont(font);		// SETS THE FONT OF THE GROUP ID LABEL	
		nm.setFont(font);			// SETS THE FONT OF THE NAME LABEL
		dt.setFont(font);			// SETS THE FONT OF THE DATE LABEL
		grpSz.setFont(font);		// SETS THE FONT OF THE GROUP SIZE LABEL
		cst.setFont(font);			// SETS THE FONT OF THE COST LABEL
		totalSz.setFont(font);		// SETS THE FONT OF THE TOTAL SIZE LABEL
		bus.setFont(font);			// SETS THE FONT OF THE TOTAL BUSES LABEL
		refund.setFont(font);		// SETS THE FONT OF THE REFUND LABEL
		seats.setFont(font);		// SETS THE FONT OF THE SEATS LABEL
		printTotSz.setFont(font);	// SETS THE PRINT TOTAL SIZE LABEL
		printBus.setFont(font);		// SETS THE PRINT BUSES LABEL
		printRefund.setFont(font);	// SETS THE PRINT REFUND LABEL
		printSeats.setFont(font);	// SETS THE PRINT SEATS LABEL
		printTotCost.setFont(font);	// SETS THE PRINT TOTAL COST LABEL
		
		/**************************/
		/* SETS BOUNDS FOR BUTTON */
		/**************************/
		next.setBounds(710, 500, 75, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		previous.setBounds(600, 500, 105, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quit.setBounds(755, 530, 120, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(600, 530, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custNum.setBounds(20, 10, 150, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpID.setBounds(180, 10, 150, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nm.setBounds(310, 10, 230, 25);				// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dt.setBounds(620, 10, 90, 25);				// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSz.setBounds(750, 10, 110, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		cst.setBounds(870, 10, 100, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		totalSz.setBounds(20, 380, 50, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		bus.setBounds(20, 410, 200, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		refund.setBounds(20, 440, 200, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		seats.setBounds(20, 470, 200, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		printTotSz.setBounds(795, 380, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		printBus.setBounds(230, 410, 50, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		printRefund.setBounds(230, 440, 50, 25); 	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		printSeats.setBounds(230, 470, 50, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		printTotCost.setBounds(900, 380, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		next.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		previous.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quit.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED 
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED

		/***********************************************************/
		/* FOR LOOP TO FIND THE NUMBER OF CUSTOMERS WITH SAME DATE */
		/***********************************************************/
		for(int j = 0; j < cust2.size();j++)
		{
			/**********************************************************/
			/* IF STATEMENT TO GET NUMBER OF CUSTOMERS WITH SAME DATE */	
			/**********************************************************/
			if(cust2.get(j).getDate().equals(dt2)) 
			{
				size+=1;	// CALCULATES NUMBER OF CUSTOMERS WITH SELECTED DATE
			}
		}
		printed = prt;
		int count = 0;			// DECLARES AND INITIALIZES COUNT
		int custNum2 = printed;	// DELCARES CUSTOMER NUMBER

		/***********************************************************************/
		/* FOR LOOP TO ADD PRINT CUSTOMER NUMBER LABELS TO ARRAYLIST OF LABELS */
		/***********************************************************************/
		for(int i=prt; i<cust2.size();i++)
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTLIST DATE */
			/****************************************************************/
			if(cust2.get(i).getDate().equals(dt2))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				custNum2+=1;					
				
				/*********************************************************************/
				/* IF STATEMENT TO CHECK IF CUSTOMER NUMBER IS A SINGLE DIGIT NUMBER */	
				/*********************************************************************/
				if(custNum2 < 10)
				{
					printcustNum = new JLabel("0"+custNum2);	// INSTANTIATES A NEW PRINT CUSTOMER NUMBER LABEL
				}
				
				/**************************************************************************/
				/* ELSE IF STATEMENT TO CHECK IF CUSTOMER NUMBER IS A DOUBLE DIGIT NUMBER */	
				/**************************************************************************/
				else if(custNum2 >= 10)
				{
					printcustNum = new JLabel(""+custNum2);			// INSTANTIATES A NEW PRINT CUSTOMER NUMBER LABEL
				}
				
				printcustNum.setBounds(20, y, 50, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printcustNum.setFont(font);	// SETS FONT
				allCust.add(printcustNum);	// ADDS PRINT CUSTOMER NUMBER LABEL TO ARRAYLIST OF LABELS 
				count+=1;					// CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
			
		count = 0;	// INITIALIZES COUNT
		
		/****************************************************************/
		/* FOR LOOP TO ADD PRINT GROUP ID LABELS TO ARRAYLIST OF LABELS */
		/****************************************************************/
		for(int i=prt;i < cust2.size();i++)
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTLIST DATE */
			/****************************************************************/
			if(cust2.get(i).getDate().equals(dt2))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				
				printID = new JLabel(""+cust2.get(i).getID());	// INSTANTIATES A NEW PRINT ID LABEL
				printID.setBounds(180, y, 150, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printID.setFont(font);				// SETS FONT
				allCust.add(printID);				// ADDS PRINT ID LABEL TO ARRAYLIST OF LABELS 
				count+=1;							// CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
		
		count = 0;	// INITIALIZES COUNT

		/************************************************************/
		/* FOR LOOP TO ADD PRINT NAME LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=prt;i < cust2.size();i++)
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTLIST DATE */
			/****************************************************************/
			if(cust2.get(i).getDate().equals(dt2))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				
				printName = new JLabel(""+cust2.get(i).getName());// INSTANTIATES A NEW PRINT NAME LABEL
				printName.setBounds(310, y, 230, 25);// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printName.setFont(font);			// SETS FONT
				allCust.add(printName);				// ADDS PRINT NAME LABEL TO ARRAYLIST OF LABELS 
				count+=1;							// CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
		
		count = 0;	// INITIALIZES COUNT

		/************************************************************/
		/* FOR LOOP TO ADD PRINT DATE LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=prt;i < cust2.size();i++)
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTLIST DATE */
			/****************************************************************/
			if(cust2.get(i).getDate().equals(dt2))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				
				printDate = new JLabel(""+cust2.get(i).getDate());	// INSTANTIATES A NEW PRINT DATE LABEL
				printDate.setBounds(620, y, 90, 25);// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printDate.setFont(font);			// SETS FONT
				allCust.add(printDate);				// ADDS PRINT DATE LABEL TO ARRAYLIST OF LABELS 
				count+=1;							// CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;		// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
		
		count = 0;	// INITIALIZES COUNT

		/************************************************************/
		/* FOR LOOP TO ADD PRINT SIZE LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=prt;i < cust2.size();i++)
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTLIST DATE */
			/****************************************************************/
			if(cust2.get(i).getDate().equals(dt2))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				int x = 795;				// DECLARES X VARIABLE FOR X POSITION
				String len = "" + cust2.get(i).getSize();	// STRING REPRESENTATION OF GROUP SIZE
				
				/*****************************************************************/
				/* IF STATEMENT TO CHECK IF GROUP SIZE IS LESS THAN THREE DIGITS */
				/*****************************************************************/
				if(len.length() < 3)
				{
					x += 7 + (3% len.length());	// CALCULATES HOW MUCH TO SHIFT X-VALUE BY
					
					/*********************************************************/
					/* IF STATEMENT TO CHECK IF GROUP COST IS ONLY ONE DIGIT */
					/*********************************************************/
					if (len.length() == 1)
					{
						x+=10;		// MOVES X-COORDINATE OVER TO RIGHT BY 7
					}
				}
				
				printSize = new JLabel(""+cust2.get(i).getSize());	// INSTANTIATES A NEW PRINT SIZE LABEL
				printSize.setBounds(x, y, 110, 25);// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printSize.setFont(font);	// SETS FONT
				allCust.add(printSize);		// ADDS PRINT SIZE LABEL TO ARRAYLIST OF LABELS 	
				count+=1;					// CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;	// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
		
		count = 0;			// INITIALIZES COUNT
		
		/************************************************************/
		/* FOR LOOP TO ADD PRINT COST LABELS TO ARRAYLIST OF LABELS */
		/************************************************************/
		for(int i=prt;i < cust2.size();i++)
		{
			
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF SELECTED DATE MATCHES CUSTOMER DATE */	
			/****************************************************************/
			if(dt2.equals(cust2.get(i).getDate()))
			{
				int y = (count * 30) + 30;	// DECLARES Y VARIBALE FOR Y POSITION
				int x = 900;				// DECLARES X VARIABLE FOR X POSITION
				String len = "" + cust2.get(i).getCost();	// STRING REPRESENTATION OF SKI TRIP COST
				
				/*****************************************************************/
				/* IF STATEMENT TO CHECK IF GROUP COST IS LESS THAN EIGHT DIGITS */
				/*****************************************************************/
				if(len.length() < 8)
				{
					x+= 8 + (8%len.length());	// CALCULATES HOW MUCH TO SHIFT X-VALUE BY
					
					/***********************************************************/
					/* IF STATEMENT TO CHECK IF GROUP COST IS ONLY FOUR DIGITS */
					/***********************************************************/
					if (len.length() == 5)
					{
						x+=20;		// MOVES X-COORDINATE OVER TO RIGHT BY 7
					}
					
					/***********************************************************/
					/* IF STATEMENT TO CHECK IF GROUP COST IS ONLY FOUR DIGITS */
					/***********************************************************/
					else if (len.length() == 6)
					{
						x+=10;		// MOVES X-COORDINATE OVER TO RIGHT BY 7
					}
				}
				
				printCost = new JLabel("$"+cust2.get(i).getCost());	// INSTANTIATES A NEW PRINT COST LABEL
				printCost.setBounds(x, y, 100, 25);	 // SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
				printCost.setFont(font);			 // SETS FONT
				allCust.add(printCost);				 // ADDS PRINT COST LABEL TO ARRAYLIST OF LABELS 
				count+=1;							 // CALCULATES EVERY OCCURENCE OF DATE

				/********************************************************************/
				/* IF STATEMENT TO CHECK IF TEN CUSTOMERS ARE PRINTED TO THE SCREEN */	
				/********************************************************************/
				if ((count%10) == 0)
				{
					break;	// BREAKS AFTER TEN CUSTOMERS ARE PRINTED TO THE SCREEN
				}
			}
		}
		
		printed += 10;	// NUMBER OF CUSTOMERS PRINTED TO THE SCREEN
				
		/*********************************************************************************/
		/* IF STATEMENT TO CHECK IF NUMBER OF CUSTOMERS ALREADY PRINTED EXCEEDS CUSTLIST */	
		/*********************************************************************************/
		if(printed >= size)
		{
			next.setVisible(false);		// HIDES THE NEXT BUTTON ONCE ALL THE CUSTOMERS 
										// HAVE BEEN PRINTED TO THE SCREEN
		}
		
		/*********************************************************************************/
		/* IF STATEMENT TO CHECK IF CUSTOMER INFORMATION OUTPUT IS STILL ON FIRST SCREEN */	
		/*********************************************************************************/
		if(printed <=10)
		{
			previous.setVisible(false);	// HIDES THE PREVIOUS BUTTON SINCE ONLY 
										// TEN CUSTOMERS HAVE BEEN PRINTED TO THE SCREEN
		}
			
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(next);		// ADDS NEXT BUTTON TO CONTAINER
		container.add(previous);	// ADDS PREVIOUS BUTTON TO CONTAINER
		container.add(quit);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(custNum);		// ADDS CUSTOMER NUMBER LABEL TO CONTAINER
		container.add(grpID);		// ADDS GROUP ID NUMBER LABEL TO CONTAINER
		container.add(nm);			// ADDS GROUP NAME LABEL TO CONTAINER
		container.add(grpSz);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dt);			// ADDS GROUP DATE LABEL TO CONTAINER
		container.add(cst);			// ADDS GROUP COST LABEL TO CONTAINER
		container.add(printTotSz);	// ADDS TOTAL SIZE FOR SPECIFIC DATE LABEL TO CONTAINER
		container.add(printTotCost);// ADDS TOTAL COST FOR SPECIFIC DATE LABEL TO CONTAINER
		container.add(printBus);	// ADDS TOTAL BUSES NEEDED FOR SPECIFIC DATE LABEL TO CONTAINER
		container.add(printRefund);	// ADDS REFUNDS NEEDED FOR SPECIFIC DATE LABEL TO CONTAINER
		container.add(printSeats);	// ADDS EXTRA SEATS FOR SPECIFIC DATE LABEL TO CONTAINER
		container.add(bus);			// ADDS "BUSES NEEDED" LABEL TO CONTAINER
		container.add(refund);		// ADDS "REFUNDS NEEDED" LABLE TO CONTAINER
		container.add(seats);		// ADDS "SEATS AVAILABLE" LABEL TO CONTAINER
		container.add(totalSz);		// ADDS "TOTAL" LABEL TO CONTAINER
		
		/************************************************/
		/* ENHANCED FOR LOOP TO ADD LABELS TO CONTAINER */
		/************************************************/
		for(JLabel j:allCust)
		{
			container.add(j);	// ADDS LABEL TO CONTAINER
		}
	}
	
	public void actionPerformed(ActionEvent event)
	/******************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON AND TEXT FIELD */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 		  */
	/* 				   EVENT FOR BUTTON AND TEXT FIELD	  */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		/************************************/
		/* ASSIGNS BUTTON PRESSED TO ACTION */
		/************************************/
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
	
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Quit Program"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);				// EXITS THE PROGRAM
			}
		}
		
		/******************************************************/
		/* IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/******************************************************/
		if(action.equals("Return"))
		{
			container.setVisible(false);	// HIDES THE FRAME
			frame.dispose();				// DISPOSES THE PRINT ARRAYLIST WINDOW
			new Menu_GUI();					// MAKES A NEW MENU GUI
		}
		
		/***********************************************************/
		/* IF STATEMENT TO CHECK IF REMOVE MENU BUTTON WAS PRESSED */	
		/***********************************************************/
		if(action.equals("Remove Menu"))
		{
			container.setVisible(false);	// HIDES THE FRAME
			frame.dispose();				// DISPOSES THE PRINT ARRAYLIST WINDOW
			new Remove_Menu();				// CREATES A REMOVE MENU
		}                                                                           
		
		/***********************************************************/
		/* IF STATEMENT TO CHECK IF MODIFY MENU BUTTON WAS PRESSED */	
		/***********************************************************/
		if(action.equals("Modify Menu"))
		{
			container.setVisible(false);	// HIDES THE FRAME
			frame.dispose();				// DISPOSES THE PRINT ARRAYLIST WINDOW
			new Modify_Menu();				// CREATES A MODIFY MENU
		}
		
		/*********************************************************/
		/* IF STATEMENT TO CHECK IF MAIN MENU BUTTON WAS PRESSED */	
		/*********************************************************/
		if(action.equals("Main Menu"))
		{
			container.setVisible(false);	// HIDES THE FRAME
			frame.dispose();				// DISPOSES THE PRINT ARRAYLIST WINDOW
			new Menu_GUI();					// CREATES A MENU GUI
		}
		
		/*************************************************************************/
		/* IF STATEMENT TO CHECK IF RETURN TO PRINT DATE MENU BUTTON WAS PRESSED */	
		/*************************************************************************/
		if(action.equals("Return to Print Date"))
		{
			container.setVisible(false);	// HIDES THE FRAME
			frame.dispose();				// DISPOSE THE PRINT ARRAYLIST WINDOW
			new Print_Date();				// CREATES A PRINT DATE GUI
		}
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF NEXT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Next"))
		{			
			frame.setVisible(false);// HIDES THE FRAME
			frame.dispose();		// GETS RID OF THE OLD FRAME	

			/********************************************************************/
			/* IF STATEMENT TO CHECK IF NEXT BUTTON IN ONE OF THE 1ST 4 WINDOWS */	
			/********************************************************************/
			if((menuNum == 1) || (menuNum == 2) || (menuNum == 3) 
			   || (menuNum == 4))
			{
				new Print_ArrayList(customer1, menuNum, num);	// INSTANTIATES PRINT 
																// ARRAYLIST WINDOW
			}
			
			/****************************************************************************************/
			/* ELSE STATEMENT TO CHECK IF NEXT BUTTON IN THE SECOND DEFAULT CONSTRUCTOR WAS PRESSED */	
			/****************************************************************************************/
			else if (menuNum == 5)
			{
				new Print_ArrayList(customer2, printed, menuNum, dateCost, 
									date, totalDateSize, dateBus, dateRefund, 
									dateSeats);	// INSTANTIATES PRINT ARRAYLIST WINDOW
			}
		}	
		
		/********************************************************/
		/* IF STATEMENT TO CHECK IF PREVIOUS BUTTON WAS PRESSED */	
		/********************************************************/
		if(action.equals("Previous"))
		{
			printed-=20;
			
			/****************************************************************/
			/* IF STATEMENT TO MAKE SURE NUM GOES BACK TO PREVIOUS WINDOW'S */
			/* FIRST CUSTOMER WITH THE SAME SKI TRIP DATE 					*/	
			/****************************************************************/
			if(printed < size)
			{
				num -= (size-printed);
			}

			frame.setVisible(false);	// HIDES THE FRAME
			frame.dispose();			// GETS RID OF OLD FRAME

			/************************************************************************/
			/* IF STATEMENT TO CHECK IF PREVIOUS BUTTON IN ONE OF THE 1ST 4 WINDOWS */	
			/************************************************************************/
			if((menuNum == 1) || (menuNum == 2) || (menuNum == 3) 
			   || (menuNum == 4))
			{
				new Print_ArrayList(customer1, menuNum, num);	// INSTANTIATES PRINT 
																// ARRAYLIST WINDOW
			}
			
			/*****************************************************************************************/
			/* ELSE STATEMENT TO CHECK IF PREVIOUS BUTTON IN THE 2ND DEFAULT CONSTRUCTOR WAS PRESSED */	
			/*****************************************************************************************/
			else if(menuNum == 5)
			{
				
				new Print_ArrayList(customer2, printed, menuNum, dateCost,  
									date, totalDateSize, dateBus, dateRefund, 
									dateSeats);	// INSTANTIATES PRINT ARRAYLIST WINDOW
			}
		}
	}
}
