/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 2, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import javax.swing.*;					// IMPORTS SWING
import java.util.ArrayList;				// IMPORTS ARRAYLIST
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT

public class BusGUI implements ActionListener 
{	
	private static final long serialVersionUID = 1L;	// SERIALIZES CLASS
	
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input your Group Name: ";
	final static String message2 = "Input the group ID number(three digit number between 100 - 999): ";
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1= "Input Name";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error2 = "ERROR!!! Number must be between 100 and 999";
	final static String error3 = "ERROR!!! Number must be greater than 0 and less than or equal to 100!!!";
	final static String error4 = "ERROR!!! This month can not be chosen with this day!!!";
	final static String error5 = "ERROR!!! This day can not be chosen with this month!!!";
	final static String error6 = "ERROR!!! This day can not be chosen with this year!!!";
	final static String error7 = "ERROR!!! This year can not be chosen with this day";
	final static String error8 = "ERROR!!! You need to finish filling out information!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;			// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JTextField nameTF;		// CREATES A TEXT FIELD FOR NAME 
	private JTextField grpIDTF;		// CREATES A TEXT FIELD FOR GROUP ID
	private JTextField grpSzTF;		// CREATES A TEXT FIELD FOR GROUP SIZE
	private JComboBox month;		// CREATES A COMBO BOX(DROP-DOWN LIST) FOR MONTH
	private JComboBox day;			// CREATES A COMBO BOX FOR DAY
	private JComboBox year;			// CREATES A COMBO BOX FOR YEAR
	private Label nameL;			// CREATES A LABEL FOR NAME
	private Label grpIDL;			// CREATES A LABEL FOR GROUP ID
	private Label grpSzL;			// CREATES A LABEL FOR GROUP SIZE
	private Label dateL;			// CREATES A LABEL FOR DATE
	private JFrame frame;			// CREATES A JFRAME 
	private ArrayList <Customer> custList = new ArrayList();			// CREATES AN ARRAYLIST OF CUSTOMER
	private String[] months = {"1", "2", "3", "4", "5", "6",
							   "7", "8", "9", "10", "11", "12"};		// CREATES AN ARRAY FOR MONTHS
	private String[] years = {"2020", "2021", "2022", "2023", "2024",
							  "2025", "2026", "2027", "2028", "2029",
							  "2030", "2031", "2032", "2033", "2034",
							  "2035", "2036", "2037", "2038", "2039",
							  "2040", "2041", "2042", "2043", "2044",
							  "2045", "2046", "2047", "2048", "2049"};	// CREATES AN ARRAY FOR YEARS
	private String[] days = {"1", "2", "3", "4", "5",
							 "6", "7", "8", "9", "10",
							 "11", "12", "13", "14", "15",
							 "16", "17", "18", "19", "20",
							 "21", "22", "23", "24", "25",
							 "26", "27", "28", "29", "30", "31"};		// CREATES AN ARRAY FOR DAYS
	
	public BusGUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame =  new JFrame("Ski Trip");		// INSTANTIATES A BLANK JFRAME
		enterB = new JButton("Enter");			// INSTANTIATES A JBUTTON 
		quitB = new JButton("Quit");			// INSTANTIATES A JBUTTON 
		nameTF = new JTextField();				// INSTANTIATES A JTEXTFIELD
		grpIDTF = new JTextField();				// INSTANTIATES A JTEXTFIELD 
		grpSzTF = new JTextField();				// INSTANTIATES A JTEXTFIELD 
		month = new JComboBox(months);			// INSTANTIATES A JCOMBOBOX
		day = new JComboBox(days);				// INSTANTIATES A JCOMBOBOX
		year = new JComboBox(years);			// INSTANTIATES A JCOMBOBOX
		nameL = new Label("Name");				// INSTANTIATES A LABEL
		grpIDL = new Label("Group ID");			// INSTANTIATES A LABEL
		grpSzL = new Label("Group Size");		// INSTANTIATES A LABEL
		dateL = new Label("Date");				// INSTANTIATES A LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(150, 270, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(130, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpIDTF.setBounds(130, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(130, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(250, 270, 75, 25);		// SETS (X POSITIION, Y POSITION, LENGTH, WIDTH)
		month.setBounds(130, 170, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		day.setBounds(130, 200, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		year.setBounds(130, 230, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(50, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpIDL.setBounds(50, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(50, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(130, 170, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)

		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nameTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		grpIDTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		grpSzTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		month.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		day.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		year.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		frame.add(enterB);		// ADDS ENTER BUTTON TO FRAME
		frame.add(quitB);		// ADDS QUIT BUTTON TO FRAME
		frame.add(nameTF);		// ADDS NAME TEXT FIELD TO FRAME
		frame.add(grpIDTF);		// ADDS GROUP ID TEXT FIELD TO FRAME
		frame.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO FRAME
		frame.add(month);		// ADDS MONTH COMBO BOX TO FRAME
		frame.add(day);			// ADDS DAY COMBO BOX TO FRAME
		frame.add(year);		// ADDS YEAR COMBO BOX TO FRAME
		frame.add(nameL);		// ADDS NAME LABEL TO FRAME
		frame.add(grpIDL);		// ADDS GROUP ID LABEL TO FRAME
		frame.add(grpSzL);		// ADDS GROUP SIZE LABEL TO FRAME
		frame.add(dateL);		// ADDS DATE LABEL TO FRAME
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();				// SIZE OF THE FRAME
		frame.setSize(400, 400);	// SETS SIZE OF THE JFRAME
		frame.setVisible(true);		// ALLOWS THE JFRAME TO BE VISIBLE
		frame.setLayout(null);		// SETS THE LAYOUT FOR THE JFRAME
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	}
	/******************************************************************************/
	/* 								FUNCTION SECTION 							  */
	/******************************************************************************/
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String name;		// REUSUABLE STRING INPUT FOR NAME 
		String date;		// REUSUABLE STRING INPUT FOR DATE
		String monthi;		// REUSUABLE STRING INPUT FOR MONTH
		String dayi;		// REUSUABLE STRING INPUT FOR DAY
		String yeari;		// REUSUABLE STRING INPUT FOR YEAR
		int grpID;			// REUSUABLE INT INPUT FOR GROUP ID
		int grpSz;			// REUSUABLE INT INPUT FOR GROUP SIZE
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		/************************************/
		/* ASSIGNS BUTTON PRESSED TO ACTION */
		/************************************/
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		Customer customer = new Customer();	// INSTANTIATES A CUSTOMER
		custList.add(customer);				// ADDS CUSTOMER TO ARRAYLIST
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if (action.equals("Quit"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action.equals("Enter"))
		{	
			/*******************************************************/
			/* ELSE STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*******************************************************/
			if((nameTF.getText() == "") || (grpIDTF.getText() == "") 
				|| (grpSzTF.getText() == "") || (month.getSelectedItem() == null)
				|| (day.getSelectedItem() == null) || (year.getSelectedItem()== null))
			{
				frame.setVisible(false);	// SETS VISIBILTY OF FRAME TO FALSE
				errorMessage(error4);		// CALL TO ERROR MESSAGE
			}
				
			/*****************************************************/
			/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*****************************************************/
			else
			{
				frame.dispose();		// GETS RID OF THE OLD FRAME
				new Menu_GUI(); 		// INSTANTIATES A NEW FRAME
			}
		}
		
		/***************/
		/* INPUTS NAME */
		/***************/
		name = inputName(nameTF);		// CALL TO INPUT NAME
		customer.setName(name);			// CALL TO SET NAME
		
		/*******************/
		/* INPUTS GROUP ID */
		/*******************/
		grpID = inputGrpID(grpIDTF);	// CALL TO INPUT GROUP ID
		customer.setID(grpID);			// CALL TO SET GROUP ID
		
		/*********************/
		/* INPUTS GROUP SIZE */
		/*********************/
		grpSz = inputGrpSz(grpSzTF);	// CALL TO INPUT GROUP SIZE
		customer.setSize(grpSz);		// CALL TO SET GROUP SIZE
		
		/****************/
		/* INPUTS MONTH */
		/****************/
		monthi = inputMonth(month, day, year);
		
		/**************/
		/* INPUTS DAY */
		/**************/
		dayi = inputDay(month, day, year);
		
		/***************/
		/* INPUTS YEAR */
		/***************/
		yeari = inputYear(month, day, year);
		
		/***************/
		/* INPUTS DATE */
		/***************/
		date = "" + monthi + "/" + dayi + "/" + yeari;	
		customer.setDate(date);			// CALL TO SET DATE
	}
	
	public static ArrayList<String> addDates()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		ArrayList<String> date = new ArrayList();
		
		return date;
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this? Once you do this" + "\n" + 
				"you cannot undo this action.",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;		// RETURNS NUM
	}
	
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static String inputDay(JComboBox month, JComboBox day, JComboBox year)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR DAY	 */
	/* POSTCONDITION - GETS STRING VALUE FOR DAY	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object inum;			// REUSUABLE OBJECT INPUT
		String num;				// REUSUABLE STRING INPUT	
		boolean redo = false;	// REUSUABLE BOOLEAN
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/****************/
			/* INPUTS MONTH */
			/****************/
			inum = day.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DROP-DOWN LIST	
			num = (String) inum;				// TYPE CAST INUM TO BE A STRING
			
			Object monthi = day.getSelectedItem();
			Object yeari = year.getSelectedItem();
			String month2 = (String) monthi;
			int year2 = (int) yeari;
			
			/********************************************************/
			/* IF STATEMENT TO CHECK IF DAY SELECTED IS SUPPOSED TO */
			/* HAVE LESS THAN 29 DAYS 								*/
			/********************************************************/
			if (num == "29")
			{
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				if((month2 == "2") && (year2%4 != 0))
				{
					redo = true;
					errorMessage(error4);			// CALL TO ERROR MESSAGE
				}
			}
			
			/************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MONTH SELECTED IS SUPPOSED */
			/* TO HAVE LESS THAN 30 DAYS 								*/
			/************************************************************/
			else if(num == "30")
			{
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				if(month2 == "2")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
			}
			
			/************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MONTH SELECTED IS SUPPOSED */
			/* TO HAVE LESS THAN 31 DAYS 								*/
			/************************************************************/
			else if((num == "31"))
			{
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				if(month2 == "2")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(month2 == "4")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(month2 == "6")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(month2 == "9")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(month2 == "11")
				{
					redo = true;
					errorMessage(error5);			// CALL TO ERROR MESSAGE
				}
			}
		}
		while(redo == true);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}	
	
	public static int inputGrpID(JTextField grpIDTF)
	/***************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE FOR GROUP ID */
	/* POSTCONDITION - GETS INTEGER VALUE FOR GROUP ID */
	/***************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;		// REUSUABLE STRING INPUT
		int num;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			numi = grpIDTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
		
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((num < 100) || (num > 1000))
			{
				grpIDTF.setText("");		// CLEARS THE TEXT FIELD 
				errorMessage(error2);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 0) || (num > 1000));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static int inputGrpSz(JTextField grpSzTF)
	/*****************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE FOR GROUP SIZE */
	/* POSTCONDITION - GETS INTEGER VALUE FOR GROUP SIZE */
	/*****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;		// REUSUABLE STRING INPUT
		int num;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			numi = grpSzTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
		
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((num < 0) || (num > 100))
			{
				grpSzTF.setText("");		// CLEARS THE TEXT FIELD 
				errorMessage(error3);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 0) || (num > 100));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static String inputMonth(JComboBox month, JComboBox day, JComboBox year)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR MONTH	 */
	/* POSTCONDITION - GETS STRING VALUE FOR MONTH	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object inum;			// REUSUABLE OBJECT INPUT
		String num;				// REUSUABLE STRING INPUT	
		boolean redo = false;	// REUSUABLE BOOLEAN 
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/****************/
			/* INPUTS MONTH */
			/****************/
			inum = month.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DROP-DOWN LIST	
			num = (String) inum;				// TYPE CAST INUM TO BE A STRING
			
			/*******************************************************/
			/* IF STATEMENT TO CHECK IF MONTH SELECTED IS FEBRUARY */
			/*******************************************************/
			if(num == "2")
			{
				Object dayi = day.getSelectedItem();
				Object yeari = year.getSelectedItem();
				String day2 = (String) dayi;
				int year2 = (int) yeari;
				
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				if((day2 == "29") && (year2%4 != 0))
				{
					redo = true;
					errorMessage(error4);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(day2 == "30")
				{
					redo = true;
					errorMessage(error4);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if(day2 == "31")
				{
					redo = true;
					errorMessage(error4);			// CALL TO ERROR MESSAGE
				}
			}	
		}
		while(redo == true);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static String inputName(JTextField nameTF)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR NAME	 */
	/* POSTCONDITION - GETS STRING VALUE FOR NAME	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;		// REUSUABLE STRING INPUT
		
		/*******************/
		/* INPUTS GROUP ID */
		/*******************/
		numi = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return numi;		// RETURNS NUM
	}
	
	public static String inputYear(JComboBox month, JComboBox day, JComboBox year)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR DAY	 */
	/* POSTCONDITION - GETS STRING VALUE FOR DAY	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object inum;			// REUSUABLE OBJECT INPUT
		int num;				// REUSUABLE INT INPUT	
		String num2;			// REUSUABLE STRING INPUT
		boolean redo = false;	// REUSUABLE BOOLEAN 

		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/****************/
			/* INPUTS MONTH */
			/****************/
			inum = year.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DROP-DOWN LIST	
			num = (int) inum;				// TYPE CAST INUM TO BE A STRING
			
			Object monthi = month.getSelectedItem();
			Object dayi = day.getSelectedItem();
			String month2 = (String) monthi;
			String day2 = (String) dayi;
			
			/********************************************************/
			/* IF STATEMENT TO CHECK IF DAY SELECTED IS SUPPOSED TO */
			/* HAVE LESS THAN 29 DAYS 								*/
			/********************************************************/
			if (num%4 != 0)
			{				
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				if((month2 == "2") && (day2 == "29"))
				{
					redo = true;
					errorMessage(error7);			// CALL TO ERROR MESSAGE
				}
				
				/************************************/
				/* ELSE IF STATEMENT TO ERROR CHECK */
				/************************************/
				else if ((month2 == "2") && (day2 == "30"))
				{
					redo = true;
					errorMessage(error7);			// CALL TO ERROR MESSAGE
				}
				
				/*******************************/
				/* IF STATEMENT TO ERROR CHECK */
				/*******************************/
				else if ((month2 == "2") && (day2 == "31"))
				{
					redo = true;
					errorMessage(error7);			// CALL TO ERROR MESSAGE
				}
			}
		}
		while(redo == true);
		
		num2 = "" + num;			// MAKES YEAR INTO A STRING
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num2;			// RETURNS NUM
	}
	
	public static String printArray(ArrayList<Customer> custList)
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = "";			// INITIALIZES THE STRING
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			str+= "" + custList.get(i).toString();		// CREATES A STRING 
														// REPRESENTATION OF ARRAYLIST
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURN STR
	}
}


	
