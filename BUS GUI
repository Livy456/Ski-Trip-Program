/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 2, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER	
import java.io.FileWriter;				// IMPORTS FILE WRITER
import java.io.IOException;				// IMPORTS IO EXCEPTION TO WRITE IN FILE
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT
import javax.swing.*;					// IMPORTS SWING
import javax.swing.JFrame;				// IMPORTS JFRAME
import java.util.ArrayList;				// IMPORTS ARRAYLIST
import java.util.Random;				// IMPORTS RANDOM

public class BusGUI extends JFrame implements ActionListener 
{		
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input your Group Name: ";
	final static String message2 = "Do you really want to do this?"; 
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1= "Input Name";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error1 = "ERROR!!! Name can not be more than 30 characters!!!";
	final static String error3 = "ERROR!!! Number must be greater than 0 and less than or equal to 400!!!";
	final static String error4 = "ERROR!!! This month can not be chosen with this day!!!";
	final static String error5 = "ERROR!!! This day can not be chosen with this month!!!";
	final static String error6 = "ERROR!!! This day can not be chosen with this year!!!";
	final static String error7 = "ERROR!!! This date has already past!!!";
	final static String error8 = "ERROR!!! You need to finish filling out information!!!";
	final static String error9 = "Max number of buses has been exceeded!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private String message4 = "Do you want to pick another " +
							  "date or another group size? \n" +
			   				  "If you keep this date or " +
							  "group size, then ";	// CREATES A CONFIRM MESSAGE
	protected int startID;				// STARTING ID FROM CUSTOMER FILE
	protected int ogID;					// ORIGIAL START ID FROM CUSTOMER FILE
	private JButton enterB;				// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton quitB;				// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton returnB;			// CREATES A BUTTON TO RETURN TO MAIN SKI TRIP MENU
	protected static JComboBox<String> monthCB;	// CREATES A COMBO BOX(DROP-DOWN LIST) FOR MONTH
	protected static JComboBox<String> dayCB;	// CREATES A COMBO BOX FOR DAY
	protected static JComboBox<String> yearCB;	// CREATES A COMBO BOX FOR YEAR
	protected static JTextField nameTF;	// CREATES A TEXT FIELD FOR NAME 
	protected static JTextField grpSzTF;// CREATES A TEXT FIELD FOR GROUP SIZE
	protected static Label nameL;		// CREATES A LABEL FOR NAME
	private Label info;					// CREATES A LABEL FOR INFORMATION
	private Label warning;				// CREATES A LABEL FOR INPUT CONSTRAINTS
	private Label warning2;				// CREATES A LABEL FOR INPUT CONSTRAINTS
	private Label welcome;				// CREATES A LABEL TO WELCOME CLIENT
	protected static Label grpSzL;		// CREATES A LABEL FOR GROUP SIZE
	protected static Label dateL;		// CREATES A LABEL FOR DATE
	protected JFrame frame;				// CREATES A JFRAME 
	private Container container;		// CREATES A CONTAINER
	private Font font;					// CREATES A FONT FOR LABELS
	protected static Customer customer;	// CREATES AN INSTANCE OF CUSTOMER
	private Random generator = new Random(); // INSTANCE VARIABLE FOR RANDOM NUMBER GENERATOR
	protected static ArrayList <Customer> custList = new ArrayList<Customer>();	// CREATES AN ARRAYLIST OF CUSTOMER
	protected static ArrayList<Customer> fileList = new ArrayList<Customer>();	// CREATES AN ARRAYLIST OF CUSTOMER DATA FROM FILE
	private static DecimalFormat df = new DecimalFormat("0.00");			// INSTANTIATES DECIMALFORMAT
	private String[] months = {"", "01", "02", "03", "04", "05", "06",
							   "07", "08", "09", "10", "11", "12"};			// CREATES AN ARRAY FOR MONTHS
	private String[] years = {"", "2020", "2021", "2022", "2023", "2024",
							  "2025", "2026", "2027", "2028", "2029",
							  "2030", "2031", "2032", "2033", "2034",
							  "2035", "2036", "2037", "2038", "2039",
							  "2040", "2041", "2042", "2043", "2044",
							  "2045", "2046", "2047", "2048", "2049"};		// CREATES AN ARRAY FOR YEARS
	private String[] days = {"", "1", "2", "3", "4", "5",
							 "6", "7", "8", "9", "10",
							 "11", "12", "13", "14", "15",
							 "16", "17", "18", "19", "20",
							 "21", "22", "23", "24", "25",
							 "26", "27", "28", "29", "30", "31"};			// CREATES AN ARRAY FOR DAYS
	
	public BusGUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");				// INSTANTIATES A JBUTTON 
		quitB = new JButton("Quit Program");		// INSTANTIATES A JBUTTON 
		returnB = new JButton("Return");			// INSTANTIATES A JBUTTON
		customer = new Customer();					// INSTANTIATES A CUSTOMER		
		nameTF = new JTextField();					// INSTANTIATES A JTEXTFIELD
		grpSzTF = new JTextField();					// INSTANTIATES A JTEXTFIELD 
		monthCB = new JComboBox<String>(months);	// INSTANTIATES A JCOMBOBOX
		dayCB = new JComboBox<String>(days);		// INSTANTIATES A JCOMBOBOX
		yearCB = new JComboBox<String>(years);		// INSTANTIATES A JCOMBOBOX
		nameL = new Label("Name");					// INSTANTIATES A LABEL
		grpSzL = new Label("Group Size");			// INSTANTIATES A LABEL
		dateL = new Label("Date");					// INSTANTIATES A LABEL
		frame =  new JFrame("Ski Trip");			// INSTANTIATES A BLANK JFRAME
		font = new Font("Times New Roman", 
						Font.BOLD, 12);				// INSTANTIATES FONT					
		customer = new Customer();					// INSTANTIATES AN INSTANCE OF CUSTOMER
		welcome = new Label("Welcome to the Ski "+
							"Customer Input");		// INSTANTIATES A LABEL
		info = new Label("Please enter the " +
						 "necessary information " +
						 "into the fields below.");	// INSTANTIATES A LABEL
		warning = new Label("Name has to be < "+
							"31 characters.");		// INSTANTIATES A LABEL	
		warning2 = new Label("Group size has to " +
							 "be between 1 - 400.");// INSTANTIATES A LABEL
		container = frame.getContentPane();			// CREATES A CONTENT PANE, WHICH  
													// HOLDS THE OBJECTS ON THE FRAME
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 550, 450);	// SETS X POSITION, Y POSITION, LENGTH, 
												// AND WIDTH OF THE JFRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.ORANGE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		nameL.setFont(font);		// SETS THE FONT OF THE NAME LABEL
		grpSzL.setFont(font);		// SETS THE FONT OF THE GROUP SIZE LABEL
		dateL.setFont(font);		// SETS THE FONT OF THE DATE LABEL
		info.setFont(font);			// SETS THE FONT OF THE INFO LABEL
		welcome.setFont(font);		// SETS THE FONT OF THE WELCOME LABEL
		warning.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		warning2.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		nameL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF NAME LABEL
		grpSzL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF GROUP SIZE LABEL
		dateL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF DATE LABEL
		info.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF INFO LABEL
		welcome.setForeground(Color.BLACK); // SETS FOREGROUND COLOR OF WELCOME LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(330, 290, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(410, 325, 110, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(410, 290, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(80, 80, 130, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(80, 110, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(80, 140, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(220, 140, 130, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(360, 140, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(10, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(10, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(10, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(95, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)				
		welcome.setBounds(160, 10, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning.setBounds(220, 80, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning2.setBounds(220, 110, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH) 
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nameTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		grpSzTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		monthCB.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		dayCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		yearCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(welcome);		// ADDS WELCOME LABEL TO CONTAINER
		container.add(warning);		// ADDS WARNING LABEL TO CONTAINER
		container.add(warning2);	// ADDS WARNING LABEL TO CONTAINER
	}
	
	public BusGUI(ArrayList<Customer> list, ArrayList<Customer> oglist, int strID)
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{		
		custList = list;	// CUSTOMER LIST REFERENCES THE SAME MEMORY ADDRESS AS LIST
		ogID = strID;		// ORIGINAL STARTING IF IN CUSTOMER FILE
		startID = strID;	// STARTING ID FOR NEXT CUSTOMER
		fileList = oglist;	// FILE LIST REFERENCES THE SAME MEMORY ADDRESS AS OGLIST
		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");				// INSTANTIATES A JBUTTON 
		quitB = new JButton("Quit Program");		// INSTANTIATES A JBUTTON 
		returnB = new JButton("Return");			// INSTANTIATES A JBUTTON
		customer = new Customer();					// INSTANTIATES A CUSTOMER		
		nameTF = new JTextField();					// INSTANTIATES A JTEXTFIELD
		grpSzTF = new JTextField();					// INSTANTIATES A JTEXTFIELD 
		monthCB = new JComboBox<String>(months);	// INSTANTIATES A JCOMBOBOX
		dayCB = new JComboBox<String>(days);		// INSTANTIATES A JCOMBOBOX
		yearCB = new JComboBox<String>(years);		// INSTANTIATES A JCOMBOBOX
		nameL = new Label("Name");					// INSTANTIATES A LABEL
		grpSzL = new Label("Group Size");			// INSTANTIATES A LABEL
		dateL = new Label("Date");					// INSTANTIATES A LABEL
		frame =  new JFrame("Ski Trip");			// INSTANTIATES A BLANK JFRAME
		font = new Font("Times New Roman", 
						Font.BOLD, 12);				// INSTANTIATES FONT					
		customer = new Customer();					// INSTANTIATES AN INSTANCE OF CUSTOMER
		welcome = new Label("Welcome to the Ski "+
							"Customer Input");		// INSTANTIATES A LABEL
		info = new Label("Please enter the " +
						 "necessary information " +
						 "into the fields below.");	// INSTANTIATES A LABEL
		warning = new Label("Name has to be < "+
							"31 characters.");		// INSTANTIATES A LABEL	
		warning2 = new Label("Group size has to " +
							 "be between 1 - 400.");// INSTANTIATES A LABEL
		container = frame.getContentPane();			// CREATES A CONTENT PANE, WHICH  
													// HOLDS THE OBJECTS ON THE FRAME
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 550, 450);	// SETS X POSITION, Y POSITION, LENGTH, 
												// AND WIDTH OF THE JFRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.ORANGE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		nameL.setFont(font);		// SETS THE FONT OF THE NAME LABEL
		grpSzL.setFont(font);		// SETS THE FONT OF THE GROUP SIZE LABEL
		dateL.setFont(font);		// SETS THE FONT OF THE DATE LABEL
		info.setFont(font);			// SETS THE FONT OF THE INFO LABEL
		welcome.setFont(font);		// SETS THE FONT OF THE WELCOME LABEL
		warning.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		warning2.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		nameL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF NAME LABEL
		grpSzL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF GROUP SIZE LABEL
		dateL.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF DATE LABEL
		info.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF INFO LABEL
		welcome.setForeground(Color.BLACK); // SETS FOREGROUND COLOR OF WELCOME LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(330, 290, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(410, 325, 110, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(410, 290, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(80, 80, 130, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(80, 110, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(80, 140, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(220, 140, 130, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(360, 140, 130, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(10, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(10, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(10, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(95, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)				
		welcome.setBounds(160, 10, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning.setBounds(220, 80, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning2.setBounds(220, 110, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH) 
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nameTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		grpSzTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		monthCB.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		dayCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		yearCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(welcome);		// ADDS WELCOME LABEL TO CONTAINER
		container.add(warning);		// ADDS WARNING LABEL TO CONTAINER
		container.add(warning2);	// ADDS WARNING LABEL TO CONTAINER
	}
	
	public  void actionPerformed(ActionEvent event)
	/******************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON AND TEXT FIELD */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 		  */
	/* 				   EVENT FOR BUTTON AND TEXT FIELD	  */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String costdf;		// STRING REPRESENTATION OF COST
		String error10;		// ERROR MESSAGE WHEN MINIMUM NUMBER OF CUSTOMER HAS NOT BEEN MET
		String message5;	// REFUND MESSAGE WHEN MAX NUMBER OF CUSTOMERS HAS BEEN MET
		String message6;	// CONFIRM MESSAGE TO CHANGE GROUP SIZE OR SKI TRIP DATE
		String message7;	// REFUND MESSAGE WHEN MIN NUMBER OF CUSTOMERS HAS NOT BEEN MET
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		int excess;			// REUSUABLE INT FOR SKI TRIP MEMBERS THAT ARE ABLE TO GO ON TRIP
		int id;				// REUSUABLE INT FOR GROUP ID
		int refund;			// REUSUABLE INT FOR CUSTOMER REFUNDS
		int sum;			// REUSUABLE INT FOR TOTAL SIZE OF GROUP FOR SPECIFIC DATE
		double cost;		// REUSUABLE DOUBLE FOR COST OF REFUNDS
		
		costdf = "";	// INITIALIZES AND RESETS COSTDF VALUE
		message7 = "";	// INITIALIZES AND RESETS MESSAGE7 VALUE
		cost = 0.0;		// INITIALIZES AND RESETS COST VALUE
		excess = 0;		// INITIALIZES AND RESETS EXCESS VALUE
		id = 0;			// INITIALIZES AND RESETS ID VALUE
		refund = 0;		// INITIALIZES AND RESETS REFUND VALUE
		sum = 0;		// INITIALIZES AND RESETS SUM VALUE
		
		/************************************/
		/* ASSIGNS BUTTON PRESSED TO ACTION */
		/************************************/
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if (action.equals("Quit Program"))
		{
			confirm = confirmWindow(message2);	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				/*******************************************/
				/* IF STATEMENT TO CHECK IF THERE'S A FILE */	
				/*******************************************/
				if(fileList.size() > 0)
				{
					returnFile(ogID);		// CALL TO RETURN FILE TO ORIGINAL STATE					
				}
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action.equals("Return"))
		{
			confirm = confirmWindow(message2);	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.setVisible(false);// HIDES THE FRAME
				frame.dispose();	// GETS RID OF THE OLD FRAME
				new Menu_GUI();		// INSTANTIATES MENU GUI FRAME
			}
		}
		
		actionPerformedName(event);				// CALL TO ACTION PERFORMED FOR NAME
		actionPerformedSize(event);				// CALL TO ACTION PERFORMED FOR GROUP SIZE
		id = actionPerformedID(event, startID);	// CALL TO ACTION PERFORMED FOR GROUP ID
		actionPerformedDate(event);				// CALL TO ACTION PERFORMED FOR DATE
		sum = maxSize();						// CALL TO MAX SIZE
		
		/**********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/**********************************************************/
		if (action.equals("Enter"))
		{	
			/*****************************************************/
			/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*****************************************************/
			if((nameTF.getText().equals("")) || (grpSzTF.getText() == "") 
				|| (monthCB.getSelectedItem() == "") || (dayCB.getSelectedItem() == "") 
				|| (yearCB.getSelectedItem() == ""))
			{
				errorMessage(error8);	// CALL TO ERROR MESSAGE
			}
			
			/*********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MIN LIMIT OF CUSTOMERS HAS BEEN MET */	
			/*********************************************************************/
			else if (customer.getSize() < 10)
			{
				/***********************************************************************/
				/* IF STATEMENT TO CHECK IF THERE ARE OTHER CUSTOMERS ON SPECIFIC DATE */	
				/***********************************************************************/
				if(sum < 10)
				{
					error10 = "You do not have enough customers on your ski trip";
					message6 = "If you keep this date or group size all your " + 
							   " group members will receive a refund." + "\n" + 
							   "Do you want to select a new date or new group size?";
					errorMessage(error10);				// CALL TO ERROR MESSAGE
					confirm = confirmWindow(message6);	// CALL TO CONFIRM WINDOW
					
					/****************************************************************/
					/* IF STATEMENT TO CONFIRM ACTION OF REDOING CUSTOMER DATE/SIZE */	
					/****************************************************************/
					if (confirm == 0)
					{
						monthCB.setSelectedItem("");	// CALL TO GET SELECTED ITEM
						dayCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
						yearCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
						grpSzTF.setText("");			// CALL TO SET TEXT
					}
					
					/*****************************************************************/
					/* ELSE IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
					/*****************************************************************/
					else if (confirm == 1)
					{
						/***********************************************************************/
						/* IF STATEMENT TO CHECK IF MESSAGE SHOULD REFER TO MULTIPLE CUSTOMERS */
						/***********************************************************************/
						if(customer.getSize() > 1)
						{
							message7 = "Your " + customer.getSize() + " group members will receive a " + 
									   " $" + customer.getCost() + " refund.";
						}
						
						/***************************************************************************/
						/* ELSE IF STATEMENT TO CHECK IF MESSAGE SHOULD REFER TO SINGULAR CUSTOMER */
						/***************************************************************************/
						else if (customer.getSize() == 1)
						{
							message7 = "Your " + customer.getSize() + " group member will receive a " + 
									   " $" + customer.getCost() + " refund.";
						}
						
						refundWindow(message7);		// CALL TO REFUND MESSAGE
						startID = id;				// ASSIGNS NEXT RANDOM ID NUMBER TO STARTING ID
						
						/*******************************************/
						/* IF STATEMENT TO CHECK IF THERE'S A FILE */	
						/*******************************************/
						if(fileList.size() > 0)
						{
							writeFile(id, ogID);	// CALL TO WRITE FILE
						}
						
						new Menu_GUI();				// INSTANTIATES MENU GUI WINDOW
						frame.dispose();			// CALL TO DISPOSE
					}
				}
				
				/****************************************************************************/
				/* ELSE IF STATEMENT TO CHECK IF THERE ARE OTHER CUSTOMERS ON SPECIFIC DATE */	
				/****************************************************************************/
				else if (sum > 10)
				{
					message6 = "Are you sure want to do this?";
					confirm = confirmWindow(message6);	// CALL TO CONFIRM WINDOW
					
					/************************************************************/
					/* IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
					/************************************************************/
					if(confirm == 0)
					{	
						custList.add(customer);	// ADDS CUSTOMER TO CUSTOMER LIST
						startID = id;			// ASSIGNS NEXT RANDOM ID NUMBER TO STARTING ID
						
						/*******************************************/
						/* IF STATEMENT TO CHECK IF THERE'S A FILE */	
						/*******************************************/
						if(fileList.size() > 0)
						{
							writeFile(id, ogID);	// CALL TO WRITE FILE
						}
						
						new Menu_GUI();			// INSTANTIATES MENU GUI WINDOW
						frame.dispose();		// CALL TO DISPOSE
					}
				}
			}
			
			/**********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MAX LIMIT OF 400 PEOPLE WAS EXCEEDED */	
			/**********************************************************************/
			else if(sum > 400)
			{
				excess = customer.getSize()-(sum-400);	// NUMBER OF AVAILABLE SPOTS LEFT FOR SKI TRIP
				errorMessage(error9);					// CALL TO ERROR MESSAGE
				
				/********************************************************/
				/* IF STATEMENT TO CHECK IF EXCESS IS GREATER THAN ZERO */
				/********************************************************/
				if(excess > 0)
				{
					message4 += "only " + excess + " group members can go on the Ski Trip.";
				}
				
				/**********************************************************/
				/* ELSE IF STATEMENT TO CHECK IF EXCESS IS LESS THAN ZERO */
				/**********************************************************/
				else if(excess <= 0)
				{
					message4 += "none of your group members can go on the Ski Trip.";
				}
				
				confirm = confirmWindow(message4);		// CALL TO CONFIRM WINDOW
				
				/************************************************************/
				/* IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
				/************************************************************/
				if(confirm == 1)
				{					
					customer.setSize(excess);	// CALL TO SET SIZE
					refund = sum - 400;			// CALCULATES NUMBER OF REFUNDED PEOPLE
					cost = refund * 49.99;		// CALCULATES REFUND COST
					costdf = df.format(cost);	// CALL TO FORMAT 
					message5= "" + refund + " ski trip members will receive a refund. \n$" + 
							   costdf + " will be returned.";
					refundWindow(message5);		// CALL TO REFUND WINDOW
					frame.setVisible(false);	// HIDES THE FRAME
					custList.add(customer);		// ADDS CUSTOMER TO ARRAYLIST
					startID = id;	// ASSIGNS NEXT RANDOM ID NUMBER TO STARTING ID
					
					/*******************************************/
					/* IF STATEMENT TO CHECK IF THERE'S A FILE */	
					/*******************************************/
					if(fileList.size() > 0)
					{
						writeFile(id, ogID);	// CALL TO WRITE FILE
					}
					
					new Menu_GUI();		// INSTANTIATES A NEW WINDOW
					frame.dispose();	// CALL TO DISPOSE
				}
				
				/*********************************************************************/
				/* ELSE IF STATEMENT TO CONFIRM ACTION OF REDOING CUSTOMER DATE/SIZE */	
				/*********************************************************************/
				else if(confirm == 0)
				{
					monthCB.setSelectedItem("");	// CALL TO GET SELECTED ITEM
					dayCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
					yearCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
					grpSzTF.setText("");			// CALL TO SET TEXT
				}
			}
			
			/**********************************************************/
			/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/**********************************************************/
			else if ((nameTF.getText() != "") && (grpSzTF.getText() != "") 
					&& (monthCB.getSelectedItem() != "") && (dayCB.getSelectedItem() != "") 
					&& (yearCB.getSelectedItem() != ""))
			{
				confirm = confirmWindow(message2);	// CALL TO CONFIRM WINDOW
				
				/************************************************************/
				/* IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
				/************************************************************/
				if(confirm == 0)
				{
					frame.setVisible(false);// HIDES THE FRAME
					custList.add(customer);	// ADDS CUSTOMER TO ARRAYLIST
					startID = id;			// ASSIGNS NEXT RANDOM ID NUMBER TO STARTING ID

					/*******************************************/
					/* IF STATEMENT TO CHECK IF THERE'S A FILE */	
					/*******************************************/
					if(fileList.size() > 0)
					{
						writeFile(id, ogID);	// CALL TO WRITE FILE
					}
					
					new Menu_GUI(); 		// INSTANTIATES A NEW FRAME
					frame.dispose(); 		// CALL TO DISPOSE
				}
			}
		}
	}
	
	public void actionPerformedDate(ActionEvent event)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS JCOMBO BOXES FOR MONTH, DAY, */ 
	/* 				  AND YEAR AND NEEDS A DATE 			   */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR    */
	/* 				   TEXT FIELD FOR GROUP SIZE			   */
	/***********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object month;		// REUSUABLE OBJECT INPUT
		Object day;			// REUSUABLE OBJECT INPUT
		Object year;		// REUSUABLE OBJECT INPUT
		String date;		// REUSUABLE STRING INPUT
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* INPUTS MONTH, DAY, AND YEAR */
			/*******************************/
			month = monthCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM MONTH DROP-DOWN LIST	
			day = dayCB.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DAY DROP-DOWN LIST		
			year = yearCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM YEAR DROP-DOWN LIST	
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			if((month.equals("2")) && (day.equals("29")) && (year.equals("2021")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2022")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2023")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2025")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2026")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2027")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2029")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2030")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2031")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2033")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2034")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2035")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2037")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2038")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2039")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2041")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2042")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2043")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2045")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2046")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2047")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2049")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("30")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("31")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("4")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("6")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("9")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("11")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("1")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("3")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("4")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("5")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("6")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("7")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("8")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("9")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("10")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("11")) && (year.equals("2020")))
			{
				errorMessage(error7);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			date = "" + month + "/" + day + "/" + year;	
		}
		while((month.equals("2")) && (day.equals("29")) && (year.equals("2021")) || 
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2022")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2023")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2025")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2026")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2027")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2029")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2030")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2031")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2033")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2034")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2035")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2037")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2038")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2039")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2041")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2042")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2043")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2045")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2046")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2047")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2049")) ||
			  (month.equals("2")) && (day.equals("30")) || 
			  (month.equals("2")) && (day.equals("31")) ||
			  (month.equals("4")) && (day.equals("31")) || 
			  (month.equals("6")) && (day.equals("31")) ||
			  (month.equals("9")) && (day.equals("31")) || 
			  (month.equals("11")) && (day.equals("31")) || 
			  (month.equals("1")) && (year.equals("2020")) ||
			  (month.equals("2")) && (year.equals("2020")) ||
			  (month.equals("3")) && (year.equals("2020")) ||
			  (month.equals("4")) && (year.equals("2020")) ||
			  (month.equals("5")) && (year.equals("2020")) ||
			  (month.equals("6")) && (year.equals("2020")) ||
			  (month.equals("7")) && (year.equals("2020")) || 
			  (month.equals("8")) && (year.equals("2020")) ||
			  (month.equals("9")) && (year.equals("2020")) ||
			  (month.equals("10")) && (year.equals("2020")) ||
			  (month.equals("11")) && (year.equals("2020")));
		
		customer.setMonth((String)month);	// CALL TO SET MONTH
		customer.setDay((String)day);		// CALL TO SET DAY
		customer.setYear((String)year);		// CALL TO SET YEAR
		customer.setDate(date);				// CALL TO SET DATE
	}
	
	public int actionPerformedID(ActionEvent event, int num)
	/*****************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR NAME  */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT  */
	/* 				   FOR TEXT FIELD FOR NAME			 */
	/*****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int i;			// REUSUABLE INTEGER VALUE
		
		/*****************************************************/
		/* DO-WHILE LOOP UNTIL VALUE IS A THREE DIGIT NUMBER */
		/*****************************************************/
		do
		{
			i = (generator.nextInt(900)) + 100;	// GENERATES A RANDOM INTEGER
			
			/**************************************/
			/* FOR LOOP TO CHECK EACH CUSTOMER ID */
			/**************************************/
			for(int j = 0; j < custList.size(); j++)
			{
				int id = custList.get(j).getID();		// CALL TO GET ID OF CUSTOMER
				
				/************************************************/
				/* WHILE LOOP TO CHECK FOR SAME GROUP ID VALUES */
				/************************************************/
				while((i == id) || (i == startID))
				{
					i = (generator.nextInt(900)) + 100;	// GENERATES A RANDOM INTEGER				
					j = 0;
				}
			}
		}
		while((i < 100) || (i > 999)); 

		/****************************************************/
		/* IF STATEMENT TO CHECK IF FILE ARRAYLIST IS EMPTY */
		/****************************************************/
		if(num == 0)
		{
			customer.setID(i);	// CALL TO SET ID TO RANDOM NUMBER
		}
		
		/*************************************************************/
		/* ELSE IF STATEMENT TO CHECK IF FILE ARRAYLIST IS NOT EMPTY */
		/*************************************************************/
		else if (num != 0)
		{
			customer.setID(num);	// CALL TO SET ID TO STARTING ID NUMBER FROM FILE
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return i;	// ASSIGNS THE NEW STARTING ID NUMBER TO A NEW RANDOM ID NUMBER
	}
	
	public void actionPerformedName(ActionEvent event)
	/*****************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR NAME  */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT  */
	/* 				   FOR TEXT FIELD FOR NAME			 */
	/*****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			name = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if (name.length() > 30)
			{
				nameTF.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while(name.length() > 30);

		customer.setName(name);				// CALL TO SET NAME
	}
	
	public void actionPerformedSize(ActionEvent event)
	/**********************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR GROUP SIZE */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR   */
	/* 				   TEXT FIELD FOR GROUP SIZE			  */
	/**********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String grp;			// REUSUABLE STRING INPUT
		int grpSz;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			grp = grpSzTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(grp);		// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((grpSz <= 0) ||(grpSz > 400))
			{
				grpSzTF.setText("");			// CLEARS THE TEXT FIELD 
				errorMessage(error3);			// CALL TO ERROR MESSAGE
			}
		}
		while((grpSz <= 0) || (grpSz > 400));

		customer.setSize(grpSz);		// CALL TO SET SIZE
	}
	
	public static int confirmWindow(String str)
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				str,
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static int maxSize()
	/********************************************************************/
	/* PRECONDITION - NEEDS TO CHECK IF CUSTOMERS EXCEEDED 20 BUS LIMIT	*/
	/* POSTCONDITION - CHECKS IF CUSTOMERS EXCEEDED 20 BUS LIMIT 		*/
	/********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;		// DATE OF CURRENT CUSTOMER
		int grp;			// SIZE OF GROUP FOR SPECIFIC DATE
		
		grp = 0;			// INITIALIZES AND RESETS GRP
		
		date = customer.getDate();	// CALL TO GET DATE
		
		/******************************************/
		/* FOR LOOP TO FIND UNIQUE SKI TRIP DATES */
		/******************************************/
		for(int j = 0; j < custList.size(); j++)
		{
			Object dt = custList.get(j).getDate(); // DECLARES AND INITIALIZES DT TO UNIQUE DATE VALUE
			
			/************************************************************/
			/* IF STATEMENT TO CHECK IF CURRENT CUSTOMER DATE EQUALS DT */
			/************************************************************/
			if(dt.equals(date))
			{	
				grp+=custList.get(j).getSize();	// ADDS GROUP SIZE FOR SKI TRIPS ON SAME DATE
			}
		}
		
		grp += customer.getSize();	// ADD CURRENT CUSTOMER SIZE

		/******************/
		/* RETURN SECTION */
		/******************/
		return grp;			// RETURNS GRP
	}
	
	public static void refundWindow(String str)
	/************************************************/
	/* PRECONDITION - NEEDS DIALOG BOX FOR REFUNDS	*/
	/* POSTCONDITION - CREATES WINDOW TO TELL USER	*/
	/* 				   IF THEY WILL HAVE REFUNDS	*/
	/************************************************/
	{
		/***********************/
		/* MAKES REFUND WINDOW */
		/***********************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Refund Window",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public void returnFile(int n)
	/**************************************************************/
	/* PRECONDITION - NEEDS ORIGINAL CUSTOMER DATA ON TEXT FILE	  */
	/* POSTCONDITION - WRITES ORIGINAL CUSTOMER DATA TO TEXT FILE */
	/**************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// STRING REPRESENTATION OF THE FILE LIST
		
		str = "";	// INITIALIZES STR
		ogID = n;
		str += "" + ogID + "\n";	// ADDS THE ORIGINAL STARTING ID NUMBER TO FILE 

		/*******************************************************/
		/* FOR LOOP TO MAKE A STRING OF THE ORIGINAL DATA FILE */
		/*******************************************************/
		for(int i=0; i < fileList.size(); i++)
		{
			str+= "" + fileList.get(i).getID() + "\n" +
					 "" + fileList.get(i).getName() + "\n" +
					 "" + fileList.get(i).getSize() + "\n" +
					 "" + fileList.get(i).getDate();
			
			/***************************************************************************************/
			/* IF STATEMENT TO MAKE SURE THAT THE LAST ELEMENT IN FILE IS NOT A NEW LINE CHARACTER */
			/***************************************************************************************/
			if(i < fileList.size()-1)
			{
				str+= "\n";
			}
		}
		
		/************************************************/
		/* TRIES TO WRITE TO THE FILE NEW CUSTOMER DATA */
		/************************************************/
		try
		{
			FileWriter writer = new FileWriter("E:\\Bus Program\\src\\customerData_Copy");	// INSTANTIATES FILE WRITER
			writer.write(""+str);	// WRITES TO FILE
			writer.close();			// CLOSES THE FILE
			System.out.println("Wrote original customer data the file");
		}
		
		/******************************************************/
		/* CATCHES THE PROGRAM IF IT CANNOT WRITE TO THE FILE */
		/******************************************************/
		catch(IOException e)
		{
			System.out.println("Did not write the original customer data to file");
			e.printStackTrace();	// PRINTS STACK TRACK ERROR
 		}
	}
	
	public void writeFile(int id, int n)
	/****************************************************************/
	/* PRECONDITION - NEEDS TO WRITE NEW CUSTOMER DATA TO TEXT FILE	*/
	/* POSTCONDITION - WRITES NEW CUSTOMER DATA TO TEXT FILE 		*/
	/****************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// STRING REPRESENTATION OF THE FILE LIST
		
		ogID = n;
		startID = id;
		str = "";	// INITIALIZES STR
		
		str += "" + ogID + "\n";	// ADDS THE ORIGINAL STARTING ID NUMBER TO FILE
		/*******************************************************/
		/* FOR LOOP TO MAKE A STRING OF THE ORIGINAL DATA FILE */
		/*******************************************************/
		for(int i=0; i < custList.size(); i++)
		{
			str+= "" + custList.get(i).getID() + "\n" +
					 "" + custList.get(i).getName() + "\n" +
					 "" + custList.get(i).getSize() + "\n" +
					 "" + custList.get(i).getDate() + "\n";
		}
		str += "" + startID;	// ADDS THE ORIGINAL STARTING ID NUMBER TO FILE

		/************************************************/
		/* TRIES TO WRITE TO THE FILE NEW CUSTOMER DATA */
		/************************************************/
		try
		{
			FileWriter writer = new FileWriter("E:\\Bus Program\\src\\customerData_Copy");	// INSTANTIATES FILE WRITER
			writer.write("" + str);	// WRITES TO FILE
			writer.close();			// CLOSES THE FILE
			System.out.println("Wrote to the file");
		}
		
		/******************************************************/
		/* CATCHES THE PROGRAM IF IT CANNOT WRITE TO THE FILE */
		/******************************************************/
		catch(IOException e)
		{
			System.out.println("Did not write to file");
			e.printStackTrace();	// PRINTS STACK TRACK ERROR
 		}
	}
}
