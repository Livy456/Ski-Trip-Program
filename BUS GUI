/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 2, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER	
import java.awt.event.*;				// IMPORTS EVENT
import javax.swing.*;					// IMPORTS SWING
import java.util.ArrayList;				// IMPORTS ARRAYLIST
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT

public class BusGUI implements ActionListener 
{	
	private static final long serialVersionUID = 1L;	// SERIALIZES CLASS
	
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input your Group Name: ";
	final static String message2 = "Input the group ID number(three digit number between 100 - 999): ";
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1= "Input Name";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error1 = "ERROR!!! Name can not be more than 10 characters!!!";
	final static String error2 = "ERROR!!! Number must be between 100 and 999!!!";
	final static String error3 = "ERROR!!! Number must be greater than 0 and less than or equal to 400!!!";
	final static String error4 = "ERROR!!! This month can not be chosen with this day!!!";
	final static String error5 = "ERROR!!! This day can not be chosen with this month!!!";
	final static String error6 = "ERROR!!! This day can not be chosen with this year!!!";
	final static String error7 = "ERROR!!! This year can not be chosen with this day";
	final static String error8 = "ERROR!!! You need to finish filling out information!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;			// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JComboBox monthCB;		// CREATES A COMBO BOX(DROP-DOWN LIST) FOR MONTH
	private JComboBox dayCB;		// CREATES A COMBO BOX FOR DAY
	private JComboBox yearCB;		// CREATES A COMBO BOX FOR YEAR
	private JTextField nameTF;		// CREATES A TEXT FIELD FOR NAME 
	private JTextField grpSzTF;		// CREATES A TEXT FIELD FOR GROUP SIZE
	private Label nameL;			// CREATES A LABEL FOR NAME
	private Label info;				// CREATES A LABEL FOR INFORMATION
	private Label info2;			// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private Label warning;			// CREATES A LABEL FOR INPUT CONSTRAINTS
	private Label warning2;			// CREATES A LABEL FOR INPUT CONSTRAINTS
	private Label welcome;			// CREATES A LABEL TO WELCOME CLIENT
	private Label grpSzL;			// CREATES A LABEL FOR GROUP SIZE
	private Label dateL;			// CREATES A LABEL FOR DATE
	private JFrame frame;			// CREATES A JFRAME 
	private Container container;	// CREATES A CONTAINER
	private Font font;				// CREATES A FONT FOR LABELS
	protected static Customer customer;		// CREATES AN INSTANCE OF CUSTOMER
	protected static ArrayList <Customer> custList = new ArrayList();			// CREATES AN ARRAYLIST OF CUSTOMER
	private String[] months = {"", "1", "2", "3", "4", "5", "6",
							   "7", "8", "9", "10", "11", "12"};		// CREATES AN ARRAY FOR MONTHS
	private String[] years = {"", "2020", "2021", "2022", "2023", "2024",
							  "2025", "2026", "2027", "2028", "2029",
							  "2030", "2031", "2032", "2033", "2034",
							  "2035", "2036", "2037", "2038", "2039",
							  "2040", "2041", "2042", "2043", "2044",
							  "2045", "2046", "2047", "2048", "2049"};	// CREATES AN ARRAY FOR YEARS
	private String[] days = {"", "1", "2", "3", "4", "5",
							 "6", "7", "8", "9", "10",
							 "11", "12", "13", "14", "15",
							 "16", "17", "18", "19", "20",
							 "21", "22", "23", "24", "25",
							 "26", "27", "28", "29", "30", "31"};		// CREATES AN ARRAY FOR DAYS
	
	public BusGUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");		// INSTANTIATES A JBUTTON 
		quitB = new JButton("Quit");		// INSTANTIATES A JBUTTON 
		customer = new Customer();			// INSTANTIATES A CUSTOMER		
		nameTF = new JTextField();			// INSTANTIATES A JTEXTFIELD
		grpSzTF = new JTextField();			// INSTANTIATES A JTEXTFIELD 
		monthCB = new JComboBox(months);	// INSTANTIATES A JCOMBOBOX
		dayCB = new JComboBox(days);		// INSTANTIATES A JCOMBOBOX
		yearCB = new JComboBox(years);		// INSTANTIATES A JCOMBOBOX
		nameL = new Label("Name");			// INSTANTIATES A LABEL
		grpSzL = new Label("Group Size");	// INSTANTIATES A LABEL
		dateL = new Label("Date");			// INSTANTIATES A LABEL
		frame =  new JFrame("Ski Trip");	// INSTANTIATES A BLANK JFRAME
		font = new Font("Times New Roman", 
						Font.BOLD, 12);		// INSTANTIATES FONT					
		customer = new Customer();			// INSTANTIATES AN INSTANCE OF CUSTOMER
		welcome = new Label("Welcome to the Ski "+
							"Customer Input");	// INSTANTIATES A LABEL
		info = new Label("Please enter the " +
						 "necessary information " +
						 "into the fields below.");	// INSTANTIATES A LABEL
		info2 = new Label("Press enter key after "+
						  "entering info.");		// INSTANTIATES A LABEL
		warning = new Label("Name has to be < "+
							"11 characters.");			// INSTANTIATES A LABEL	
		warning2 = new Label("Group size has to " +
							 "be between 1 - 400.");// INSTANTIATES A LABEL
		container = frame.getContentPane();			// CREATES A CONTENT PANE, WHICH  
													// HOLDS THE OBJECTS ON THE FRAME
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 450, 300);	// SETS X POSITION, Y POSITION, LENGTH, 
												// AND WIDTH OF THE JFRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.GRAY);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		nameL.setFont(font);		// SETS THE FONT OF THE NAME LABEL
		grpSzL.setFont(font);		// SETS THE FONT OF THE GROUP SIZE LABEL
		dateL.setFont(font);		// SETS THE FONT OF THE DATE LABEL
		info.setFont(font);			// SETS THE FONT OF THE INFO LABEL
		info2.setFont(font);		// SETS THE FONT OF THE INFO2 LABEL
		welcome.setFont(font);		// SETS THE FONT OF THE WELCOME LABEL
		warning.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		warning2.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(260, 190, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(340, 190, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(80, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(80, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(80, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(190, 140, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(300, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(10, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(10, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(10, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(50, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)				
		info2.setBounds(120, 50, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		welcome.setBounds(110, 10, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning.setBounds(190, 80, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning2.setBounds(190, 110, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH) 
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nameTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		grpSzTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE TEXT IS WRITTEN
		monthCB.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		dayCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		yearCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE ITEM IS SELECTED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(info2);		// ADDS INFO2 LABEL TO CONTAINER
		container.add(welcome);		// ADDS WELCOME LABEL TO CONTAINER
		container.add(warning);		// ADDS WARNING LABEL TO CONTAINER
		container.add(warning2);	// ADDS WARNING LABEL TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/******************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON AND TEXT FIELD */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 		  */
	/* 				   EVENT FOR BUTTON AND TEXT FIELD	  */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String str;			// ERROR CHECKING ARRAYLIST
		int id;				// REUSUABLE STRING FOR ID
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		/************************************/
		/* ASSIGNS BUTTON PRESSED TO ACTION */
		/************************************/
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if (action.equals("Quit"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		actionPerformedName(event);		// CALL TO ACTION PERFORMED FOR NAME
		actionPerformedGrpSize(event);	// CALL TO ACTION PERFORMED FOR GROUP SIZE
		actionPerformedDate(event);		// CALL TO ACTION PERFORMED FOR DATE
		customer.setID();				// CALL TO SET GROUP ID
		
		/**********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/**********************************************************/
		if (action.equals("Enter"))
		{	
			/*******************************************************/
			/* ELSE STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*******************************************************/
			if((nameTF.getText() == "") || (grpSzTF.getText() == "") 
				|| (monthCB.getSelectedItem() == "") || (dayCB.getSelectedItem() == "") 
				|| (yearCB.getSelectedItem() == ""))
			{
				errorMessage(error8);	// CALL TO ERROR MESSAGE
			}
				
			/*****************************************************/
			/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*****************************************************/
			else if ((nameTF.getText() != "") && (grpSzTF.getText() != "") 
					&& (monthCB.getSelectedItem() != null) && (dayCB.getSelectedItem() != null) 
					&& (yearCB.getSelectedItem() != null))
			{
				frame.dispose();		// GETS RID OF THE OLD FRAME
				custList.add(customer);	// ADDS CUSTOMER TO ARRAYLIST
				str = printArray(custList);
				System.out.println(str);
				new Menu_GUI(); 		// INSTANTIATES A NEW FRAME
			}
		}
	}
	
	private void actionPerformedDate(ActionEvent event)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS JCOMBO BOXES FOR MONTH, DAY, */ 
	/* 				  AND YEAR AND NEEDS A DATE 			   */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR    */
	/* 				   TEXT FIELD FOR GROUP SIZE			   */
	/***********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object month;		// REUSUABLE OBJECT INPUT
		Object day;			// REUSUABLE OBJECT INPUT
		Object year;		// REUSUABLE OBJECT INPUT
		String date;		// REUSUABLE STRING INPUT
				
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* INPUTS MONTH, DAY, AND YEAR */
			/*******************************/
			month = monthCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM MONTH DROP-DOWN LIST	
			day = dayCB.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DAY DROP-DOWN LIST		
			year = yearCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM YEAR DROP-DOWN LIST	
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			if((month.equals("2")) && (day.equals("29")) && (year.equals("2021")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2022")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2023")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2025")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2026")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2027")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2029")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2030")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2031")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2033")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2034")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2035")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2037")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2038")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2039")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2041")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2042")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2043")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2045")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2046")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2047")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2049")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("30")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("31")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("4")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("6")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("9")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("11")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			date = "" + month + "/" + day + "/" + year;
		}
		while((month.equals("2")) && (day.equals("29")) && (year.equals("2021")) || 
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2022")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2023")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2025")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2026")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2027")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2029")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2030")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2031")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2033")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2034")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2035")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2037")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2038")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2039")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2041")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2042")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2043")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2045")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2046")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2047")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2049")) ||
			  (month.equals("2")) && (day.equals("30")) || 
			  (month.equals("2")) && (day.equals("31")) ||
			  (month.equals("4")) && (day.equals("31")) || 
			  (month.equals("6")) && (day.equals("31")) ||
			  (month.equals("9")) && (day.equals("31")) || 
			  (month.equals("11")) && (day.equals("31")));
		
		customer.setDate(date);		// CALL TO SET DATE
	}
	
	private void actionPerformedGrpSize(ActionEvent event)
	/**********************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR GROUP SIZE */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR   */
	/* 				   TEXT FIELD FOR GROUP SIZE			  */
	/**********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String grp;			// REUSUABLE STRING INPUT
		int grpSz;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			grp = grpSzTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(grp);		// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((grpSz <= 0) ||(grpSz > 400))
			{
				grpSzTF.setText("");			// CLEARS THE TEXT FIELD 
				errorMessage(error3);			// CALL TO ERROR MESSAGE
			}
		}
		while((grpSz <= 0) || (grpSz > 400));
		
		customer.setSize(grpSz);		// CALL TO SET SIZE
	}
	
	private void actionPerformedName(ActionEvent event)
	/*****************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR NAME  */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT  */
	/* 				   FOR TEXT FIELD FOR NAME			 */
	/*****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			name = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if (name.length() > 10)
			{
				nameTF.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while(name.length() > 10);
		
		customer.setName(name);				// CALL TO SET NAME
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this? Once you do this" + "\n" + 
				"you cannot undo this action.",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;		// RETURNS NUM
	}
	
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static String printArray(ArrayList<Customer> custList)
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = "";			// INITIALIZES THE STRING
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			str+= "" + custList.get(i).toString() + "\n";// CREATES A STRING 
														 // REPRESENTATION OF ARRAYLIST
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURN STR
	}
}
