/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 2, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;					// IMPORTS AWT
import java.awt.event.*;			// IMPORTS EVENTS
import javax.swing.*;				// IMPORTS SWING
import java.text.DecimalFormat;		// IMPORTS DECIMAL FORMAT

public class BusGUI extends JFrame
{	
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input your Group Name: ";
	final static String message2 = "Input the group ID number(three digit number between 100 - 999): ";
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1= "Input Name";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error2 = "ERROR!!! Number must be between 100 and 999";
	final static String error3 = "ERROR!!!Number must be greater than 0!!!";
	
	public BusGUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		JFrame frame =  new JFrame();					// INSTANTIATES A BLANK JFRAME 
		JButton nameB = new JButton("Name");			// CREATES A BUTTON FOR NAME
		JButton dateB = new JButton("Date");			// CREATES A BUTTON FOR DATE
		JButton grpIDB = new JButton("Group ID");		// CREATES A BUTTON FOR GROUP ID
		JButton grpSzB = new JButton("Group Size");		// CREATES A BUTTON FOR GROUP SIZE
		DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
		Customer customer = new Customer();				// INSTANTIATES CUSTOMER
				
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();				// SIZE OF THE FRAME
		frame.setVisible(true);		// ALLOWS THE JFRAME TO BE VISIBLE
		frame.setSize(200, 200);	// SETS SIZE OF THE JFRAME
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	// ALLOWS THE JFRAME TO BE CLOSED
		
		/***************************/
		/* SETS BOUNDS FOR BUTTONS */
		/***************************/
		nameB.setBounds(50, 50, 100, 50);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateB.setBounds(160, 50, 100, 50);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpIDB.setBounds(50, 120, 100, 50);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzB.setBounds(160, 120, 100, 50);// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		nameB.addActionListener((ActionListener) this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		dateB.addActionListener((ActionListener) this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		grpIDB.addActionListener((ActionListener) this);// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		grpSzB.addActionListener((ActionListener)this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		frame.add(nameB);	// ADDS NAME BUTTON TO FRAME
		frame.add(dateB);	// ADDS DATE BUTTON TO FRAME
		frame.add(grpIDB);	// ADDS GROUP ID BUTTON TO FRAME
		frame.add(grpSzB);	// ADDS GROUP SIZE BUTTON TO FRAME
				
	}
	
	public void actionPerformed(ActionEvent event, JFrame frame)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		
		/************************************/
		/* ASSIGNS BUTTON PRESSED TO ACTION */
		/************************************/
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF NAME BUTTON WAS PRESSED */	
		/****************************************************/
		if (action.equals("Name"))
		{
			frame.setVisible(false);	// HIDES FRAME FROM USER
			name = inputString(message1, heading1);
			
			
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF DATE BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action.equals("Date"))
		{
			System.out.print("Successful date implementation");
		}
		
		/*************************************************************/
		/* ELSE IF STATEMENT TO CHECK IF GROUP ID BUTTON WAS PRESSED */	
		/*************************************************************/
		else if(action.equals("Group ID"))
		{
			System.out.print("Successful Group ID implementation");
		}
		
		/***************************************************************/
		/* ELSE IF STATEMENT TO CHECK IF GROUP SIZE BUTTON WAS PRESSED */	
		/***************************************************************/
		else if (action.equals("Group Size"))
		{
			System.out.print("Successful Group Size implementation");
		}
	}
	/******************************************************************************/
	/* 								FUNCTION SECTION 							  */
	/******************************************************************************/
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static int inputInt(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String inum;		// REUSABLE STRING INPUT
		int num;			// REUSABLE INT VALUE
		
		/********************* ********/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*****************************/
			/* MAKES INPUT DIALOG WINDOW */
			/*****************************/
			inum = JOptionPane.showInputDialog(
					null,
					str,
					hdstr,
					JOptionPane.QUESTION_MESSAGE);
			num = Integer.parseInt(inum);		// ASSIGNS THE STRING INUM 
												// TO THE INTEGER NUM
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(num < 0)
			{
				errorMessage(error3);		// CALL TO ERROR MESSAGE
			}
		}
		while(num < 0);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static int inputInt2(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String inum;		// REUSABLE STRING INPUT
		int num;			// REUSABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*****************************/
			/* MAKES INPUT DIALOG WINDOW */
			/*****************************/
			inum = JOptionPane.showInputDialog(
					null,
					str,
					hdstr,
					JOptionPane.QUESTION_MESSAGE);
			num = Integer.parseInt(inum);	// ASSIGNS THE STRING INUM 
											// TO THE INTEGER NUM
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if ((num < 100) || (num > 999))
			{
				errorMessage(error2);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 100) || (num > 999));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static String inputString(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR NAME	 */
	/* POSTCONDITION - GETS STRING VALUE FOR NAME	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String nm;		// INPUTS NUMBER AS A STRING
		
		/*****************************/
		/* MAKES INPUT DIALOG WINDOW */
		/*****************************/
		nm = JOptionPane.showInputDialog(
				null,
				str,
				hdstr,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return nm;		// RETURNS NM
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this? Once you do this" + "\n" + 
				"you cannot undo this action.",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;		// RETURNS NUM
	}
	
}
	
