/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 2, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import javax.swing.*;					// IMPORTS SWING
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT

public class BusGUI implements ActionListener 
{	
	private static final long serialVersionUID = 1L;	// SERIALIZES CLASS
	
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input your Group Name: ";
	final static String message2 = "Input the group ID number(three digit number between 100 - 999): ";
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1= "Input Name";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error2 = "ERROR!!! Number must be between 100 and 999";
	final static String error3 = "ERROR!!!Number must be greater than 0!!!";
	final static String error4 = "ERROR!!! You need to finish filling out information!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;			// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JTextField nameTF;		// CREATES A TEXT FIELD FOR NAME 
	private JTextField grpIDTF;		// CREATES A TEXT FIELD FOR GROUP ID
	private JTextField grpSzTF;		// CREATES A TEXT FIELD FOR GROUP SIZE
	private JTextField dateTF;		// CREATES A TEXT FIELD FOR DATE
	private Label nameL;			// CREATES A LABEL FOR NAME
	private Label grpIDL;			// CREATES A LABEL FOR GROUP ID
	private Label grpSzL;			// CREATES A LABEL FOR GROUP SIZE
	private Label dateL;			// CREATES A LABEL FOR DATE
	private JFrame frame;			// CREATES A JFRAME 
	private Customer customer;		// CREATES AN INSTANCE OF THE CUSTOMER CLASS
	
	public BusGUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame =  new JFrame("Ski Trip");		// INSTANTIATES A BLANK JFRAME
		enterB = new JButton("Enter");			// INSTANTIATES A JBUTTON 
		nameTF = new JTextField();				// INSTANTIATES A JTEXTFIELD
		grpIDTF = new JTextField();				// INSTANTIATES A JTEXTFIELD 
		grpSzTF = new JTextField();				// INSTANTIATES A JTEXTFIELD 
		dateTF = new JTextField();				// INSTANTIATES A JTEXTFIELD
		nameL = new Label("Name");				// INSTANTIATES A LABEL
		grpIDL = new Label("Group ID");			// INSTANTIATES A LABEL
		grpSzL = new Label("Group Size");		// INSTANTIATES A LABEL
		dateL = new Label("Date");				// INSTANTIATES A LABEL
		customer = new Customer();				// INSTANTIATES CUSTOMER
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(150, 200, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(130, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpIDTF.setBounds(130, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(130, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateTF.setBounds(130, 170, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(50, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpIDL.setBounds(50, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(50, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(100, 170, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)

		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		nameTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		grpIDTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		grpSzTF.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		dateTF.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED

		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		frame.add(enterB);		// ADDS ENTER BUTTON TO FRAME
		frame.add(quitB);		// ADDS QUIT BUTTON TO FRAME
		frame.add(nameTF);		// ADDS NAME TEXT FIELD TO FRAME
		frame.add(grpIDTF);		// ADDS GROUP ID TEXT FIELD TO FRAME
		frame.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO FRAME
		frame.add(dateTF);		// ADDS DATE TEXT FIELD TO FRAME
		frame.add(nameL);		// ADDS NAME LABEL TO FRAME
		frame.add(grpIDL);		// ADDS GROUP ID LABEL TO FRAME
		frame.add(grpSzL);		// ADDS GROUP SIZE LABEL TO FRAME
		frame.add(dateL);		// ADDS DATE LABEL TO FRAME
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();				// SIZE OF THE FRAME
		frame.setSize(400, 400);	// SETS SIZE OF THE JFRAME
		frame.setVisible(true);		// ALLOWS THE JFRAME TO BE VISIBLE
		frame.setLayout(null);		// SETS THE LAYOUT FOR THE JFRAME
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	}
	/******************************************************************************/
	/* 								FUNCTION SECTION 							  */
	/******************************************************************************/
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String name;		// REUSUABLE STRING INPUT FOR NAME 
		String num;			// REUSUABLE STRING INPUT
		String date;		// REUSUABLE STRING INPUT FOR DATE
		String groupID;		// REUSUABLE STRING INPUT FOR GROUP ID
		String groupSz;		// REUSUABLE STRING INPUT FOR GROUP SIZE
		int grpID;			// REUSUABLE INT INPUT FOR GROUP ID
		int grpSz;			// REUSUABLE INT INPUT FOR GROUP SIZE
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		/***********************************************/
		/* LOOP TO CHECK WHICH EVENT HAPPENS ON JFRAME */
		/***********************************************/
		do
		{	
			/************************************/
			/* ASSIGNS BUTTON PRESSED TO ACTION */
			/************************************/
			action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
			
			/****************************************************/
			/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
			/****************************************************/
			if (action.equals("Quit"))
			{
				confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
				/******************************************************/
				/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
				/******************************************************/
				if(confirm == 0)
				{
					System.exit(0);		// TERMINATES THE PROGRAM
				}
			}
			
			/*********************************************************/
			/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*********************************************************/
			else if (action.equals("Enter"))
			{
				/*****************************************************/
				/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
				/*****************************************************/
				if((nameTF.getText() != null) && (grpIDTF.getText() != null) 
					&& (grpSzTF.getText() != null) && (dateTF.getText() != null))
				{
							confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
					
					/****************************************************************************/
					/* IF STATEMENT TO CONFIRM ACTION OF CONTINUING THROUGH INFORMATION PROGRAM */	
					/****************************************************************************/
					if(confirm == 0)
					{	
						frame.dispose();		// GETS RID OF THE OLD FRAME
						new Menu_GUI(); 		// INSTANTIATES A NEW FRAME
					}
				}
					
				/*******************************************************/
				/* ELSE STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
				/*******************************************************/
				else
				{
					frame.setVisible(false);	// SETS VISIBILTY OF FRAME TO FALSE
					errorMessage(error4);		// CALL TO ERROR MESSAGE
				}
			}
			
			frame.setVisible(true);				// SETS VISIBILTY OF FRAME TO TRUE
		
			/***************/
			/* INPUTS NAME */
			/***************/
			name = nameTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			customer.setName(name);				// CALL TO SET NAME
			
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			groupID = grpIDTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			grpID = Integer.parseInt(groupID);	// PARSES STRING TO AN INTEGER
			customer.setID(grpID);				// CALL TO SET ID
		
			/*********************/
			/* INPUTS GROUP SIZE */
			/*********************/
			groupSz = grpSzTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(groupSz);	// PARSES STRING TO AN INTEGER
			customer.setGroup(grpSz);			// CALL TO SET SIZE
		
			/***************/
			/* INPUTS DATE */
			/***************/
			date = dateTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			customer.setDate(date);				// CALL TO SET DATE
		}
		while((action != "Quit") || (action != "Enter"));
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this? Once you do this" + "\n" + 
				"you cannot undo this action.",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;		// RETURNS NUM
	}
	
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
}


	
