/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* APRIL 6, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;						// IMPORTS SWING
import java.awt.*;							// IMPORTS AWT
import java.awt.event.ActionEvent;			// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;		// IMPORTS ACTION LISTENER
import java.awt.event.AdjustmentEvent;		// IMPORTS ADJUSTMENT EVENT
import java.awt.event.AdjustmentListener;	// IMPORTS ADJUSTMENT LISTENER
import java.text.DecimalFormat;				// IMPORTS DECIMAL FORMAT
import java.util.ArrayList;					// IMPORTS ARRAYLIST

public class Remove_Menu extends BusGUI implements AdjustmentListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private String arrayStr;		// CREATES A STRING REPRESENTATION OF ARRAY LIST
	private JButton enterB;			// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton returnB;		// CREATES A BUTTON FOR REUTNRING TO HOME MENU
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private Label info;				// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private Label customerInfo;		// CREATES A LABEL OF ALL CUSTOMERS
	private JFrame frame;			// CREATES A JFRAME 
	private Container container;	// CREATES A CONTAINER
	private Font font;				// CREATES A FONT
	//private Checkbox checkbox;	// CREATES A CHECKBOX
	private JScrollBar scrollBar;	// CREATES A JSCROLL BAR
	DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
	private JPanel panel;			// CREATES A LABEL FOR PANEL
	private ActionListener actionListener;
	 
	public Remove_Menu()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		arrayStr = printArray();	// CALL TO PRINT ARRAY
		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");		// INSTANTIATES JBUTTON
		returnB = new JButton("Return");	// INSTANTIATES JBUTTON
		quitB = new JButton("Quit");		// INSTANTIATES JBUTTON
		info = new Label("Select one of "+
						 "the customers "+
						 "to remove.");		// INSTANTIATES LABEL
		customerInfo = new Label(arrayStr);	// INSTANTIATES LABEL
		frame = new JFrame("Remove Menu");	// INSTANTIATES JFRAME
		container = frame.getContentPane();	// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 12);		// INSTANTIATES FONT 
		scrollBar = new JScrollBar();		// INSTANTIATES A JSCROLL BAR
		panel = new JPanel();				// INSTANTIATES A LABEL
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 100, 550, 550);	// SETS X POSITION, Y POSITION, LENGTH, 
		panel.setBounds(450, 50, 450, 50);		// SETS X POSITION, Y POSITION, LENGTH, WIDTH FOR PANEL
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.BLUE);	// SETS THE BACKGROUND COLOR
		panel.setBackground(Color.BLACK);		// SETS BACKGROUND COLOR OF PANEL
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);				// SETS FONT OF INFO LABEL
		customerInfo.setFont(font);		// SETS FONT OF CUSTOMER INFO LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF INFO LABEL
		customerInfo.setForeground(Color.BLACK);// SETS FOREGROUND COLOR OF CUSTOMER INFO LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(400, 400, 75, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(320, 400, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(480, 400, 75, 25);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(50, 30, 500, 30);			// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		customerInfo.setBounds(70, 60, 450, 300);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		scrollBar.setBounds(549, 1, 10, 490);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);			// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);			// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		scrollBar.addAdjustmentListener(this);	// ADDS ADJUSTMENTLISTENER TO MAKE THE SCROLLBAR MOVE 
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);			// ADDS ENTER BUTTON TO CONTAINER
		container.add(returnB);			// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);			// ADDS QUIT BUTTON TO CONTAINER
		container.add(info);			// ADDS INFO LABEL TO CONTAINER
		container.add(customerInfo);	// ADDS CUSTOMER INFO LABEL TO CONTAINER
		container.add(scrollBar);		// ADDS SCROLL BAR TO CONTAINER
		container.add(panel);			// ADDS PANEL TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action == "Quit")
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);		// TERMINATES THE PROGRAM
			}
		}
		
		/**********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/**********************************************************/
		else if(action == "Enter")
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/*************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF CONFIRMING ENTERED INFO */	
			/*************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action == "Return")
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
	}
	
	public void adjustmentValueChanged(AdjustmentEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A SCROLL BAR		*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR SCROLL BAR			*/
	/************************************************/
	{
		
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int confirm;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		confirm = JOptionPane.showConfirmDialog(
				null, 
				"Are you sure you want to do this action?",
				"Confirmation Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return confirm;		// RETURNS CONFIRM
	}
	
	public static String printArray()
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = "";			// INITIALIZES STR
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < BusGUI.custList.size(); i++)
		{
			str += "" + BusGUI.custList.get(i).toString() + "\n";// CREATES A STRING 
			 													 // REPRESENTATION OF ARRAYLIST
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURNS STR
	}
}
