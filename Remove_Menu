/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* APRIL 6, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;						// IMPORTS SWING
import java.awt.*;							// IMPORTS AWT
import java.awt.event.ActionEvent;			// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;		// IMPORTS ACTION LISTENER
import java.awt.event.AdjustmentEvent;		// IMPORTS ADJUSTMENT EVENT
import java.awt.event.AdjustmentListener;	// IMPORTS ADJUSTMENT LISTENER
import java.text.DecimalFormat;				// IMPORTS DECIMAL FORMAT
import java.util.ArrayList;					// IMPORTS ARRAYLIST

public class Remove_Menu extends BusGUI implements ActionListener
{
	final static String error1 = "ERROR!!! Customer number is not on the list!!!";
	final static String error2 = "ERROR!!! Finish filling in the information!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;			// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton returnB;		// CREATES A BUTTON FOR REUTNRING TO HOME MENU
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton view;			// CREATES A BUTTON FOR VIEWING LIST OF CUSTOMERS
	private JTextField remove;		// CREATES A TEXT FIELD FOR REMOVING CUSTOMERS
	private JLabel info;			// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private JFrame frame;			// CREATES A JFRAME 
	private Container container;	// CREATES A CONTAINER
	private Font font;				// CREATES A FONT
	 
	public Remove_Menu()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");		// INSTANTIATES JBUTTON
		returnB = new JButton("Return");	// INSTANTIATES JBUTTON
		quitB = new JButton("Quit");		// INSTANTIATES JBUTTON
		view = new JButton("Customer List");// INSTANTIATES JBUTTON
		remove = new JTextField("");		// INSTANTIATES JTEXTFIELD
		info = new JLabel("Enter the customer "+
						 "number that you want "+
						 "to remove.");		// INSTANTIATES JLABEL
		frame = new JFrame("Remove Menu");	// INSTANTIATES JFRAME
		container = frame.getContentPane();	// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 12);		// INSTANTIATES FONT 
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 100, 350, 350);	// SETS X POSITION, Y POSITION, LENGTH, 
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.BLUE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);				// SETS FONT OF INFO LABEL
		view.setFont(font);				// SETS FONT OF VIEW BUTTON 
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF INFO LABEL
		view.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF VIEW BUTTON
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(300, 300, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(220, 300, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(380, 300, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(100, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		view.setBounds(50, 300, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		remove.setBounds(70, 150, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		view.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		remove.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);			// ADDS ENTER BUTTON TO CONTAINER
		container.add(returnB);			// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);			// ADDS QUIT BUTTON TO CONTAINER
		container.add(view);			// ADDS VIEW BUTTON TO CONTAINER
		container.add(info);			// ADDS INFO LABEL TO CONTAINER
		container.add(remove);			// ADDS REMOVE TEXT FIELD TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action == "Quit")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action == "Return")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF VIEW BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action == "Customer List")
		{
			frame.dispose();			// DISPOSES THE REMOVE MENU WINDOW
			updateMenu();				// CALL TO UPDATE MENU
			new Remove_Menu();			// RECREATES THE REMOVE MENU WINDOW
		}
		
		actionPerformedRm(event);		// CALL TO ACTION PERFORMED FOR REMOVE
		
		/**********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/**********************************************************/
		if(action == "Enter")
		{
			/*****************************************************/
			/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/*****************************************************/
			if(remove.getText() == "")
			{
				errorMessage(error2);	// CALL TO ERROR MESSAGE
			}
			
			/**********************************************************/
			/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
			/**********************************************************/
			else if(remove.getText() != "")
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
	}
	
	public void actionPerformedRm(ActionEvent e)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS JCOMBO BOXES FOR MONTH, DAY, */ 
	/* 				  AND YEAR AND NEEDS A DATE 			   */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR    */
	/* 				   TEXT FIELD FOR GROUP SIZE			   */
	/***********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;		// REUSUABLE STRING INPUT
		int num;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			numi = remove.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(num > BusGUI.custList.size())
			{
				remove.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while(num > BusGUI.custList.size());
		
		BusGUI.custList.remove(num-1);		// CALL TO REMOVE CUSTOMER FROM ARRAY LIST
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int confirm;		// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		confirm = JOptionPane.showConfirmDialog(
				null, 
				"Are you sure you want to do this action?",
				"Confirmation Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return confirm;		// RETURNS CONFIRM
	}
	
	public static String printArray()
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = "";			// INITIALIZES STR
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < BusGUI.custList.size(); i++)
		{
			str += "" + BusGUI.custList.get(i).toString() + "\n";// CREATES A STRING 
			 													 // REPRESENTATION OF ARRAYLIST
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURNS STR
	}
	
	public static void updateMenu()
	/*****************************************************************/
	/* PRECONDITION - NEEDS AN UPDATE WINDOW OF ALL CUSTOMERS 		 */
	/* POSTCONDITION - CREATES WINDOW TO TELL USER ALL THE CUSTOMERS */
	/*****************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = "";			// INITIALIZES THE STRING
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			str+= "Customer number: " + i + 1 + " " +
				  custList.get(i).toString() + "\n";	// CREATES A STRING 
														// REPRESENTATION OF ARRAYLIST
		}
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"Make sure to remember the number of the customer you wish to remove. \n"+
				str,
				"Customer List",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
