/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* LIVY456				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MAY 11, 2020		   			  	 	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT

public class Modify extends Modify_Menu implements ActionListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JLabel warning;						// CREATES A JLABEL FOR INPUT CONSTRAINTS
	private JLabel warning2;					// CREATES A JLABEL FOR INPUT CONSTRAINTS
	private static DecimalFormat df = new DecimalFormat("0.00");	// FORMATS TO TWO DECIMAL PLACES
	private static int custNum;					// INTEGER FOR CUSTOMER NUMBER
	
	public Modify(int cstNm)
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{	
		custNum = cstNm;	// INITIALIZES CUSTOMER NUMBER
		
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		returnB = new JButton("Return to Modify Menu");	// INSTANTIATES JBUTTON
		info = new JLabel("Modify the Customer");		// INSTANTIATES JLABEL
		frame = new JFrame("Modify Customer");			// INSTANTIATES JFRAME
		nameTF = new JTextField("" + custList.get(custNum-1).getName());	// INSTANTIATES JTEXTFIELD
		grpSzTF = new JTextField("" + custList.get(custNum-1).getSize());	// INSTANTIATES JTEXTFIELD
		warning = new JLabel("Name has to be < "+
				"31 characters.");					// INSTANTIATES A LABEL	
		warning2 = new JLabel("Group size has to " +
				 "be between 1 - 400.");			// INSTANTIATES A LABEL
		confirm = new JButton("Confirm");			// INSTANTIATES JBUTTON
		container = frame.getContentPane();			// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 15);				// INSTANTIATES FONT 
		dayCB.setSelectedItem(custList.get(custNum-1).getDay());		// SETS SELECTED ITEM TO PREVIOUS CUSTOMER DAY VALUE

		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 550, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH 
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.WHITE);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);			// SETS FONT OF INFO LABEL
		warning.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		warning2.setFont(font);		// SETS THE FONT OF THE WARNING LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF INFO LABEL 
		warning.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF WARNING LABEL
		warning2.setForeground(Color.BLACK);	// SETS FOREGROUND COLOR OF WARNING2 LABEL
		nameL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF NAME LABEL
		grpSzL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF GROUP SIZE LABEL
		dateL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DATE LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(190, 320, 170, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		confirm.setBounds(365, 280, 110, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(365, 320, 110, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(20, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning.setBounds(210, 80, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		warning2.setBounds(210, 110, 500, 30);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH) 
		nameL.setBounds(20, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(20, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(20, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(100, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(100, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(100, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(210, 140, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(320, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
	
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		confirm.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED 
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		monthCB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		dayCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		yearCB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(confirm);		// ADDS CONFRIM BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(warning);		// ADDS WARNING LABEL TO CONTAINER
		container.add(warning2);	// ADDS WARNING 2 LABEL TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{		
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String costdf;		// STRING REPRESENTATION OF COST
		String error10;		// ERROR MESSAGE WHEN MINIMUM NUMBER OF CUSTOMER HAS NOT BEEN MET
		String message4;	// EXCESS MESSAGE
		String message5;	// REFUND MESSAGE
		String message6;	// CONFIRM MESSAGE TO CHANGE GROUP SIZE OR SKI TRIP DATE 
		String message7;	// REFUND MESSAGE WHEN MIN NUMBER OF CUSTOMERS HAS NOT BEEN MET
		String mth;			// STRING VALUE FOR TRIP MONTH
		String dy;			// STRING VALUE FOR TRIP DAY
		String yr;			// STRING VALUE FOR TRIP YEAR
		String sz;			// STRING VALUE FOR TRIP GROUP SIZE
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		int excess;			// REUSUABLE INT FOR SKI TRIP MEMBERS THAT ARE ABLE TO GO ON TRIP 
		int refund;			// REUSUABLE INT FOR CUSTOMER REFUNDS 
		int sum;			// REUSUABLE INT FOR TOTAL SIZE OF GROUP FOR SPECIFIC DATE 
		double cost;		// REUSUABLE DOUBLE FOR COST OF REFUNDS
		
		costdf = "";	// INITIALIZES COSTDF
		error10 = "";	// INITIALIZES ERROR10 VALUE
		message4 = "Do you want to pick another " +
					"date or another group size? \n" +
					"If you keep this date or " +
					"group size, then only ";	// CREATES A CONFIRM MESSAGE
		message5 = "";	// INITIALIZES REFUND MESSAGE
		message6 = "";	// INITIALIZES MESSAGE6 VALUE
		message7 = "";	// INITIALIZES MESSAGE7 VALUE
		mth = custList.get(custNum-1).getMonth();	// GETS MONTH
		dy = custList.get(custNum-1).getDay();		// GETS DAY
		yr = custList.get(custNum-1).getYear();		// GETS YEAR
		sz = "" + custList.get(custNum-1).getSize();// GETS SIZE
		confirm = 1;						// INITIALIZES CONFIRM
		cost = 0.0;							// INITIALIZES COST	
		excess = 0;							// INITIIALIZES EXCESS
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		sum = 0;							// INITIALIZES SUM
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Quit Program"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action.equals("Return to Modify Menu"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Modify_Menu();		// CREATES A NEW MENU WINDOW
			}
		}
		
		actionPerformedName(event);		// CALL TO ACTION PERFORMED NAME FOR MODIFY
		actionPerformedSize(event);		// CALL TO ACTION PERFORMED SIZE FOR MODIFY
		actionPerformedDate(event);		// CALL TO ACTION PERFORMED DATE FOR MODIFY
		
		/************************************************************/
		/* ELSE IF STATEMENT TO CHECK IF CONFIRM BUTTON WAS PRESSED */	
		/************************************************************/
		if(action.equals("Confirm"))
		{
			sum = maxSize();			// CALL TO MAX SIZE
		
			/*********************************************************************/
			/* IF STATEMENT TO CHECK IF NOTHING WAS CHANGED IN OTHER TEXT FIELDS */	
			/*********************************************************************/
			if((nameTF.getText().equals("")) || (grpSzTF.getText().equals("")) || 
			   (monthCB.getSelectedItem() == null)  || (dayCB.getSelectedItem() == null)
			   || (yearCB.getSelectedItem() == null))
			{
				errorMessage(error2);
			}
			
			/*********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MIN LIMIT OF CUSTOMERS HAS BEEN MET */	
			/*********************************************************************/
			else if (customer.getSize() < 10)
			{
				/***********************************************************************/
				/* IF STATEMENT TO CHECK IF THERE ARE OTHER CUSTOMERS ON SPECIFIC DATE */	
				/***********************************************************************/
				if(sum < 10)
				{
					error10 = "You do not have enough customers on your ski trip";
					message6 = "If you keep this date or group size all your " + 
							   " group members will receive a refund." + "\n" + 
							   "Do you want to select a new date or new group size?";
					errorMessage(error10);				// CALL TO ERROR MESSAGE
					confirm = confirmWindow(message6);	// CALL TO CONFIRM WINDOW
					
					/****************************************************************/
					/* IF STATEMENT TO CONFIRM ACTION OF REDOING CUSTOMER DATE/SIZE */	
					/****************************************************************/
					if (confirm == 0)
					{
						monthCB.setSelectedItem("");	// CALL TO GET SELECTED ITEM
						dayCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
						yearCB.setSelectedItem("");		// CALL TO GET SELECTED ITEM
						grpSzTF.setText("");			// CALL TO SET TEXT
					}
					
					/*****************************************************************/
					/* ELSE IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
					/*****************************************************************/
					else if (confirm == 1)
					{
						/***********************************************************************/
						/* IF STATEMENT TO CHECK IF MESSAGE SHOULD REFER TO MULTIPLE CUSTOMERS */
						/***********************************************************************/
						if(customer.getSize() > 1)
						{
							message7 = "Your " + customer.getSize() + " group members will receive a " + 
									   " $" + customer.getCost() + " refund.";
						}
						
						/***************************************************************************/
						/* ELSE IF STATEMENT TO CHECK IF MESSAGE SHOULD REFER TO SINGULAR CUSTOMER */
						/***************************************************************************/
						else if (customer.getSize() == 1)
						{
							message7 = "Your " + customer.getSize() + " group member will receive a " + 
									   " $" + customer.getCost() + " refund.";
						}
						
						refundWindow(message7);		// CALL TO REFUND MESSAGE
						new Menu_GUI();		// INSTANTIATES MENU GUI WINDOW
						frame.dispose();	// CALL TO DISPOSE
					}
				}
				
				/****************************************************************************/
				/* ELSE IF STATEMENT TO CHECK IF THERE ARE OTHER CUSTOMERS ON SPECIFIC DATE */	
				/****************************************************************************/
				else if (sum > 10)
				{
					message6 = "Are you sure want to do this?";
					confirm = confirmWindow(message6);	// CALL TO CONFIRM WINDOW
					
					/************************************************************/
					/* IF STATEMENT TO CONFIRM ACTION OF ENTERING CUSTOMER INFO */	
					/************************************************************/
					if(confirm == 0)
					{
						custList.add(customer);	// ADDS CUSTOMER TO CUSTOMER LIST
						new Menu_GUI();			// INSTANTIATES MENU GUI WINDOW
						frame.dispose();		// CALL TO DISPOSE
					}
				}
			}
			
			/*********************************************************/
			/* ELSE IF STATEMENT TO CHECK IF CUSTOMER MAX IS REACHED */	
			/*********************************************************/
			else if(sum > 400)
			{
				excess = custList.get(custNum-1).getSize() - (sum-400);	// NUMBER OF AVAILABLE SPOTS LEFT
				errorMessage(error8);					// CALL TO ERROR MESSAGE
				
				/********************************************************/
				/* IF STATEMENT TO CHECK IF EXCESS IS GREATER THAN ZERO */
				/********************************************************/
				if(excess > 0)
				{
					message4 += "" + excess + " group members can go on the Ski Trip.";
				}
				
				/**********************************************************/
				/* ELSE IF STATEMENT TO CHECK IF EXCESS IS LESS THAN ZERO */
				/**********************************************************/
				else if(excess <= 0)
				{
					message4 += "none of your group members can go on the Ski Trip.";
				}
				
				confirm = confirmWindow(message4 );		// CALL TO CONFIRM WINDOW
				
				/********************************************************************/
				/* IF STATEMENT TO CONFIRM ACTION OF CHANGING DATE TO AVOID REFUNDS */	
				/********************************************************************/
				if(confirm == 0)
				{
					monthCB.setSelectedItem(mth);	// CALL TO SET SELECTED ITEM
					dayCB.setSelectedItem(dy);		// CALL TO SET SELECTED ITEM
					yearCB.setSelectedItem(yr);		// CALL TO SET SELECTED ITEM
					grpSzTF.setText(sz);			// CALL TO SET SELECTED ITEM
				}
				
				/***************************************************************************/
				/* ELSE IF STATEMENT TO CONFIRM ACTION OF KEEPING DATE AND GETTING REFUNDS */	
				/***************************************************************************/
				else if(confirm == 1)
				{
					refund = sum - 400;		// CALCULATES NUMBER OF PEOPLE REFUNDED
					cost = refund * 49.99;	// CALCULATES AMOUNT OF MONEY FOR REFUNDS
					costdf = df.format(cost);	// CALL TO FORMAT
					message5+= "" + refund + " ski trip members will receive a refund. \n$" + 
							   costdf + " will be returned.";
					refundWindow(message5);		// CALL TO REFUND WINDOW
					custList.get(custNum-1).setSize(excess);	// CALL TO GET CUSTOMER AND SET SIZE
					frame.dispose();			// CALL TO DISPOSE WINDOW
					new Menu_GUI();				// INSTANTIATES MENU GUI CLASS
				}
			}
			
			/****************************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF SOMETHING WAS CHANGED IN OTHER TEXT FIELDS */	
			/****************************************************************************/
			else if ((nameTF.getText() != "") && (grpSzTF.getText() != "") &&
					 (monthCB.getSelectedItem() != null) && (dayCB.getSelectedItem() != null)
					 && (yearCB.getSelectedItem() != null))
			{
				
				confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
				
				/*******************************************************************/
				/* IF STATEMENT TO CONFIRM ACTION OF MODIFIED CUSTOMER INFORMATION */	
				/*******************************************************************/
				if(confirm == 0)
				{
					frame.dispose();		// GETS RID OF FRAME
					new Menu_GUI();			// NEW MENU FRAME IS INSTANTIATED
				}
			}
		}
	}
	
	public void actionPerformedDate(ActionEvent event)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS JCOMBO BOXES FOR MONTH, DAY, */ 
	/* 				  AND YEAR AND NEEDS A DATE 			   */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR    */
	/* 				   TEXT FIELD FOR GROUP SIZE			   */
	/***********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object month;		// REUSUABLE OBJECT INPUT
		Object day;			// REUSUABLE OBJECT INPUT
		Object year;		// REUSUABLE OBJECT INPUT
		String date;		// REUSUABLE STRING INPUT
		String mth;			// PREVIOUS MONTH VALUE OF CUSTOMER BEING MODIFIED
		String dy;			// PREVIOUS DAY VALUE OF CUSTOMER BEING MODIFIED
		String yr;			// PREVIOUS YEAR VALUE OF CUSTOMER BEING MODIFIED
				
		mth = custList.get(custNum-1).getMonth();	// GETS MONTH
		dy = custList.get(custNum-1).getDay();		// GETS DAY
		yr = custList.get(custNum-1).getYear();		// GETS YEAR		
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* INPUTS MONTH, DAY, AND YEAR */
			/*******************************/
			month = monthCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM MONTH DROP-DOWN LIST	
			day = dayCB.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DAY DROP-DOWN LIST		
			year = yearCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM YEAR DROP-DOWN LIST	
			
			/**********************************************/
			/* IF STATEMENT TO MAKE SURE DAY IS NOT BLANK */
			/**********************************************/
			if(month.equals(""))
			{
				monthCB.setSelectedItem(mth);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/***********************************************/
			/* IF STATEMENT TO MAKE SURE YEAR IS NOT BLANK */
			/***********************************************/
			if(year.equals(""))
			{
				yearCB.setSelectedItem(yr);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			if((month.equals("2")) && (day.equals("29")) && (year.equals("2021")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2022")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2023")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2025")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2026")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2027")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2029")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2030")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2031")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2033")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2034")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2035")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2037")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2038")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2039")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2041")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2042")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2043")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2045")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2046")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2047")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("2")) && (day.equals("29")) && (year.equals("2049")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("30")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (day.equals("31")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("4")) && (day.equals("31")))
			{
				errorMessage(error4);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("6")) && (day.equals("31")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("9")) && (day.equals("31")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("11")) && (day.equals("31")))
			{
				errorMessage(error6);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("1")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("2")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("3")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("4")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("5")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("6")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("7")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("8")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("9")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("10")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("11")) && (year.equals("2020")))
			{
				errorMessage(error7);			// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem(mth);	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem(dy);		// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(yr); 	// RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			date = "" + month + "/" + day + "/" + year;
		}
		while((month.equals("2")) && (day.equals("29")) && (year.equals("2021")) || 
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2022")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2023")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2025")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2026")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2027")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2029")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2030")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2031")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2033")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2034")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2035")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2037")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2038")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2039")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2041")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2042")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2043")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2045")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2046")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2047")) ||
			  (month.equals("2")) && (day.equals("29")) && (year.equals("2049")) ||
			  (month.equals("2")) && (day.equals("30")) || 
			  (month.equals("2")) && (day.equals("31")) ||
			  (month.equals("4")) && (day.equals("31")) || 
			  (month.equals("6")) && (day.equals("31")) ||
			  (month.equals("9")) && (day.equals("31")) || 
			  (month.equals("11")) && (day.equals("31")) || 
			  (month.equals("1")) && (year.equals("2020")) ||
			  (month.equals("2")) && (year.equals("2020")) ||
			  (month.equals("3")) && (year.equals("2020")) ||
			  (month.equals("4")) && (year.equals("2020")) ||
			  (month.equals("5")) && (year.equals("2020")) ||
			  (month.equals("6")) && (year.equals("2020")) ||
			  (month.equals("7")) && (year.equals("2020")) ||
			  (month.equals("8")) && (year.equals("2020")) ||
			  (month.equals("9")) && (year.equals("2020")) ||
			  (month.equals("10")) && (year.equals("2020")) ||
			  (month.equals("11")) && (year.equals("2020")));
		
		custList.get(custNum-1).setMonth((String)month);	// CALL TO SET MONTH
		custList.get(custNum-1).setDay((String)day);		// CALL TO SET DAY
		custList.get(custNum-1).setYear((String)year);		// CALL TO SET YEAR
		custList.get(custNum-1).setDate(date);				// CALL TO SET DATE
	}

	public void actionPerformedName(ActionEvent event)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER NAME THAT NEEDS TO */ 
	/* 				  BE MODIFIED 			   					*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   MODIFIYING CUSTOMER NAME			   		*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		String nm;			// PREVIOUS NAME VALUE OF CUSTOMER BEING MODIFIED
		
		nm = custList.get(custNum - 1).getName();	// GETS NAME
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			name = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if (name.length() > 30)
			{
				nameTF.setText(nm);		// CLEARS THE TEXT FIELD
				errorMessage(error4);	// CALL TO ERROR MESSAGE
			}
		}
		while(name.length() > 30);
		
		custList.get(custNum - 1).setName(name);	// CALL TO SET NAME
	}
	
	public void actionPerformedSize(ActionEvent event)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER SIZE THAT NEEDS TO */ 
	/* 				  BE MODIFIED 			   					*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   MODIFIYING CUSTOMER SIZE			   		*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String grp;		// REUSUABLE STRING INPUT
		String sz;		// PREVIOUS GROUP SIZE VALUE OF CUSTOMER BEING MODIFIED
		int size;		// INTEGER VALUE OF PREVIOUS GROUP SIZE OF CUSTOMER BEING MODIFIED
		int grpSz;		// REUSUABLE INT VALUE
		
		size = custList.get(custNum - 1).getSize();	// GETS SIZE				
		sz = "" + size;	
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			grp = grpSzTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(grp);		// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((grpSz <= 0) || (grpSz > 400))
			{
				grpSzTF.setText(sz);			// CLEARS THE TEXT FIELD 
				errorMessage(error5);			// CALL TO ERROR MESSAGE
			}
		}
		while((grpSz <= 0) || (grpSz > 400));
		
		custList.get(custNum - 1).setSize(grpSz);	// CALL TO SET SIZE
	}
	
	public static int maxSize()
	/********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF CUSTOMERS THAT	*/
	/*  			  EXCEED 20 BUS LIMIT 								*/
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	*/
	/********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;					// DATE OF CURRENT CUSTOMER
		int grp;						// SIZE OF GROUP FOR SPECIFIC DATE
		
		grp = 0;		// INITIALIZES AND RESETS GRP
		
		date = custList.get(custNum-1).getDate();	// CALL TO GET DATE
		
		/******************************************/
		/* FOR LOOP TO FIND UNIQUE SKI TRIP DATES */
		/******************************************/
		for(int j = 0; j < custList.size(); j++)
		{
			Object dt = custList.get(j).getDate(); // DECLARES AND INITIALIZES DT TO UNIQUE DATE VALUE
			
			/************************************************************/
			/* IF STATEMENT TO CHECK IF CURRENT CUSTOMER DATE EQUALS DT */
			/************************************************************/
			if(dt.equals(date))
			{	
				grp+=custList.get(j).getSize();	// ADDS GROUP SIZE FOR SKI TRIPS ON SAME DATE
			}
		}
	
		/******************/
		/* RETURN SECTION */
		/******************/
		return grp;			// RETURNS GRP
	}
	
	public static void refundWindow(String str)
	/************************************************/
	/* PRECONDITION - NEEDS DIALOG BOX FOR REFUNDS	*/
	/* POSTCONDITION - CREATES WINDOW TO TELL USER	*/
	/* 				   IF THEY WILL HAVE REFUNDS	*/
	/************************************************/
	{
		/***********************/
		/* MAKES REFUND WINDOW */
		/***********************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Refund Window",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
