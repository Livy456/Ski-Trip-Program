/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MARCH 8, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT
import java.util.*;						// IMPORTS ARRAYLIST

public class Menu_GUI extends BusGUI implements ActionListener
{	
	final static String heading1 = "Make sure to remember the customer number that you wish to remove.";
	final static String heading2 = "Make sure to remember the customer number that you wish to modfiy.";
	final static String error1 = "ERROR!!! Customer number is not on the list!!!";
	final static String error2 = "ERROR!!! Finish filling in the information!!!";
	final static String error3 = "ERROR!!! You have no customers to view!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton insertB;		// CREATES A BUTTON FOR INSERT
	private JButton removeB;		// CREATES A BUTTON FOR REMOVE
	private JButton modifyB;		// CREATES A BUTTON TO MODIFY CUSTOMER  
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton costB;			// CREATES A BUTTON FOR COST OF SKI TRIP 
	private JButton busDtB;			// CREATES A BUTTON FOR SORTING BY NUM OF BUS FOR SPECIFIC DATE
	private JButton profitDtB;		// CREATES A BUTTON FOR PROFIT BY DATE
	private JButton profitB;		// CREATES A BUTTON FOR TOTAL PROFIT 
	private JButton alphB;			// CREATES A BUTTON FOR SORTING ALPHABETICALLY
	private JButton numB;			// CREATES A BUTTON FOR SORTING NUMERICALLY
	private JButton grpB;			// CREATES A BUTTON FOR SORTING BY GROUP SIZE
	private JLabel heading;			// CREATES A LABEL FOR HEADING
	private JLabel changeCust;		// CREATES A LABEL FOR CHANGING CUSTOMER
	private JLabel cost;			// CREATES A LABEL FOR COST
	private JLabel print;			// CREATES A LABEL FOR PRINT
	private Font font;				// CREATES A FONT
	private JFrame frame;			// CREATES A JFRAME
	private Container container;	// CREATES A CONTAINER
	private static DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
	 
	public Menu_GUI()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame = new JFrame("Ski Trip Menu");				// INSTANTIATES A FRAME
		insertB = new JButton("Insert");					// INSTANTIATES A JBUTTON
		removeB = new JButton("Remove");					// INSTANTIATES A JBUTTON 
		modifyB = new JButton("Modify");					// INSTANTIATES A JBUTTON 
		quitB = new JButton("Quit");						// INSTANTIATES A JBUTTON 
		costB = new JButton("Cost");						// INSTANTIATES A JBUTTON 
		busDtB = new JButton("Sorting by Bus Date");		// INSTANTIATES A JBUTTON 
		profitDtB = new JButton("Profit by Date");			// INSTANTIATES A JBUTTON 
		profitB = new JButton("Total Profit");				// INSTANTIATES A JBUTTON 
		alphB = new JButton("Sorting Alphabetically");		// INSTANTIATES A JBUTTON 
		numB = new JButton("Sorting Numerically");			// INSTANTIATES A JBUTTON 
		grpB = new JButton("Sorting by Group Size");		// INSTANTIATES A JBUTTON 
		heading = new JLabel("Ski Trip Main Menu");			// INSTANTIATES A LABEL
		changeCust = new JLabel("To add, remove, or modify " +
							   "click one of " +
							   "the buttons below:");		// INSTANTIATES A LABEL
		cost = new JLabel("To display cost or profit " +
						 "of Ski Trip click one of " +
						 "the buttons below:");				// INSTANTIATES A LABEL
		print = new JLabel("To print customer info " +
						  "click one " +
						  "of the buttons below:");			// INSTANTIATES A LABEL
		font = new Font("Times New Roman", 
						Font.BOLD, 15);						// INSTANTIATES FONT 
		container = frame.getContentPane();					// CREATES A CONTENT PANE, WHICH  
															// HOLDS THE OBJECTS ON THE FRAME

		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 500, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH FOR FRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.BLUE);	// SETS THE BACKGROUND COLOR OF FRAME
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		heading.setFont(font);		// SETS FONT OF HEADING LABEL
		changeCust.setFont(font);	// SETS FONT OF CHANGING CUSTOMER LABEL
		cost.setFont(font);			// SETS FONT OF REMOVE LABEL
		print.setFont(font);		// SETS FONT OF PRINT LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		heading.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF HEADING LABEL
		changeCust.setForeground(Color.WHITE);	// SETS FOREGROUND COLOR OF CHANGING CUSTOMER LABEL
		cost.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF REMOVE LABEL
		print.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF PRINT LABEL
			
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		insertB.setBounds(50, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		removeB.setBounds(160, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		modifyB.setBounds(270, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		costB.setBounds(50, 190, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		profitDtB.setBounds(160, 190, 140, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		profitB.setBounds(310, 190, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		busDtB.setBounds(50, 270, 180, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		alphB.setBounds(240, 270, 180, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		numB.setBounds(50, 300, 180, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpB.setBounds(240, 300, 180, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(370, 370, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		heading.setBounds(170, 20, 400, 50);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		changeCust.setBounds(20, 70, 500, 50);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		cost.setBounds(20, 150, 500, 50);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		print.setBounds(20, 230, 500, 50);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		insertB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		removeB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		modifyB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		costB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		busDtB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		profitDtB.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		profitB.addActionListener(this);	// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		alphB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		numB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		grpB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(insertB);			// ADDS INSERT BUTTON TO CONTAINER
		container.add(removeB);			// ADDS REMOVE BUTTON TO CONTAINER
		container.add(quitB);			// ADDS QUIT BUTTON TO CONTAINER
		container.add(modifyB);			// ADDS MODIFY BUTTON TO CONTAINER
		container.add(costB);			// ADDS COST BUTTON TO CONTAINER
		container.add(busDtB);			// ADDS BUS BUTTON TO CONTAINER
		container.add(profitDtB);		// ADDS PROFIT BY DATE BUTTON TO CONTAINER
		container.add(profitB);			// ADDS TOTAL PROFIT BUTTON TO CONTAINER
		container.add(alphB);			// ADDS ALPHABETIC SORTING BUTTON TO CONTAINER
		container.add(numB);			// ADDS NUMERIC SORTING BUTTON TO CONTAINER
		container.add(grpB);			// ADDS GROUP SIZE SORTING BUTTON TO CONTAINER
		container.add(heading);			// ADDS HEADING LABEL TO CONTAINER
		container.add(changeCust);		// ADDS CHANGING CUSTOMER LABEL TO CONTAINER
		container.add(cost);			// ADDS COST LABEL TO CONTAINER
		container.add(print);			// ADDS PRINT LABEL TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		ArrayList<Customer> sortCustDt;
		ArrayList<Customer> sortCustAlph;
		ArrayList<Customer> sortCustSz;
		ArrayList<Customer> sortCustID;
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if (action.equals("Quit"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
			
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF INSERT BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action.equals("Insert"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/*****************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF ADDING CUSTOMER */	
			/*****************************************************/
			if(confirm == 0)
			{	
				frame.dispose();		// DISPOSES OF MENU_GUI FRAME
				new BusGUI();			// CREATES A NEW BUS GUI MENU
			}	
		}
			
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF REMOVE BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action.equals("Remove"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/*******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF REMOVING CUSTOMER */	
			/*******************************************************/
			if (confirm == 0)
			{	
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
				updateMenu(heading1);		// CALL TO UPDATE MENU
				new Remove_Menu();			// CREATES THE REMOVE MENU GUI
			}			
		}
		
		/**********************************************************/
		/*ELSE IF STATEMENT TO CHECK IF MODIFY BUTTON WAS PRESSED */	
		/**********************************************************/
		else if (action.equals("Modify"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/********************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF MODIFYING CUSTOMER */	
			/********************************************************/
			if (confirm == 0)
			{
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
				updateMenu(heading2);		// CALL TO UPDATE MENU
				new Modify_Menu();			// INSTANTIATES MODIFY MENU
			}
		}
		
		/********************************************************/
		/*ELSE IF STATEMENT TO CHECK IF COST BUTTON WAS PRESSED */	
		/********************************************************/
		else if (action.equals("Cost"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/**************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING COST OF SKI TRIP */	
			/**************************************************************/
			if (confirm == 0)
			{
				frame.dispose();	// DISPOSES OF MENU_GUI FRAME
				printCost();		// CALL TO PRINT COST
				new Menu_GUI();		// RECREATES MENU GUI WINDOW
			}
		}
		
		/******************************************************************/
		/*ELSE IF STATEMENT TO CHECK IF PROFIT BY DATE BUTTON WAS PRESSED */	
		/******************************************************************/
		else if (action.equals("Profit by Date"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/************************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING PROFIT BY DATE OF SKI TRIP */	
			/************************************************************************/
			if (confirm == 0)
			{
				frame.dispose();		// DISPOSES OF MENU_GUI FRAME
				new Print_Date();		// INSTANTIATES PRINT DATE MENU
			}
		}
		
		/****************************************************************/
		/*ELSE IF STATEMENT TO CHECK IF TOTAL PROFIT BUTTON WAS PRESSED */	
		/****************************************************************/
		else if (action.equals("Total Profit"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/**********************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING TOTAL PROFIT OF SKI TRIP */	
			/**********************************************************************/
			if (confirm == 0)
			{
				frame.dispose();	// DISPOSES OF MENU_GUI FRAME
				totalProfit();		// CALL TO TOTAL PROFIT WINDOW
				new Menu_GUI();		// CREATES NEW MENU GUI WINDOW
			}
		}
				
		/**********************************************************************/
		/* IF STATEMENT TO CHECK IF SORTING ALPHABETICALLY BUTTON WAS PRESSED */	
		/**********************************************************************/
		if (action.equals("Sorting Alphabetically"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			//sortCustAlph = new ArrayList<Customer>();
			
			/********************************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING SORTING ALPHABETICALLY OF SKI TRIP */	
			/********************************************************************************/
			if (confirm == 0)
			{
				//sortCustAlph = sortAlpha();	// CALL TO SORT ALPHA
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
				//printSorted(sortCustAlph);	// CALL TO PRINT SRORTED
				//new Menu_GUI();				// CREATES A NEW MENU GUI WINDOW
				underConstruction();	// CALL TO UNDER CONSTRUCTION
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
				
		/*******************************************************************/
		/* IF STATEMENT TO CHECK IF SORTING BY BUS DATE BUTTON WAS PRESSED */	
		/*******************************************************************/
		if (action.equals("Sorting by Bus Date"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			//sortCustDt = new ArrayList<Customer>();
			
			/*********************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF SORTING BY BUS DATE OF SKI TRIP */	
			/*********************************************************************/
			if (confirm == 0)
			{
			//	sortCustDt = sortDate();	// CALL TO SORT DATE
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
			//	printSorted(sortCustDt);	// CALL TO PRINT SORTED
			//	new Menu_GUI();				// CREATES A NEW MENU GUI WINDOW
				underConstruction();	// CALL TO UNDER CONSTRUCTION
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
		
		/*******************************************************************/
		/* IF STATEMENT TO CHECK IF SORTING NUMERICALLY BUTTON WAS PRESSED */	
		/*******************************************************************/
		if (action.equals("Sorting Numerically"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			//sortCustID = new ArrayList<Customer>();
			
			/*****************************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING SORTING NUMERICALLY OF SKI TRIP */	
			/*****************************************************************************/
			if (confirm == 0)
			{
			//	sortCustID = sortID();		// CALL TO SORT ID
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
			//	printSorted(sortCustID);	// CALL TO PRINT SORTED
			//	new Menu_GUI();				// CREATES A NEW MENU GUI WINDOW
				underConstruction();	// CALL TO UNDER CONSTRUCTION
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
		
		/*********************************************************************/
		/* IF STATEMENT TO CHECK IF SORTING BY GROUP SIZE BUTTON WAS PRESSED */	
		/*********************************************************************/
		if (action.equals("Sorting by Group Size"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			//sortCustSz = new ArrayList<Customer>();
			
			/*******************************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF VIEWING SORTING BY GROUP SIZE OF SKI TRIP */	
			/*******************************************************************************/
			if (confirm == 0)
			{
			//	sortCustSz = sortSize();	// CALL TO SORT SIZE
				frame.dispose();			// DISPOSES OF MENU_GUI FRAME
			//	printSorted(sortCustSz);	// CALL TO PRINT SORTED
			//	new Menu_GUI();				// CREATES A NEW MENU GUI WINDOW
				underConstruction();	// CALL TO UNDER CONSTRUCTION
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
	}
	
	public static double calculateTotCost()
	/**********************************************************/
	/* PRECONDITION - NEEDS TOTAL COST OF ALL SKI TRIPS 	  */
	/* POSTCONDITION - CALCULATES TOTAL COST OF ALL SKI TRIPS */
	/**********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costi;		// STRING REPRESENTATION OF COST
		double cost;		// COST OF ALL SKI TRIPS
		double num;			// COST OF ONE SKI TRIP
		
		costi = "";			// INITIALIZES THE STRING FORM OF COST
		num = 0.00;			// INITIALIZES A SINGLE COST
		cost = 0.00;		// INITIALIZES TOTAL COST
		
		/*****************************************************/
		/* FOR LOOP TO CALCULATE TOTAL COST OF ALL SKI TRIPS */
		/*****************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			costi = custList.get(i).getCost();	// GETS COST OF EACH CUSTOMER
			num = Double.parseDouble(costi);	// PARSES STRING VALUE TO DOUBLE
			cost+=num;							// TOTALS COST 
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return cost;		// RETURNS COST	
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this?",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;		// RETURNS NUM
	}
	
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static String printArray()
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		String name;		// USED FOR CUSTOMER NAME 
		Object date;		// USED FOR CUSTOMER DATE 
		int size;			// USED FOR CUSTOMER SIZE
		int id;				// USED FOR CUSTOMER ID
		int num;			// USED FOR CUSTOMER NUMBER
		
		str = "Customer number            Group ID          Name                             " +
			  " Date                        Size                Cost\n\n";	// INITIALIZES THE STRING
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			num = i + 1;	// ASSIGNS CUSTOMER NUMBER
			
			name = custList.get(i).getName();	// CALL TO GET NAME FROM CUSTOMER	
			size = custList.get(i).getSize();	// CALL TO GET SIZE FROM CUSTOMER
			date = custList.get(i).getDate();	// CALL TO GET DATE FROM CUSTOMER
			id = custList.get(i).getID();		// CALL TO GET ID FROM CUSTOMER
			
			/******************************************************/
			/* IF STATEMENT TO MAKE SINGLE DIGIT AND DOUBLE DIGIT */
			/* CUSTOMER NUMBER LINE UP WHEN PRINTED				  */	
			/******************************************************/
			if(num < 10)
			{
				str+= "" + 0 + num + "               ";
			}
			
			/******************************************************/
			/* ELSE IF STATEMENT TO MAKE SINGLE DIGIT AND DOUBLE  */
			/* DIGIT CUSTOMER NUMBER LINE UP WHEN PRINTED		  */	
			/******************************************************/
			else if(num >=10)
			{
				str+= "" + num + "               ";
			}
			
			/**********************************************************************/
			/* IF STATEMENT TO CHECK LENGTH OF NAME SO LENGTH CAN BE STANDARDIZED */	
			/**********************************************************************/
			if (name.length() < 20)
			{
				/************************************************/
				/* IF STATEMENT TO CHECK IF LENGTH OF NAME IS 1 */	
				/************************************************/
				if(name.length() == 1)
				{
					name += "                                  ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 2 */	
				/*****************************************************/
				else if (name.length() == 2)
				{
					name += "                                ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 3 */	
				/*****************************************************/
				else if (name.length() == 3)
				{ 
					name += "                              ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 4 */	
				/*****************************************************/
				else if (name.length() == 4)
				{
					name += "                            ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 5 */	
				/*****************************************************/
				else if (name.length() == 5)
				{
					name += "                           ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 6 */	
				/*****************************************************/
				else if (name.length() == 6)
				{
					name += "                         ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 7 */	
				/*****************************************************/
				else if (name.length() == 7)
				{
					name += "                       ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 8 */	
				/*****************************************************/
				else if (name.length() == 8)
				{
					name += "                      ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 9)
				{
					name += "                   ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 10)
				{
					name += "                  ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 11)
				{
					name += "                ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 12)
				{
					name += "              ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 13)
				{
					name += "             ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 14)
				{
					name += "           ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 15)
				{
					name += "        ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 16)
				{
					name += "      ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 17)
				{
					name += "    ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 18)
				{
					name += "  ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 19)
				{
					name += " ";
				}
			}
			
			str+= "                           " + id;
			str+= "                    " + name;
			str+= "    " + date;
			str+= "             " + size;
			
			/********************************************************/
			/* IF STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT, AND */
			/* TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED		*/	
			/********************************************************/
			if(size < 10)
			{
				str+= "                    " +  custList.get(i).getCost() + "\n";
			}
			
			/*********************************************************/
			/* ELSE IF STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT, */
			/* AND TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED	 */	
			/*********************************************************/
			else if((size >= 10) && (size < 100))
			{
				str+= "                  " +  custList.get(i).getCost() + "\n";
			}
			
			/*******************************************************/
			/* ELSE STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT,  */
			/* AND TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED */	
			/*******************************************************/
			else
			{
				str+= "                " +  custList.get(i).getCost() + "\n";	// CREATES A STRING 
																				// REPRESENTATION OF ARRAYLIST
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURN STR
	}
	
	public static void printCost()
	/********************************************************************/
	/* PRECONDITION - NEEDS AN WINDOW TO DISPLAY COST FOR EACH CUSTOMER */
	/* POSTCONDITION - CREATES WINDOW TO DISPLAY COST FOR EACH CUSTOMER */
	/********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// STRING REPRESENTATION OF CUSTOMER INFORMATION
		
		str = printArray();	// CALL TO PRINT ARRAY
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"Cost for each Customer going on a ski trip " +
				"\n" + str,
				"Cost of Ski Trip",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public static void printSorted(ArrayList<Customer> cust)
	/**************************************************************/
	/* PRECONDITION - NEEDS AN WINDOW TO DISPLAY SORTED CUSTOMERS */
	/* POSTCONDITION - CREATES WINDOW TO DISPLAYSORTED CUSTOMERS  */
	/**************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// STRING REPRESENTATION OF CUSTOMER INFORMATION
		
		str = printSortedArray(cust);	// CALL TO PRINT SORTED ARRAY
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				str,
				"Sorted Customer List",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public static String printSortedArray(ArrayList<Customer> cust)
	/*********************************************************/
	/* PRECONDITION - NEEDS UPDATE OF ARRAYLIST OF INTEGERS	 */
	/* POSTCONDITION - GETS UPDATE FOR ARRAYLIST OF INTEGERS */
	/*********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		String name;		// USED FOR CUSTOMER NAME 
		Object date;		// USED FOR CUSTOMER DATE 
		int size;			// USED FOR CUSTOMER SIZE
		int id;				// USED FOR CUSTOMER ID
		int num;			// USED FOR CUSTOMER NUMBER
		
		str = "Customer number          Group ID          Name                 " +
			  "Date                        Size                Cost\n\n";	// INITIALIZES THE STRING
		
		/***********************************************/
		/* FOR LOOP TO PRINT OUT ARRAYLIST OF CUSTOMER */
		/***********************************************/
		for(int i = 0; i < cust.size(); i++)
		{
			num = i + 1;	// ASSIGNS CUSTOMER NUMBER
			
			name = cust.get(i).getName();	// CALL TO GET NAME FROM CUSTOMER	
			size = cust.get(i).getSize();	// CALL TO GET SIZE FROM CUSTOMER
			date = cust.get(i).getDate();	// CALL TO GET DATE FROM CUSTOMER
			id = cust.get(i).getID();		// CALL TO GET ID FROM CUSTOMER
			
			/******************************************************/
			/* IF STATEMENT TO MAKE SINGLE DIGIT AND DOUBLE DIGIT */
			/* CUSTOMER NUMBER LINE UP WHEN PRINTED				  */	
			/******************************************************/
			if(num < 10)
			{
				str+= "" + 0 + num + "               ";
			}
			
			/******************************************************/
			/* ELSE IF STATEMENT TO MAKE SINGLE DIGIT AND DOUBLE  */
			/* DIGIT CUSTOMER NUMBER LINE UP WHEN PRINTED		  */	
			/******************************************************/
			else if(num >=10)
			{
				str+= "" + num + "               ";
			}
			
			/**********************************************************************/
			/* IF STATEMENT TO CHECK LENGTH OF NAME SO LENGTH CAN BE STANDARDIZED */	
			/**********************************************************************/
			if (name.length() < 10)
			{
				/************************************************/
				/* IF STATEMENT TO CHECK IF LENGTH OF NAME IS 1 */	
				/************************************************/
				if(name.length() == 1)
				{
					name += "              ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 2 */	
				/*****************************************************/
				else if (name.length() == 2)
				{
					name += "             ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 3 */	
				/*****************************************************/
				else if (name.length() == 3)
				{ 
					name += "            ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 4 */	
				/*****************************************************/
				else if (name.length() == 4)
				{
					name += "         ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 5 */	
				/*****************************************************/
				else if (name.length() == 5)
				{
					name += "      ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 6 */	
				/*****************************************************/
				else if (name.length() == 6)
				{
					name += "       ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 7 */	
				/*****************************************************/
				else if (name.length() == 7)
				{
					name += "   ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 8 */	
				/*****************************************************/
				else if (name.length() == 8)
				{
					name += "   ";
				}
				
				/*****************************************************/
				/* ELSE IF STATEMENT TO CHECK IF LENGTH OF NAME IS 9 */	
				/*****************************************************/
				else if (name.length() == 9)
				{
					name += "";
				}
			}
			
			str+= "                           " + id;
			str+= "                    " + name;
			str+= "          " + date;
			str+= "             " + size;
			
			/********************************************************/
			/* IF STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT, AND */
			/* TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED		*/	
			/********************************************************/
			if(size < 10)
			{
				str+= "                    " +  cust.get(i).getCost() + "\n";
			}
			
			/*********************************************************/
			/* ELSE IF STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT, */
			/* AND TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED	 */	
			/*********************************************************/
			else if((size >= 10) && (size < 100))
			{
				str+= "                  " +  cust.get(i).getCost() + "\n";
			}
			
			/*******************************************************/
			/* ELSE STATEMENT TO MAKE SINGLE DIGIT, DOUBLE DIGIT,  */
			/* AND TRIPLE DIGIT CUSTOMER SIZE LINE UP WHEN PRINTED */	
			/*******************************************************/
			else
			{
				str+= "                " +  cust.get(i).getCost() + "\n";	// CREATES A STRING 
																				// REPRESENTATION OF ARRAYLIST
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURN STR
	}
	
	public static ArrayList<Customer> sortAlpha()
	/***************************************************************************/
	/* PRECONDITION - NEEDS AN ARRAYLIST OF CUSTOMERS SORTED ALPHABETICALLY	   */
	/* POSTCONDITION - CREATES AN ARRAYLIST OF CUSTOMERS SORTED ALPHABETICALLY */
	/***************************************************************************/
	{
		ArrayList<Customer> cust;
		
		cust = new ArrayList<Customer>();
		// MAKE EVERY CHARACTER IN THE NAME UPPERCASE SO THAT YOU CAN COMPARE
		// NAMES THAT HAVE THE SAME FIRST LETTER
		
		return cust;
	}
	
	public static ArrayList<Customer> sortDate()
	/********************************************************************/
	/* PRECONDITION - NEEDS AN ARRAYLIST OF CUSTOMERS SORTED BY DATE 	*/
	/* POSTCONDITION - CREATES AN ARRAYLIST OF CUSTOMERS SORTED BY DATE */
	/********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		ArrayList<Customer> cust;	// A COPY OF ARRAYLIST OF CUSTOMERS
		ArrayList<Customer> sort;	// SORTED ARRAYLIST OF CUSTOMERS BY DATE
		String monthi;				// STRING REPRESENTATION OF MONTH OF CUSTOMER'S SKI TRIP 
		String dayi;				// STRING REPRESENTATION OF DAY OF CUSTOMER'S SKI TRIP 
		String yeari;				// STRING REPRESENTATION OF YEAR OF CUSTOMER'S SKI TRIP 
		int month;					// INTEGER REPRESENTATION OF MONTH OF CUSTOMER'S SKI TRIP 
		int day;					// INTEGER REPRESENTATION OF MONTH OF CUSTOMER'S SKI TRIP
		int year;					// INTEGER REPRESENTATION OF MONTH OF CUSTOMER'S SKI TRIP
		
		sort = new ArrayList<Customer>();	// INSTANTIATES SORT
		cust = new ArrayList<Customer>();	// INSTANTIATES CUST
		monthi  = "";		// INITIALIZES MONTHI
		dayi = "";			// INITIALIZES DAYI
		yeari = "";			// INITIALIZES YEARI
		
		/***************************************************/
		/* FOR LOOP TO ADD EACH CUSTOMER TO CUST ARRAYLIST */
		/***************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			cust.add(custList.get(i));
		}
		
		Customer customer = cust.get(0);	// ASSIGNS CUSTOMER TO FIRST ELEMENT IN CUST ARRAYLIST
		
		/***********************************************************/
		/* IF STATEMENT TO CHECK IF ARRAYLIST HAS ONLY ONE ELEMENT */
		/***********************************************************/
		if(cust.size() == 1)
		{
			customer = cust.remove(0);	// REMOVES LAST CUSTOMER FROM CUST
			sort.add(0, customer);		// ADDS CLOSEST DATE TO SORT 
		}
		
		for(int i = 0; i < custList.size(); i++)
		{
			customer = custList.get(i);
			
			if (cust.size() > 1)
			{
				/*************************************************/
				/* WHILE LOOP TO CREATE SORTED ARRAYLIST BY DATE */
				/*************************************************/
				for(int j = 0; j < cust.size()-1; j++)
				{
					int next = j + 1;
					
					//System.out.println("Index:" + in);
					//System.out.println("Next:"+ next);
					//System.out.println("Size:" + cust.size());
					//System.out.println("Current Cust Date:" + cust.get(in).getDate());
					//System.out.println("Next Cust Date:" + cust.get(next).getDate());
			
					
					String mnthi = cust.get(next).getMonth();	// GETS MONTH OF ELEMENT TO THE RIGHT
					String dyi = cust.get(next).getDay();		// GETS DAY OF ELEMENT TO THE RIGHT
					String yri = cust.get(next).getYear();		// GETS YEAR OF ELEMENT TO THE RIGHT
					int mnth = Integer.parseInt(mnthi);			// CONVERTS STRING TO AN INT
					int dy = Integer.parseInt(dyi);				// CONVERTS STRING TO AN INT
					int yr = Integer.parseInt(yri);				// CONVERTS STRING TO AN INT
			
					monthi = customer.getMonth();			// GETS MONTH OF CURRENT CUSTOMER
					dayi = customer.getDay();				// GETS DAY OF CURRENT CUSTOMER
					yeari = customer.getYear();				// GETS YEAR OF CURRENT CUSTOMER
					month = Integer.parseInt(monthi);		// CONVERTS STRING TO AN INT
					day = Integer.parseInt(dayi);			// CONVERTS STRING TO AN INT
					year = Integer.parseInt(yeari);			// CONVERTS STRING TO AN INT	
			
					/*********************************************************************/
					/* IF STATEMENT TO CHECK IF CURRENT CUSTOMER HAS A FURTHER AWAY DATE */
					/*********************************************************************/
					if(year > yr)
					{
						customer = cust.get(next);	// CUSTOMER EQUALS ELEMENT TO RIGHT	
					}
			
					/*********************************************************************/
					/* IF STATEMENT TO CHECK IF CURRENT CUSTOMER HAS A FURTHER AWAY DATE */
					/*********************************************************************/
					else if((year == yr) && (month > mnth))
					{
						customer = cust.get(next);	// CUSTOMER EQUALS ELEMENT TO RIGHT	
					}
				
					/*********************************************************************/
					/* IF STATEMENT TO CHECK IF CURRENT CUSTOMER HAS A FURTHER AWAY DATE */
					/*********************************************************************/
					else if((year == yr) && (month == mnth) && (day > dy))
					{
						customer = cust.get(next);	// CUSTOMER EQUALS ELEMENT TO RIGHT	
					}
				
					/*********************************************/
					/* ELSE STATEMENT TO CHNAGE CURRENT CUSTOMER */
					/*********************************************/
					else
					{
						customer = cust.get(next);	// CUSTOMER EQUALS ELEMENT TO RIGHT
					}	
				}
			}
			
			if(cust.size() > 1)
			{
				sort.add(customer);	// ADDS CUSTOMER TO FIRST INDEX OF SORT
				cust.remove(customer);	// REMOVES CUSTOMER WITH FURTHEST AWAY DATE
				System.out.println("Removed: " + customer.toString());
			}
			
			else if(cust.size() == 1)
			{
				customer = cust.remove(0);	// REMOVES LAST CUSTOMER FROM CUST
				sort.add(customer);		// ADDS CLOSEST DATE TO SORT 
				System.out.println("Last Removed: " + customer.toString());
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return sort;		// RETURNS CUST
	}
	
	public static ArrayList<Customer> sortID()
	{
		ArrayList<Customer> cust;
		
		cust = new ArrayList<Customer>();
		
		return cust;
	}
	
	public static ArrayList<Customer> sortSize()
	/**************************************************************************/
	/* PRECONDITION - NEEDS AN ARRAYLIST OF CUSTOMERS SORTED BY GROUP SIZE 	  */
	/* POSTCONDITION - CREATES AN ARRAYLIST OF CUSTOMERS SORTED BY GROUP SIZE */
	/**************************************************************************/
	{
		ArrayList<Customer> cust;
		
		cust = new ArrayList<Customer>();
		
		// INSERTION SORTING TECHNIQUE
		
		return cust;
	}
	
	public static void totalProfit()
	/***************************************************************************/
	/* PRECONDITION - NEEDS AN WINDOW TO DISPLAY TOTAL PROFIT OF ALL CUSTOMERS */
	/* POSTCONDITION - CREATES WINDOW TO DISPLAY TOTAL PROFIT OF ALL CUSTOMERS */
	/***************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costdf;		// STRING REPRESENTATION OF COST
		double cost;		// REUSUABLE INTEGER VALUE FOR OUTPUT
		
		cost = calculateTotCost();	// CALL TO CALCULATE TOTAL COST	
		costdf = df.format(cost);	// FORMATS COST TO TWO DECIMAL PLACES
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"Total Cost of all Skip Trips"+
				"\n$"+costdf,
				"Total Profit",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public static void underConstruction()
	/****************************************************/
	/* PRECONDITION - NEEDS UNDER CONSTRUCTION WINDOW 	*/
	/* POSTCONDITION - CREATES WINDOW TO TELL USER		*/
	/* 				   THAT THE SECTION THEY ARE TRYING */
	/*  			   TO USE IS UNDER CONSTRUCTION 	*/
	/****************************************************/
	{
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"This part of the option menu is under construction",
				"Under construction menu",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public static void updateMenu(String hdstr)
	/*****************************************************************/
	/* PRECONDITION - NEEDS AN UPDATE WINDOW OF ALL CUSTOMERS 		 */
	/* POSTCONDITION - CREATES WINDOW TO TELL USER ALL THE CUSTOMERS */
	/*****************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = printArray();	// CALL TO PRINT ARRAY
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				hdstr + "\n"+
				str,
				"Customer List",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
