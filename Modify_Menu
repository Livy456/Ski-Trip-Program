/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* APRIL 9, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;						// IMPORTS SWING
import java.awt.*;							// IMPORTS AWT
import java.awt.event.ActionEvent;			// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;		// IMPORTS ACTION LISTENER
import java.util.ArrayList;

public class Modify_Menu extends Menu_GUI implements ActionListener
{	
	final static String message1 = "Input Name(10 characters or less): ";
	final static String message2 = "Input Size(between 1 and 400): ";
	final static String message3 = "Select a Date: ";
	final static String heading1 = "Input Name";
	final static String heading2 = "Input Size";
	final static String heading3 = "Input Date";
	final static String error1 = "ERROR!!! Customer number is not on the list!!!";
	final static String error2 = "ERROR!!! Finish filling in the information!!!";
	final static String error3 = "ERROR!!! You have no customers to view!!!";
	final static String error4 = "ERROR!!! Name has to be less than 10 characters";
	final static String error5 = "ERROR!!! Size has to be between 1 and 400";
	final static String error6 = "ERROR!!! Need to change one of the fields for the customer!!!";
	final static String error7 = "ERROR!!! Date has to be changed!!!"; 

	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	protected JButton returnB;				// CREATES A BUTTON FOR REUTNRING TO HOME MENU
	protected JButton enter;				// CREATES A BUTTON FOR ENTERING WHICH CUSTOMER INFO TO MODIFY
	protected JButton quitB;				// CREATES A BUTTON TO QUIT PROGRAM 
	protected JButton view;					// CREATES A BUTTON FOR VIEWING LIST OF CUSTOMERS
	protected JButton confirm;				// CREATES A BUTTON FOR CONFIMRING THE CHANGE TO CUSTOMER INFO
	private JTextField modify;				// CREATES A JTEXTFIELD FOR MODIFYING CUSTOMER INFO
	protected JLabel info;					// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private JLabel custnum;					// CREATES A LABEL FOR CUSTOMER NUMBER
	protected JLabel disName;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD NAME
	protected JLabel disSize;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD SIZE
	protected JLabel disDate;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD DATE
	protected JFrame frame;					// CREATES A JFRAME 
	protected static Container container;	// CREATES A CONTAINER
	protected Font font;					// CREATES A FONT
	protected static int custNum;			// INTEGER VALUE FOR CUSTOMER NUMBER
	
	public Modify_Menu()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		returnB = new JButton("Return");			// INSTANTIATES JBUTTON
		enter = new JButton("Enter");				// INSTANTIATES JBUTTON
		quitB = new JButton("Quit");				// INSTANTIATES JBUTTON
		view = new JButton("Customer List");		// INSTANTIATES JBUTTON
		modify = new JTextField("");				// INSTANTIATES JTEXTFIELD
		info = new JLabel("Enter the customer "+
						 "number that you want "+
						 "to modify.");				// INSTANTIATES JLABEL
		custnum = new JLabel("Customer Number");	// INSTANTIATES JLABEL
		frame = new JFrame("Modify Menu");			// INSTANTIATES JFRAME
		container = frame.getContentPane();			// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 15);				// INSTANTIATES FONT 
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 500, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH 
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.YELLOW);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);				// SETS FONT OF INFO LABEL
		view.setFont(font);				// SETS FONT OF VIEW BUTTON 
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF INFO LABEL
		custnum.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF CUSTOMER NUMBER
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(370, 320, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		enter.setBounds(240, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(450, 320, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(80, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custnum.setBounds(20, 80, 200, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		view.setBounds(350, 80, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		modify.setBounds(130, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
	
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enter.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED 
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		view.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		modify.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(enter);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(view);		// ADDS VIEW BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(custnum);		// ADDS CUSTOMER NUMBER LABEL TO CONTAINER
		container.add(modify);		// ADDS MODFIY TEXT FIELD TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		confirm = 1;						// INITIALIZES CONFIRM
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action == "Quit")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action == "Return")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
				
		actionPerformedInt();	// CALL TO ACTION PERFORMED INT
		
		/*****************************************************/
		/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/*****************************************************/
		if (action == "Enter")
		{
			frame.dispose();	// DISPOSES THE MODIFY MENU WINDOW
			new Modify();		// CREATES A NEW MODIFY WINDOW
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF VIEW BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action == "Customer List")
		{
			frame.dispose();			// DISPOSES THE REMOVE MENU WINDOW
			updateMenu(heading1);		// CALL TO UPDATE MENU
			new Modify_Menu();			// RECREATES THE REMOVE MENU WINDOW
		}
		
	}
	
	public void actionPerformedInt()
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;		// REUSUABLE OBJECT INPUT
		int num;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(custList.size() < 1)
			{
				errorMessage(error3); 	// CALL TO ERROR MESSAGE
			}
			
			numi = modify.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((num < 1) || (num > custList.size()))
			{
				modify.setText("");		// CLEARS THE TEXT FIELD
				errorMessage(error1);	// CALL TO ERROR MESSAGE
			}
		}
		while((num < 1) || (num > custList.size()));
		
		custNum = num;
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this?",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static void updateMenu(String hdstr)
	/*****************************************************************/
	/* PRECONDITION - NEEDS AN UPDATE WINDOW OF ALL CUSTOMERS 		 */
	/* POSTCONDITION - CREATES WINDOW TO TELL USER ALL THE CUSTOMERS */
	/*****************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// USED FOR REUSABLE OUTPUT
		
		str = printArray();	// CALL TO PRINT ARRAY
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				hdstr + "\n"+
				str,
				"Customer List",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
