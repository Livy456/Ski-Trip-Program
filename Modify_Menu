/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* APRIL 9, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;						// IMPORTS SWING
import java.awt.*;							// IMPORTS AWT
import java.awt.event.ActionEvent;			// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;		// IMPORTS ACTION LISTENER

public class Modify_Menu extends Menu_GUI implements ActionListener
{	
	final static String error1 = "ERROR!!! Customer number is not on the list!!!";
	final static String error2 = "ERROR!!! Finish filling in the information!!!";
	final static String error3 = "ERROR!!! You have no customers to view!!!";
	
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;				// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton returnB;			// CREATES A BUTTON FOR REUTNRING TO HOME MENU
	private JButton quitB;				// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton view;				// CREATES A BUTTON FOR VIEWING LIST OF CUSTOMERS
	private JTextField modify;			// CREATES A TEXT FIELD FOR MODIFYING CUSTOMERS
	private JLabel info;				// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private JLabel custnum;				// CREATES A LABEL FOR CUSTOMER NUMBER
	private JFrame frame;				// CREATES A JFRAME 
	private static Container container;	// CREATES A CONTAINER
	private Font font;					// CREATES A FONT
	
	public Modify_Menu()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");				// INSTANTIATES JBUTTON
		returnB = new JButton("Return");			// INSTANTIATES JBUTTON
		quitB = new JButton("Quit");				// INSTANTIATES JBUTTON
		view = new JButton("Customer List");		// INSTANTIATES JBUTTON
		modify = new JTextField("");				// INSTANTIATES JTEXTFIELD
		info = new JLabel("Enter the customer "+
						 "number that you want "+
						 "to modify.");				// INSTANTIATES JLABEL
		custnum = new JLabel("Customer Number");	// INSTANTIATES JLABEL
		frame = new JFrame("Modify Menu");			// INSTANTIATES JFRAME
		container = frame.getContentPane();			// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 15);				// INSTANTIATES FONT 
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 100, 550, 550);	// SETS X POSITION, Y POSITION, LENGTH, 
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.YELLOW);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);				// SETS FONT OF INFO LABEL
		view.setFont(font);				// SETS FONT OF VIEW BUTTON 
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF INFO LABEL
		custnum.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF CUSTOMER NUMBER
		nameL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF NAME LABEL
		grpSzL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF GROUP SIZE LABEL
		dateL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DATE LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		enterB.setBounds(370, 280, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		returnB.setBounds(290, 280, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(450, 280, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(80, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custnum.setBounds(20, 80, 200, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		view.setBounds(240, 80, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		modify.setBounds(130, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(20, 110, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(20, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(20, 170, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(130, 110, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(130, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(130, 170, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(240, 170, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(350, 170, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		view.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		modify.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(view);		// ADDS VIEW BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(custnum);		// ADDS CUSTOMER NUMBER LABEL TO CONTAINER
		container.add(modify);		// ADDS MODFIY TEXT FIELD TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		action = event.getActionCommand();		// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action == "Quit")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action == "Return")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF VIEW BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action == "Customer List")
		{
			frame.dispose();			// DISPOSES THE REMOVE MENU WINDOW
			updateMenu(heading1);		// CALL TO UPDATE MENU
			new Modify_Menu();			// RECREATES THE REMOVE MENU WINDOW
		}
				
		actionPerformedModify(event);	// CALL TO ACTION PERFORMED FOR REMOVE 
		
		/**********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/**********************************************************/
		if(action == "Enter")
		{
			
			/*******************************************************************/
			/* IF STATEMENT TO CHECK IF NOTHING ENTERED INTO MODIFY YEXT FIELD */	
			/*******************************************************************/
			if(modify.getText() == "")
			{
				errorMessage(error2);	// CALL TO ERROR MESSAGE
			}
			
			/************************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF NOTHING ENTERED INTO MODIFY YEXT FIELD */	
			/************************************************************************/
			else if (modify.getText() != "")
			{
				
			}
		}
	}
	
	public void actionPerformedModify(ActionEvent event)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS JCOMBO BOXES FOR MONTH, DAY, */ 
	/* 				  AND YEAR AND NEEDS A DATE 			   */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR    */
	/* 				   TEXT FIELD FOR GROUP SIZE			   */
	/***********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		String month;		// REUSUABLE STRING INPUT
		String day;			// REUSUABLE STRING INPUT
		String year;		// REUSUABLE STRING INPUT
		int size;			// REUSUABLE INTEGER INPUT
		int num;			// REUSUABLE INT VALUE

		/**************************/
		/* INITIALIZATION SECTION */
		/**************************/
		month = "";			// INITIALIZES MONTH
		day = "";			// INITIALIZES DAY
		year = "";			// INITIALIZES YEAR
		
		/************************************/
		/* INPUTS CUSTOMER NUMBER TO MODIFY */
		/************************************/
		num = inputInt();	// CALL TO INPUT INT
		
		name = custList.get(num-1).getName();		// CALL TO GET CUSTOMER'S NAME FROM ARRAY LIST
		month = custList.get(num-1).getMonth();		// CALL TO GET CUSTOMER'S MONTH FROM ARRAY LIST
		day = custList.get(num-1).getDay();			// CALL TO GET CUSTOMER'S DAY FROM ARRAY LIST
		year = custList.get(num-1).getYear();		// CALL TO GET CUSTOMER'S YEAR FROM ARRAY LIST
		size = custList.get(num-1).getSize();		// CALL TO GET CUSTOMER'S SIZE FROM ARRAY LIST		
		
		modify(name, month, day, year, size, event);	// CALL TO MODIFY
	}
	
	public void actionPerformedName(String nm2, ActionEvent event)
	/*****************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR NAME  */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT  */
	/* 				   FOR TEXT FIELD FOR NAME			 */
	/*****************************************************/
	{		
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		
		confirmWindow();	// CALL TO CONFIRM WINDOW

		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			name = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if (name.length() > 10)
			{
				nameTF.setText("" + nm2);	// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while(name.length() > 10);
		
		customer.setName(name);				// CALL TO SET NAME
	}
	
	public void actionPerformedSize(int grpsz, ActionEvent event)
	/**********************************************************/
	/* PRECONDITION - PROGRAM HAS A TEXT FIELD FOR GROUP SIZE */
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR   */
	/* 				   TEXT FIELD FOR GROUP SIZE			  */
	/**********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String grp;			// REUSUABLE STRING INPUT
		int grpSz;			// REUSUABLE INT VALUE
		
		confirmWindow();		// CALL TO CONFIRM WINDOW

		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			grp = grpSzTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(grp);		// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((grpSz <= 0) ||(grpSz > 400))
			{
				grpSzTF.setText("" + grpsz);	// CLEARS THE TEXT FIELD 
				errorMessage(error3);			// CALL TO ERROR MESSAGE
			}
		}
		while((grpSz <= 0) || (grpSz > 400));
		
		customer.setSize(grpSz);		// CALL TO SET SIZE
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this?",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public int inputInt()
	
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;
		int num;
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(custList.size() < 1)
			{
				errorMessage(error3); 	// CALL TO ERROR MESSAGE
			}
			
			numi = modify.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((num < 1) || (num > custList.size()))
			{
				modify.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 1) || (num > custList.size()));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public void modify(String nm, String mn, String dy, String yr,
			   int sz, ActionEvent event)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER NAME, DATE, SIZE, */ 
	/* 				  AND ID NEEDS TO MODIFY IT 			   */
	/* POSTCONDITION - FUNCTION MODIFIES A CUSTOMER'S NAME,    */
	/* 				   DATE, SIZE, AND ID			   		   */
	/***********************************************************/
	{
		nameTF.setText(""+nm);					// SETS TEXT OF NAME TEXT FIELD
		grpSzTF.setText(""+sz);					// SETS TEXT OF GROUP SIZE TEXT FIELD
		monthCB.setSelectedItem(""+mn);			// SETS SELECTED DROP-DOWN ITEM OF MONTH COMBO BOX
		dayCB.setSelectedItem(""+dy);			// SETS SELECTED DROP-DOWN ITEM OF DAY COMBO BOX
		yearCB.setSelectedItem(""+yr);			// SETS SELECTED DROP-DOWN ITEM OF YEAR COMBO BOX

		System.out.print(monthCB.getSelectedItem() + " " + dayCB.getSelectedItem() + " " + yearCB.getSelectedItem());
		
		actionPerformedName(nm, event);			// CALL TO ACTION PERFORMED FOR NAME
		actionPerformedSize(sz, event);			// CALL TO ACTION PERFORMED FOR SIZE
		inputDate(mn, dy, yr, event);			// CALL TO INPUT DATE
		System.out.println("End of the modify method!!!");
	}
}
