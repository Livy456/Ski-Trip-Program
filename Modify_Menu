/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* APRIL 9, 2020		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;						// IMPORTS SWING
import java.awt.*;							// IMPORTS AWT
import java.awt.event.ActionEvent;			// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;		// IMPORTS ACTION LISTENER
import java.util.ArrayList;

public class Modify_Menu extends Menu_GUI implements ActionListener
{	
	final static String message1 = "Input Name(10 characters or less): ";
	final static String message2 = "Input Size(between 1 and 400): ";
	final static String message3 = "Select a Date: ";
	final static String heading1 = "Input Name";
	final static String heading2 = "Input Size";
	final static String heading3 = "Input Date";
	final static String error1 = "ERROR!!! Customer number is not on the list!!!";
	final static String error2 = "ERROR!!! Finish filling in the information!!!";
	final static String error3 = "ERROR!!! You have no customers to view!!!";
	final static String error4 = "ERROR!!! Name has to be less than 10 characters";
	final static String error5 = "ERROR!!! Size has to be between 1 and 400";
	final static String error6 = "ERROR!!! Need to change one of the fields for the customer!!!";
	final static String error7 = "ERROR!!! Date has to be changed!!!"; 

	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton enterB;				// CREATES A BUTTON FOR ENTERING INFORMATION FOR PROGRAM	
	private JButton returnB;			// CREATES A BUTTON FOR REUTNRING TO HOME MENU
	private JButton quitB;				// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton view;				// CREATES A BUTTON FOR VIEWING LIST OF CUSTOMERS
	private JButton confirm;			// CREATES A BUTTON FOR CONFIMRING THE CHANGE TO CUSTOMER INFO
	private JTextField modify;			// CREATES A TEXT FIELD FOR SELECTING CUSTOMERS TO MODIFY
	private JLabel info;				// CREATES A LABEL FOR ADDITIONAL INFORMATION
	private JLabel custnum;				// CREATES A LABEL FOR CUSTOMER NUMBER
	private JLabel disName;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD NAME
	private JLabel disSize;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD SIZE
	private JLabel disDate;				// CREATES A LABEL TO DISPLAY CUSTOMER'S OLD DATE
	private JFrame frame;				// CREATES A JFRAME 
	private static Container container;	// CREATES A CONTAINER
	private Font font;					// CREATES A FONT
	private String[] custAmt = inputArray();	// CREATES AN ARRAY OF CUSTOMER NUMBERS TO SELECT FROM 
	
	public Modify_Menu()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		enterB = new JButton("Enter");				// INSTANTIATES JBUTTON
		returnB = new JButton("Return");			// INSTANTIATES JBUTTON
		quitB = new JButton("Quit");				// INSTANTIATES JBUTTON
		view = new JButton("Customer List");		// INSTANTIATES JBUTTON
		confirm = new JButton("Confirm");			// INSTANTIATES JBUTTON
		modify = new JTextField("");				// INSTANTIATES JTEXTFIELD
		disName = new JLabel("");					// INSTANTIATES JLABEL
		disSize = new JLabel("");					// INSTANTIATES JLABEL
		disDate = new JLabel("");					// INSTANTIATES JLABEL
		info = new JLabel("Enter the customer "+
						 "number that you want "+
						 "to modify.");				// INSTANTIATES JLABEL
		custnum = new JLabel("Customer Number");	// INSTANTIATES JLABEL
		frame = new JFrame("Modify Menu");			// INSTANTIATES JFRAME
		container = frame.getContentPane();			// CREATES A CONTENT PANE
		font = new Font("Times New Roman", 
						Font.BOLD, 15);				// INSTANTIATES FONT 
		
		/**************************/
		/* CREATES A BLANK JFRAME */
		/**************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 100, 550, 550);	// SETS X POSITION, Y POSITION, LENGTH, 
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.YELLOW);	// SETS THE BACKGROUND COLOR
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
	
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);				// SETS FONT OF INFO LABEL
		view.setFont(font);				// SETS FONT OF VIEW BUTTON 
		disName.setFont(font);			// SETS FONT OF DISPLAY NAME LABEL
		disSize.setFont(font);			// SETS FONT OF DISPLAY SIZE LABEL
		disDate.setFont(font);			// SETS FONT OF DISPLAY DATE LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF INFO LABEL
		custnum.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF CUSTOMER NUMBER
		nameL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF NAME LABEL
		grpSzL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF GROUP SIZE LABEL
		dateL.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DATE LABEL
		disName.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DISPLAY NAME LABEL
		disSize.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DISPLAY SIZE LABEL
		disDate.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF DISPLAY DATE LABEL
		
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(370, 320, 75, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		confirm.setBounds(265, 320, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(450, 320, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(80, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custnum.setBounds(20, 80, 200, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		enterB.setBounds(240, 80, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		view.setBounds(320, 80, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		modify.setBounds(130, 80, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		disName.setBounds(20, 230, 500, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		disSize.setBounds(20, 260, 500, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		disDate.setBounds(20, 290, 500, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameL.setBounds(20, 140, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzL.setBounds(20, 170, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateL.setBounds(20, 200, 75, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		nameTF.setBounds(130, 140, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		grpSzTF.setBounds(130, 170, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		monthCB.setBounds(130, 200, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dayCB.setBounds(240, 200, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		yearCB.setBounds(350, 200, 100, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		
		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		confirm.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED 
		enterB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		view.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		modify.addActionListener(this);		// ADDS ACTIONLISTENER TO MAKE AN EVENT OCCUR ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(confirm);		// ADDS CONFRIM BUTTON TO CONTAINER
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(view);		// ADDS VIEW BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(custnum);		// ADDS CUSTOMER NUMBER LABEL TO CONTAINER
		container.add(modify);		// ADDS MODFIY TEXT FIELD TO CONTAINER
		container.add(disName);		// ADDS DISPLAY NAME LABEL TO CONTAINER
		container.add(disSize);		// ADDS DISPLAY SIZE LABEL TO CONTAINER
		container.add(disDate);		// ADDS DISPLAY DATE LABEL TO CONTAINER
		container.add(nameL);		// ADDS NAME LABEL TO CONTAINER
		container.add(grpSzL);		// ADDS GROUP SIZE LABEL TO CONTAINER
		container.add(dateL);		// ADDS DATE LABEL TO CONTAINER
		container.add(nameTF);		// ADDS NAME TEXT FIELD TO CONTAINER
		container.add(grpSzTF);		// ADDS GROUP SIZE TEXT FIELD TO CONTAINER
		container.add(monthCB);		// ADDS MONTH COMBO BOX TO CONTAINER
		container.add(dayCB);		// ADDS DAY COMBO BOX TO CONTAINER
		container.add(yearCB);		// ADDS YEAR COMBO BOX TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON			*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION 	*/
	/* 				   EVENT FOR BUTTON				*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action;		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		int custNum;		// NUMBER FOR THE CUSTOMER IN ARRAYLIST
		int confirm;		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		confirm = 1;		// INITIALIZES CONFIRM
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action == "Quit")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES THE PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if (action == "Return")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();		// DISPOSES THE REMOVE MENU WINDOW
				new Menu_GUI();			// CREATES A NEW MENU WINDOW
			}
		}
		
		/*********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF VIEW BUTTON WAS PRESSED */	
		/*********************************************************/
		else if (action == "Customer List")
		{
			frame.dispose();			// DISPOSES THE REMOVE MENU WINDOW
			updateMenu(heading1);		// CALL TO UPDATE MENU
			new Modify_Menu();			// RECREATES THE REMOVE MENU WINDOW
		}
		
		/************************************************************/
		/* ELSE IF STATEMENT TO CHECK IF CONFIRM BUTTON WAS PRESSED */	
		/************************************************************/
		else if(action == "Confirm")
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW

			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				/*********************************************************************/
				/* IF STATEMENT TO CHECK IF NOTHING WAS CHANGED IN OTHER TEXT FIELDS */	
				/*********************************************************************/
				if((nameTF.getText() == "") && (grpSzTF.getText() == "") && 
				   (monthCB.getSelectedItem() == "") && (dayCB.getSelectedItem() == "")
				   && (yearCB.getSelectedItem() == ""))
				{
					errorMessage(error6);
				}
				
				/****************************************************************************/
				/* ELSE IF STATEMENT TO CHECK IF SOMETHING WAS CHANGED IN OTHER TEXT FIELDS */	
				/****************************************************************************/
				else if ((nameTF.getText() != "") || (grpSzTF.getText() != "") || 
						 (monthCB.getSelectedItem() != "") || (dayCB.getSelectedItem() != "")
						 || (yearCB.getSelectedItem() != ""))
				{
					frame.dispose();	// GETS RID OF FRAME
					new Menu_GUI();		// NEW MENU FRAME IS INSTANTIATED
				}
			}
		}
	
		custNum = actionPerformedModify(event);	// CALL TO ACTION PERFORMED FOR MODIFY 
		actionPerformedName(event, custNum);	// CALL TO ACTION PERFORMED FOR NAME
		actionPerformedSize(event, custNum);	// CALL TO ACTION PERFORMED FOR SIZE
		actionPerformedDate(event, custNum);	// CALL TO ACTION PERFORMED FOR DATE
		
		/*******************************************************/
		/* IF STATEMENT TO CHECK IF CONFIRM BUTTON WAS PRESSED */	
		/*******************************************************/
		if (action == "Enter")
		{
			System.out.println("This works!!!");
		}
	}
	
	public void actionPerformedDate(ActionEvent event, int custNum)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER SIZE THAT NEEDS TO */ 
	/* 				  BE MODIFIED 			   					*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   MODIFIYING CUSTOMER SIZE			   		*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object month;		// REUSUABLE OBJECT INPUT
		Object day;			// REUSUABLE OBJECT INPUT
		Object year;		// REUSUABLE OBJECT INPUT
		String date;		// REUSUABLE STRING INPUT
				
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* INPUTS MONTH, DAY, AND YEAR */
			/*******************************/
			month = monthCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM MONTH DROP-DOWN LIST	
			day = dayCB.getSelectedItem();		// CALL TO GET SELECTED ITEM 
												// FROM DAY DROP-DOWN LIST		
			year = yearCB.getSelectedItem();	// CALL TO GET SELECTED ITEM 
												// FROM YEAR DROP-DOWN LIST	
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			if((month.equals("02")) && (day.equals("29")) && (year.equals("2021")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2022")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2023")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2025")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2026")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2027")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2029")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2030")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2031")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2033")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2034")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2035")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2037")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2038")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2039")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2041")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2042")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2043")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2045")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2046")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2047")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/************************************/
			/* IF STATEMENT TO ERROR CHECK DATE */
			/************************************/
			else if((month.equals("02")) && (day.equals("29")) && (year.equals("2049")))
			{
				errorMessage(error6);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("02")) && (day.equals("30")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("02")) && (day.equals("31")))
			{
				errorMessage(error5);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("04")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("06")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("09")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			/*****************************************/
			/* ELSE IF STATEMENT TO ERROR CHECK DATE */
			/*****************************************/
			else if((month.equals("11")) && (day.equals("31")))
			{
				errorMessage(error4);		// CALL TO ERROR MESSAGE
				monthCB.setSelectedItem("");// RESETS SELECTED ITEM ON DROP-DOWN LIST
				dayCB.setSelectedItem("");	// RESETS SELECTED ITEM ON DROP-DOWN LIST
				yearCB.setSelectedItem(""); // RESETS SELECTED ITEM ON DROP-DOWN LIST
			}
			
			date = "" + month + "/" + day + "/" + year;
		}
		while((month.equals("02")) && (day.equals("29")) && (year.equals("2021")) || 
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2022")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2023")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2025")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2026")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2027")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2029")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2030")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2031")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2033")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2034")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2035")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2037")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2038")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2039")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2041")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2042")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2043")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2045")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2046")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2047")) ||
			  (month.equals("02")) && (day.equals("29")) && (year.equals("2049")) ||
			  (month.equals("02")) && (day.equals("30")) || 
			  (month.equals("02")) && (day.equals("31")) ||
			  (month.equals("4")) && (day.equals("31")) || 
			  (month.equals("6")) && (day.equals("31")) ||
			  (month.equals("9")) && (day.equals("31")) || 
			  (month.equals("11")) && (day.equals("31")));
		
		custList.get(custNum - 1).setMonth((String)month);	// CALL TO SET MONTH
		custList.get(custNum - 1).setDay((String)day);		// CALL TO SET DAY
		custList.get(custNum - 1).setYear((String)year);	// CALL TO SET YEAR
		custList.get(custNum - 1).setDate(date);			// CALL TO SET DATE
	}
	
	public int actionPerformedModify(ActionEvent event)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER NUMBER TO RECEIVE  */ 
	/* 				  CUSTOMER INFORMATION  			  	 	*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   GETTING CUSTOMER NUMBER			    	*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		String month;		// REUSUABLE STRING INPUT
		String day;			// REUSUABLE STRING INPUT
		String year;		// REUSUABLE STRING INPUT
		int size;			// REUSUABLE INTEGER INPUT
		int num;			// REUSUABLE INT VALUE

		/************************************/
		/* INPUTS CUSTOMER NUMBER TO MODIFY */
		/************************************/
		num = inputInt();	// CALL TO INPUT INT
		
		name = custList.get(num-1).getName();		// CALL TO GET CUSTOMER'S NAME FROM ARRAY LIST
		month = custList.get(num-1).getMonth();		// CALL TO GET CUSTOMER'S MONTH FROM ARRAY LIST
		day = custList.get(num-1).getDay();			// CALL TO GET CUSTOMER'S DAY FROM ARRAY LIST
		year = custList.get(num-1).getYear();		// CALL TO GET CUSTOMER'S YEAR FROM ARRAY LIST
		size = custList.get(num-1).getSize();		// CALL TO GET CUSTOMER'S SIZE FROM ARRAY LIST				
	
		modify(name, month, day, year, size, num);	// CALL TO MODIFY
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public void actionPerformedName(ActionEvent event, int custNum)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER NAME THAT NEEDS TO */ 
	/* 				  BE MODIFIED 			   					*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   MODIFIYING CUSTOMER NAME			   		*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// REUSUABLE STRING INPUT
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************/
			/* INPUTS GROUP ID */
			/*******************/
			name = nameTF.getText();		// CALL TO GET TEXT INPUTTED BY USER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if (name.length() > 10)
			{
				nameTF.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while(name.length() > 10);
		
		custList.get(custNum - 1).setName(name);	// CALL TO SET NAME
	}
	
	public void actionPerformedSize(ActionEvent event, int custNum)
	/************************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER SIZE THAT NEEDS TO */ 
	/* 				  BE MODIFIED 			   					*/
	/* POSTCONDITION - FUNCTION CREATES AN ACTION EVENT FOR     */
	/* 				   MODIFIYING CUSTOMER SIZE			   		*/
	/************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String grp;			// REUSUABLE STRING INPUT
		int grpSz;			// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			grp = grpSzTF.getText();			// CALL TO GET TEXT INPUTTED BY USER
			grpSz = Integer.parseInt(grp);		// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((grpSz <= 0) ||(grpSz > 400))
			{
				grpSzTF.setText("");			// CLEARS THE TEXT FIELD 
				errorMessage(error3);			// CALL TO ERROR MESSAGE
			}
		}
		while((grpSz <= 0) || (grpSz > 400));
		
		custList.get(custNum - 1).setSize(grpSz);	// CALL TO SET SIZE
	}
	
	public static int confirmWindow()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO CONFIRM ACTION	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO MODIFY PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you really want to do this?",
				"Confirm Window",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static String[] inputArray ()
	/**************************************************/
	/* PRECONDITION - NEEDS ARRAY FOR CUSTOMER NUMBER */
	/* POSTCONDITION - GETS ARRAY OF CUSTOMER NUMBERS */
	/**************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String[] array;				// REUSUABLE STRING ARRAY 
		ArrayList<String> arrayL;	// REUSUABLE STRING ARRAYLIST
		int size;					// SIZE OF CUSTOMER ARRAYLIST
		int custNum;				// CUSTOMER NUMBER
		
		custNum = 0;				// INITIALIZES CUSTOMER NUMBER
		arrayL = new ArrayList();	// INSTANTIATES ARRAYLIST
		
		size = custList.size();		// CALL TO SIZE METHOD
		
		/*******************************************************/
		/* FOR LOOP TO CREATE AN ARRAYLIST OF CUSTOMER NUMBERS */
		/*******************************************************/
		for (int i = 0; i < size; i++)
		{
			custNum = i + 1;			// CREATES CUSTOMER NUMBER
			arrayL.add(""+ custNum);	// ADDS CUSTOMER NUMBER TO ARRAYLIST
		}
		
		array = new String[size];		// INSTANTIATES ARRAY
		array = arrayL.toArray(array);	// CONVERTS ARRAYLIST TO ARRAY
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return array;		// RETURNS ARRAY
	}
	
	public int inputInt()
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String numi;			// REUSUABLE STRING INPUT
		int num;				// REUSUABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(custList.size() < 1)
			{
				errorMessage(error3); 	// CALL TO ERROR MESSAGE
			}
			
			numi = modify.getText();		// CALL TO GET TEXT INPUTTED BY USER
			num = Integer.parseInt(numi);	// PARSES STRING TO AN INTEGER
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if((num < 1) || (num > custList.size()))
			{
				modify.setText("");			// CLEARS THE TEXT FIELD
				errorMessage(error1);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 1) || (num > custList.size()));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public void modify(String name, String month, String day, String year,
		 			   int size, int custNum)
	/***********************************************************/
	/* PRECONDITION - PROGRAM HAS A CUSTOMER NAME, DATE, AND   */
	/* 				  SIZE NEEDS TO DISPLAY IT			   	   */
	/* POSTCONDITION - FUNCTION DISPLAYS A CUSTOMER'S NAME,    */
	/* 				   DATE, AND SIZE		   		   		   */
	/***********************************************************/
	{	
		disName.setText("Current Customer "+custNum+" Name: "+name);					// SETS TEXT OF DISPLAY NAME LABEL
		disSize.setText("Current Customer "+custNum+" Size: "+size);					// SETS TEXT OF DISPLAY SIZE LABEL
		disDate.setText("Current Customer "+custNum+" Date: "+month+"/"+day+"/"+year);	// SETS TEXT OF DISPLAY DATE LABEL
	}
}
