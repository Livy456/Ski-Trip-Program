
/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MAY 31, 2020			   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT
import java.util.*;						// IMPORTS UTIL FOR ARRAYS AND ARRAYLISTS

public class Print_Cost extends Menu_GUI implements ActionListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton returnB;		// CREATES A BUTTON TO RETURN TO MAIN MENU 
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton enterB;			// CREATES A BUTTON TO ENTER SPECIFIC DATE 
	private JComboBox custCB;		// CREATES A COMBO BOX FOR CUSTOMER
	private JLabel info;			// CREATES A LABEL FOR INFORMATION
	private Font font;				// CREATES A FONT
	private JFrame frame;			// CREATES A JFRAME
	private Container container;	// CREATES A CONTAINER
	private static DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
	private String[] customer = {"1", "2"};
			//arrayCust();	// CREATES AN ARRAY FOR ALL CUSTOMERS
	
	public Print_Cost()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame = new JFrame("Ski Trip Print Menu");				// INSTANTIATES A FRAME
		info = new JLabel("Prints Cost of Customer going "+
						  "\n" + "on Ski Trip");				// INSTANTIATES A LABEL
		returnB = new JButton("Return");						// INSTANTIATES A BUTTON
		quitB = new JButton("Quit");							// INSTANTIATES A BUTTON
		enterB = new JButton("Enter");							// INSTANTIATES A BUTTON
		custCB = new JComboBox(customer);						// INSTANTIATES A COMBO BOX
		container = frame.getContentPane();						// INSTANTIATES A CONTAINER
		font = new Font("Times New Roman", 
						Font.BOLD, 15);							// INSTANTIATES A FONT
		
		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 500, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH FOR FRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.GRAY);	// SETS THE BACKGROUND COLOR OF FRAME
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);		// SETS FONT OF PRINT LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.WHITE);		// SETS FOREGROUND COLOR OF HEADING LABEL
			
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(285, 270, 80, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(370, 270, 80, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		enterB.setBounds(280, 70, 80, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(40, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		custCB.setBounds(50, 70, 200, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)

		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		enterB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(custCB);		// ADDS DATE COMBOBOX TO CONTAINER
	}
	
	public void ActionPerformed(ActionEvent event)
	/*******************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON	   */
	/* POSTCONDITION - FUNCTION CREATES AN	   */
	/* 				   ACTION EVENT FOR BUTTON */
	/*******************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object cst;			// OBJECT REPRESENTATION OF CUSTOMER INFORMATION
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		String cost;		// REUSUABLE DOUBLE VALUE FOR COST
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		
		confirm = 1;		// INITIALIZES CONFIRM
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Quit"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);		// TERMINATES PROGRAM
			}
		}
		System.out.println("Return Section");
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		if(action.equals("Return"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WIDNOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();	// DISPOSES OF PRINT_DATE FRAME
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
		
		cst = actionPerformedCust();	// CALL TO ACTION PERFORMED DATE
		System.out.println("Action Performed");
		cost = calculateCost(cst);		// CALL TO CALCULATE DATE COST
		System.out.println("Calculate Cost");
		/*****************************************************/
		/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/*****************************************************/
		if(action.equals("Enter"))
		{
			System.out.println("Enter Section");
			
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/****************************************************************/
			if (custCB.getSelectedItem() == "")
			{
				errorMessage(error2);	// CALL TO ERROR MESSAGE
			}
			
			/*********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/*********************************************************************/
			else if(custCB.getSelectedItem() != "")
			{
				System.out.println("This works!!!");
				printCost(cost);		// CALL TO PRINT DATE COST
			}
		}
	}
	
	public Object actionPerformedCust()
	/********************************************************/
	/* PRECONDITION - NEEDS A CUSTOMER FOR OUTPUTTING COST 	*/
	/* POSTCONDITION - RETURNS SELECTED CUSTOMER FOR  		*/
	/* 				   OUTPUTTING COST 						*/
	/********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object numi;		// REUSUABLE VALUE FOR DATE
		
		numi = custCB.getSelectedItem();	// GETS SELECTED ITEM FROM COMBO BOX
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return numi;		// RETURNS NUMI
	}
	
	public String[] arrayCust()
	/***********************************************************************/
	/* PRECONDITION - NEEDS ARRAY OF ALL CUSTOMERS GOING ON SKI TRIP 	   */
	/* POSTCONDITION - RETURNS AN ARRAY OF ALL CUSTOMERS GOING ON SKI TRIP */
	/***********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String[] cust;			// ARRAY OF ALL CUSTOMERS
		ArrayList <String> cst;	// ARRAYLIST REPRESENTATION OF CUSTOMER
		
		cst = new ArrayList<String>();		// INSTANTIATES CST
		cst.add("");				// ADDS A BLANK SPACE TO CST
		
		/***********************************************************/
		/* FOR LOOP TO GO THROUGH EVERY CUSTOMER GOING ON SKI TRIP */
		/***********************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			cst.add("" + custList.get(i).getID() + " " +
					  custList.get(i).getName() + " " + 
					  custList.get(i).getSize() + " " + 
					  custList.get(i).getDate());	// ASSIGNS EACH ELEMENT IN ARRAYLIST
													// TO CUSTOMER INFO 
		}
		
		cust = new String[cst.size()];	// INSTANTIATES CUSTOMER
		cust = (String[]) cst.toArray();			// CONVERTS ARRAYLIST TO AN ARRAY
				
		/******************/
		/* RETURN SECTION */
		/******************/
		return cust;		// RETURNS CUST
	}
	
	public String calculateCost(Object numi)
	/******************************************************************************/
	/* PRECONDITION - NEEDS TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE 	  */
	/* POSTCONDITION - CALCULATES TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE */
	/******************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object cust;
		String cost;
		
		cust = "";
		cost = "";
		
		for(int i = 0; i < customer.length; i++)
		{
			cust = "" + i;
					
			if (cust.equals(numi))
			{
				cost = custList.get(i-1).getCost();
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return cost;		// RETURNS COST
	}
	
	public void printCost(String cost)
	/**********************************************************************/
	/* PRECONDITION - NEEDS TO PRINT OUT ALL CUSTOMERS GOING ON SKI TRIPS */ 
	/* POSTCONDITION - OUTPUTS ALL CUSTOMERS GOING ON SKI TRIPS			  */
	/**********************************************************************/
	{		
		JOptionPane.showMessageDialog(
				null,
				"The cost of this customer is: $" + cost,
				"Cost of Customer",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
