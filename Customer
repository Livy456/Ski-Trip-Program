/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* LIVY456				   			  */
/* FINAL PROJECT			   	  		  */
/* PROGRAM 12							  */
/* FEBRUARY 10, 2020		   			  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR CUSTOMER INFORMATION  			  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.text.DecimalFormat;		// IMPORTS DECIMAL FORMAT

public class Customer implements Ski_Interface
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private String name;		// INSTANCE VARIABLE FOR USER'S NAME	
	private String month;		// INSTANCE VARIABLE FOR MONTH OF SKI TRIP
	private String day;			// INSTANCE VARIABLE FOR DAY OF SKI TRIP
	private String year;		// INSTANCE VARIABLE FOR YEAR OF SKI TRIP
	private Object date;		// INSTANCE VARIABLE FOR DATE OF SKI TRIP
	private int id;				// INSTANCE VARIABLE FOR USER'S ID
	private int grpsize;		// INSTANCE VARIABLE FOR USER'S GROUP SIZE
	private int bus;			// INSTANCE VARIABLE FOR NUMBER OF BUSES
	private int remainder;		// INSTANCE VARIABLE FOR NUMBER OF EXTRA SKIERS
	private double cost;		// INSTANCE VARIABLE FOR USER'S COST
	private double refund;		// INSTANE VARIABLE FOR REFUNDS
	DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
	
	public Customer()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		name = "Customer Object doesn't work";			// INITIALIZES NAME TO AN EMPTY STRING
		month = "";			// INITIALIZES MONTH TO AN EMPTY STRING
		day = "";			// INITIALIZES DAY TO AN EMPTY STRING
		year = "";			// INITIALIZES YEAR TO AN EMPTY STRING
		date = "";			// INITIALIZES DATE TO AN EMPTY STRING
		id = 0;				// INITIALIZES ID TO ZERO
		grpsize = 0;		// INITIALIZES GROUPSIZE TO ZERO
	}
	
	public Customer(String nm, String mn, String dy, String yr, 
					Object dt, int i,int grp)
	/*********************************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, DATE, ID, GROUPSIZE, */
	/* 							  BUS, REMAINDER, AND COST 	  			 */
	/*********************************************************************/
	{
		name = nm;			// INITIALIZES NAME TO VALUE INPUTTED BY CLIENT
		month = mn;			// INITIALIZES MONTH TO VALUE INPUTTED BY CLIENT
		day = dy;			// INITIALIZES DAY TO VALUE INPUTTED BY CLIENT
		year = yr;			// INITIALIZES YEAR TO VALUE INPUTTED BY CLIENT
		date = dt;			// INITIALIZES DATE TO VALUE INPUTTED BY CLIENT
		id = i;				// INITIALIZES ID TO VALUE INPUTTED BY CLIENT
		grpsize = grp;		// INITIALIZES GROUPSIZE TO VALUE INPUTTED BY CLIENT
	}
	
	public Customer(Customer cm)
	/****************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES */
	/* NAME, DATE, ID, GROUPSIZE, BUS, AND COST 	  	*/
	/****************************************************/ 
	{
		name = cm.name;			// INITIALIZES NAME TO COPY OF OBJECT NAME VALUE
		month = cm.month;		// INITIALIZES MONTH TO COPY OF OBJECT NAME VALUE
		day = cm.day;			// INITIALIZES DAY TO COPY OF OBJECT NAME VALUE
		year = cm.year;			// INITIALIZES YEAR TO COPY OF OBJECT NAME VALUE
		date = cm.date;			// INITIALIZES DATE TO COPY OF OBJECT NAME VALUE
		id = cm.id;				// INITIALIZES ID TO COPY OF OBJECT NAME VALUE
		grpsize = cm.grpsize;	// INITIALIZES GROUPSIZE TO COPY OF OBJECT NAME VALUE
	}
	
	public void setName(String nm)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A NAME			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF NAME	*/
	/************************************************/	
	{
		name = nm;		// SETS NAME TO NAME VALUE INPUTTED FROM CLIENT
	}
	
	public String getName()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A NAME			*/
	/* POSTCONDITION - FUNCTION RETURNS NAME		*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return name;		// RETURNS NAME
	}
	
	public void setMonth(String mn)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A MONTH			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF MONTH	*/
	/************************************************/	
	{
		month = mn;		// SETS MONTH TO MONTH VALUE INPUTTED FROM CLIENT
	}
	
	public String getMonth()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A MONTH			*/
	/* POSTCONDITION - FUNCTION RETURNS MONTH		*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return month;	// RETURNS MONTH
	}
	
	public void setDay(String dy)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A DAY				*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF DAY	*/
	/************************************************/	
	{
		day = dy;		// SETS DAY TO DAY VALUE INPUTTED FROM CLIENT
	}
	
	public String getDay()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A DAY				*/
	/* POSTCONDITION - FUNCTION RETURNS DAY			*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return day;		// RETURNS DAY
	}
	
	public void setYear(String yr)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A YEAR			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF YEAR	*/
	/************************************************/
	{
		year = yr;		// SETS YEAR TO YEAR VALUE INPUTTED FROM CLIENT
	}
	
	public String getYear()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A YEAR			*/
	/* POSTCONDITION - FUNCTION RETURNS YEAR		*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/	
		return year;	// RETURN YEAR
	}
	
	public void setDate(Object dt)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A DATE			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF DATE	*/
	/************************************************/	
	{
		date = dt;		// SETS DATE TO DATE VALUE INPUTTED FROM CLIENT
	}
	
	public Object getDate()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A DATE			*/
	/* POSTCONDITION - FUNCTION RETURNS DATE		*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return date;		// RETURNS DATE
	}
	
	public void setID(int i)
	/************************************************/
	/* PRECONDITION - PROGRAM NEEDS A ID			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF ID	*/
	/************************************************/
	{	
		id = i;		// SETS ID TO ID VALUE INPUTTED FROM CLIENT
	}
	
	public int getID()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A ID				*/
	/* POSTCONDITION - FUNCTION RETURNS ID			*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return id;			// RETURNS ID
	}
	
	public void setSize(int grp)
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A GROUPSIZE			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF GROUPSIZE	*/
	/****************************************************/
	{
		grpsize = grp;	// SETS GROUPSIZE TO GROUPSIZE VALUE INPUTTED FROM CLIENT
	}
	
	public int getSize()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A GROUPSIZE		*/
	/* POSTCONDITION - FUNCTION RETURNS GROUPSIZE	*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return grpsize;		// RETURNS GROUPSIZE
	}
	
	public int getBus()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A GROUPSIZE AND 	  */
	/* 				  NEEDS THE BUS AMOUNT		  	  */
	/* POSTCONDITION - FUNCTION RETURNS BUS   	  	  */
	/**************************************************/
	{		
		/*******************************************/
		/* CALCULATION SECTION FOR NUMBER OF BUSES */
		/*******************************************/
		bus = grpsize / 20;		// NUMBER OF FULL BUSES FOR SKI TRIP
		
		/*********************************************/
		/* IF STATEMENT TO CALCULATE REMAINING SEATS */	
		/*********************************************/
		if (grpsize % 20 != 0)
		{
			remainder = grpsize % 20; 	// CALCULATES REMAINING SEATS 
			
			/***************************************************/
			/* IF STATEMENT TO CALCULATE IF ALL BUSES ARE FULL */	
			/***************************************************/
			if (remainder > 10)
			{	
				bus+=1;		// ADDS ANOTHER BUS FOR THE TEN OR MORE SKIERS
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return bus;			// RETURNS BUS
	}
	
	public int getRemain()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A GROUPSIZE AND 	  */
	/* 				  NEEDS THE REMAINDER OF SEATS	  */
	/* POSTCONDITION - FUNCTION RETURNS REMAINDER     */
	/**************************************************/
	{
		/*********************************/
		/* CALCULATES REMAINDER OF SEATS */
		/*********************************/
		remainder = grpsize % 20;
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return remainder;		// RETURNS REMAINDER
	}
	
	public String getCost()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS BUS AND REMAINDER	  */
	/* 				  NEEDS THE COST OF THE SKI TRIP  */
	/* POSTCONDITION - FUNCTION RETURNS COST    	  */
	/**************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costdf;				// STRING REPRESENTATION OF COST
		
		/***********************************/
		/* CALCULATES COST OF THE SKI TRIP */
		/***********************************/
		
		remainder = getRemain();	// CALL TO GET REMAIN
		
		/***************************************************/
		/* IF STATEMENT TO CALCULATE IF REFUNDS ARE NEEDED */	
		/***************************************************/
		if (remainder >= 10)
		{
			cost = 49.99 * grpsize;	// CALCULATES COST WITHOUT REFUNDS
		}
		
		/*****************************************************/
		/* ELSE STATEMENT TO CALCULATE IF REFUNDS ARE NEEDED */	
		/*****************************************************/
		else
		{
			cost = 49.99 * (grpsize - remainder);	// CALCULATES COST WITH REFUNDS
		}
				
		costdf = df.format(cost);	// FORMATS COST TO TWO DECIMAL PLACES
	
		/******************/
		/* RETURN SECTION */
		/******************/
		return costdf;		// RETURNS COST
	}
	
	public double getRefund()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS BUS AND REMAINDER	  */
	/* 				  NEEDS THE REFUNDS FOR SKI TRIP  */
	/* POSTCONDITION - FUNCTION RETURNS REFUNDS    	  */
	/**************************************************/
	{
		/***************************************************/
		/* IF STATEMENT TO CALCULATE IF REFUNDS ARE NEEDED */	
		/***************************************************/
		if (remainder >= 10)
		{
			refund = 0.00;	// CALCULATES COST WITHOUT REFUNDS
		}
		
		/***************************************/
		/* ELSE STATEMENT TO CALCULATE REFUNDS */	
		/***************************************/
		else
		{
			refund = 49.99 * remainder;	// CALCULATES REFUNDS
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return refund;			// RETURNS REFUND
	}
	
	public String toString()
	/******************************************************/
	/* OVERRIDES THE TOSTRING IN THE PARENT CLASS OBJECT  */
	/* AND CREATES A STRING REPRESENTATION OF THIS OBJECT */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str; 				// STRING REPRESENTATION OF OBJECT
		String costdf;				// STRING REPRESENTATION OF COST

		costdf = getCost();			// GETS COST OF SKI TRIP
		
		/*****************************************/
		/* MAKES STRING REPRESENTATION OF OBJECT */
		/*****************************************/
		str = "" + id + "\t" + name + "\t" + date + "\t" +  
			  grpsize + "\t" + costdf;
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURNS STRING REPRESENTATION OF OBJECT
	}
}
