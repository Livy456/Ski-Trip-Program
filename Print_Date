/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MAY 18, 2020			   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		
import java.text.DecimalFormat;			// IMPORTS DECIMAL FORMAT
import java.util.*;						// IMPORTS UTIL FOR ARRAYS AND ARRAYLISTS

public class Print_Date extends Menu_GUI implements ActionListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton returnB;		// CREATES A BUTTON TO RETURN TO MAIN MENU 
	private JButton quitB;			// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton enterB;			// CREATES A BUTTON TO ENTER SPECIFIC DATE 
	private JComboBox dateCB;		// CREATES A COMBO BOX FOR DATE
	private JLabel info;			// CREATES A LABEL FOR INFORMATION
	private Font font;				// CREATES A FONT
	private JFrame frame;			// CREATES A JFRAME
	private Container container;	// CREATES A CONTAINER
	private static DecimalFormat df = new DecimalFormat("0.00");	// INSTANTIATES DECIMALFORMAT
	private Object[] date = arrayDate();	// CREATES AN ARRAY FOR DATE
	
	public Print_Date()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame = new JFrame("Ski Trip Print Menu");				// INSTANTIATES A FRAME
		info = new JLabel("Prints Total Cost of Ski Trip"+
						  "\n" + "for specific date");			// INSTANTIATES A LABEL
		returnB = new JButton("Return");						// INSTANTIATES A BUTTON
		quitB = new JButton("Quit");							// INSTANTIATES A BUTTON
		enterB = new JButton("Enter");							// INSTANTIATES A BUTTON
		dateCB = new JComboBox(date);							// INSTANTIATES A COMBO BOX
		container = frame.getContentPane();						// INSTANTIATES A CONTAINER
		font = new Font("Times New Roman", 
						Font.BOLD, 15);							// INSTANTIATES A FONT
		
		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 500, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH FOR FRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.PINK);	// SETS THE BACKGROUND COLOR OF FRAME
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);		// SETS FONT OF PRINT LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF HEADING LABEL
			
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(285, 270, 80, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(370, 270, 80, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		enterB.setBounds(225, 70, 80, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(40, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateCB.setBounds(100, 70, 100, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)

		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		enterB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(dateCB);		// ADDS DATE COMBOBOX TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/*******************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON	   */
	/* POSTCONDITION - FUNCTION CREATES AN	   */
	/* 				   ACTION EVENT FOR BUTTON */
	/*******************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		Object dt;			// REUSUABLE OBJECT VALUE FOR DATE
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		double cost;		// REUSUABLE DOUBLE VALUE FOR COST
		
		confirm = 1;		// INITIALIZES CONFIRM
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Quit"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);		// TERMINATES PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if(action.equals("Return"))
		{
			confirm = confirmWindow();		// CALL TO CONFIRM WIDNOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				frame.dispose();	// DISPOSES OF PRINT_DATE FRAME
				new Menu_GUI();		// CREATES A NEW MENU GUI WINDOW
			}
		}
		
		dt = actionPerformedDate();	// CALL TO ACTION PERFORMED DATE
		cost = calculateDateCost(dt);	// CALL TO CALCULATE DATE COST
		
		/*****************************************************/
		/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/*****************************************************/
		if(action.equals("Enter"))
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/****************************************************************/
			if (dateCB.getSelectedItem() == "")
			{
				errorMessage(error2);	// CALL TO ERROR MESSAGE
			}
			
			/*********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/*********************************************************************/
			else if(dateCB.getSelectedItem() != "")
			{
				printDateCost(cost);		// CALL TO PRINT DATE COST
			}
		}
	}
	
	public Object actionPerformedDate()
	/****************************************************/
	/* PRECONDITION - NEEDS DATE FOR OUTPUTTING COST 	*/
	/* POSTCONDITION - RETURNS DATE FOR OUTPUTTING COST */
	/****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;		// REUSUABLE VALUE FOR DATE
		
		date = dateCB.getSelectedItem();	// GETS SELECTED ITEM FROM COMBO BOX
			
		/******************/
		/* RETURN SECTION */
		/******************/
		return date;			// RETURNS DT 
	}
	
	public Object[] arrayDate()
	/**********************************************************************/
	/* PRECONDITION - NEEDS ARRAY OF ALL DATES ENTERED BY CUSTOMERS 	  */
	/* POSTCONDITION - RETURNS AN ARRAY OF ALL DATES ENTERED BY CUSTOMERS */
	/**********************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;				// REUSUABLE VALUE FOR DATE OF SKI TRIP
		Object dt;					// REUSUABLE VALUE FOR ELEMENT IN ARRAYLIST
		Object[] dateArray;			// ALL DATES OF SKI TRIP AS AN ARRAY
		ArrayList<Object> dateList; // ALL DATES OF SKI TRIP AS AN ARRAYLIST
		
		dateList = new ArrayList(); // INSTANIATES ARRAYLIST	
		dateList.add("");			// ADDS AN EMPTY SPACE IN ARRAYLIST
		date = "";					// INITIALIZES DATE	
		
		/**************************************************/
		/* FOR LOOP TO GO THROUGH EVERY DATE FOR SKI TRIP */
		/**************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			date = custList.get(i).getDate();	// CALL TO GET DATE
			dateList.add(date);		// ADDS UNIQUE DATE TO ARRAYLIST
			int count = 0;			// NUMBER OF TIMES AN ELEMENT APPEARS IN ARRAYLIST
			
			/**************************************************/
			/* FOR LOOP TO GO THROUGH EVERY DATE FOR SKI TRIP */
			/**************************************************/
			for(int j = 0; j < dateList.size(); j++)
			{
				dt = dateList.get(j);	// GETS ELEMENT FROM ARRAYLIST
				
				/****************************************************************/
				/* IF STATEMENT TO CHECK IF ELEMENT HAS APPEARED MORE THAN ONCE */	
				/****************************************************************/
				if(date.equals(dt))
				{
					count++;	// INCREMENTS OCCURENCES OF AN ELEMENT
				}
			
				/*****************************************************/
				/* IF STATEMENT TO GET RID OF REOCCURENCE OF ELEMENT */	
				/*****************************************************/
				if(count >=2)
				{
					dateList.remove(j);	// REMOVES ELEMENT THAT REOCCURED
					j--;				// MAKES SURE INDEX DOES NOT SKIP ELEMENTS
				}
			}
		}
		
		dateArray = new Object[dateList.size()];	// INSTANIATES ARRAY AND 
		dateArray = dateList.toArray();				// CONVERTS ARRAYLIST TO AN ARRAY
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return dateArray;		// RETURNS DATE ARRAY	
	}
	
	public double calculateDateCost(Object date)
	/******************************************************************************/
	/* PRECONDITION - NEEDS TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE 	  */
	/* POSTCONDITION - CALCULATES TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE */
	/******************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costi;		// STRING REPRESENTATION OF COST
		double cost;		// COST OF ALL SKI TRIPS FOR A SPECIFIC DATE 
		double num;			// COST OF ONE SKI TRIP FOR A SPECIFIC DATE
		Object dt;			// DATE OF SKI TRIP
		
		costi = "";			// INITIALIZES THE STRING FORM OF COST
		dt = "";			// INITIALIZES THE MONTH
		cost = 0.00;		// INITIALIZES TOTAL COST FOR A SPECIFIC DATE
		num = 0.00;			// INITIALIZES A SINGLE COST FOR A SPECIFIC DATE
		
		/*************************************************************************/
		/* FOR LOOP TO CALCULATE TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE */
		/*************************************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			dt = custList.get(i).getDate();	// GETS DATE FROM CURRENT CUSTOMER
			
			/***********************************************************/
			/* IF STATEMENT TO CHECK IF DATE MATCHES THE SELECTED DATE */	
			/***********************************************************/
			if(dt.equals(date))
			{
				costi = custList.get(i).getCost();	// GETS COST OF EACH CUSTOMER
				num = Double.parseDouble(costi);	// PARSES STRING VALUE TO DOUBLE
				cost+=num;							// TOTALS COST 
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return cost;		// RETURNS COST	
	}
	
	public void printDateCost(double cost)
	/*****************************************************************/
	/* PRECONDITION - NEEDS TO PRINT OUT TOTAL COST OF ALL SKI TRIPS */ 
	/* 				  FOR A SPECIFIC DATE 	  						 */
	/* POSTCONDITION - OUTPUTS TOTAL COST OF ALL SKI TRIPS 			 */
	/* 				   FOR A SPECIFIC DATE 							 */
	/*****************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costdf;		// STRING REPRESENTATION OF COST		
		
		costdf = df.format(cost);		// FORMATS COST TO TWO DECIMAL PLACES
		
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"The total cost for the date " + date + " is\n" + 
				"$" + costdf,
				"Print Cost for Specific Date",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
