/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* LIVY456				   			  */
/* FINAL PROJECT		   	 			  */
/* PROGRAM 12							  */
/* MAY 18, 2020			   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN HAVE A   */
/* SWING GUI  							  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;					// IMPORTS SWING
import java.awt.*;						// IMPORTS AWT
import java.awt.event.ActionEvent;		// IMPORTS ACTION EVENT
import java.awt.event.ActionListener;	// IMPORTS ACTION LISTENER		

public class Print_Date extends Menu_GUI implements ActionListener
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private JButton returnB;			// CREATES A BUTTON TO RETURN TO MAIN MENU 
	private JButton quitB;				// CREATES A BUTTON TO QUIT PROGRAM 
	private JButton enterB;				// CREATES A BUTTON TO ENTER SPECIFIC DATE 
	private JComboBox dateCB;			// CREATES A COMBO BOX FOR DATE
	private JLabel info;				// CREATES A LABEL FOR INFORMATION
	private Font font;					// CREATES A FONT
	private JFrame frame;				// CREATES A JFRAME
	private Container container;		// CREATES A CONTAINER
	private Object[] date = arrayDate();// CREATES AN ARRAY FOR DATE
	
	public Print_Date()
	/************************************************/
	/* DEFAULT CONSTRUCTOR - IT CREATES A FRAME FOR */
	/*						 CONTENT PANE			*/
	/************************************************/
	{
		/*************************/
		/* INSTANTIATION SECTION */
		/*************************/
		frame = new JFrame("Ski Trip Print Menu");				// INSTANTIATES A FRAME
		info = new JLabel("Prints Total Cost of Ski Trip"+
						  "\n" + "for specific date");			// INSTANTIATES A LABEL
		returnB = new JButton("Return");						// INSTANTIATES A BUTTON
		quitB = new JButton("Quit Program");					// INSTANTIATES A BUTTON
		enterB = new JButton("Enter");							// INSTANTIATES A BUTTON
		dateCB = new JComboBox(date);							// INSTANTIATES A COMBO BOX
		container = frame.getContentPane();						// INSTANTIATES A CONTAINER
		font = new Font("Times New Roman", 
						Font.BOLD, 15);							// INSTANTIATES A FONT
		
		/*************************************/
		/* CREATES A BLANK JFRAME AND JPANEL */
		/*************************************/
		frame.pack();							// SIZE OF THE FRAME
		frame.setBounds(450, 150, 550, 450);	// SETS X POSITION, Y POSITION, LENGTH, WIDTH FOR FRAME
		frame.setVisible(true);					// ALLOWS THE JFRAME TO BE VISIBLE
		container.setLayout(null);				// SETS THE LAYOUT FOR THE JFRAME
		container.setBackground(Color.PINK);	// SETS THE BACKGROUND COLOR OF FRAME
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);// ALLOWS THE JFRAME TO BE CLOSED
		
		/**************************/
		/* SETS FONT OF THE LABEL */
		/**************************/
		info.setFont(font);		// SETS FONT OF PRINT LABEL
		
		/**************************************/
		/* SETS FOREGROUND COLOR OF THE LABEL */
		/**************************************/
		info.setForeground(Color.BLACK);		// SETS FOREGROUND COLOR OF HEADING LABEL
			
		/**********************************************/
		/* SETS BOUNDS FOR BUTTONS, JTEXTFIELD, LABEL */
		/**********************************************/
		returnB.setBounds(255, 270, 80, 25);	// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		quitB.setBounds(340, 270, 120, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		enterB.setBounds(225, 70, 80, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		info.setBounds(40, 30, 500, 30);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)
		dateCB.setBounds(65, 70, 150, 25);		// SETS (X POSITION, Y POSITION, LENGTH, WIDTH)

		/**********************************************/
		/* ADDS LISTENER TO BUTTON TO PERFORM ACTIONS */
		/**********************************************/
		returnB.addActionListener(this);	// ADDS ACTIONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		quitB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		enterB.addActionListener(this);		// ADDS ACITONLISTENER TO MAKE AN EVENT ONCE BUTTON IS PUSHED
		
		/*************************/
		/* ADDS BUTTONS TO FRAME */
		/*************************/
		container.add(returnB);		// ADDS RETURN BUTTON TO CONTAINER
		container.add(quitB);		// ADDS QUIT BUTTON TO CONTAINER
		container.add(enterB);		// ADDS ENTER BUTTON TO CONTAINER
		container.add(info);		// ADDS INFO LABEL TO CONTAINER
		container.add(dateCB);		// ADDS DATE COMBOBOX TO CONTAINER
	}
	
	public void actionPerformed(ActionEvent event)
	/*******************************************/
	/* PRECONDITION - PROGRAM HAS A BUTTON	   */
	/* POSTCONDITION - FUNCTION CREATES AN	   */
	/* 				   ACTION EVENT FOR BUTTON */
	/*******************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String action; 		// STRING TO REPRESENT WHICH BUTTON WAS PRESSED
		Object dt;			// REUSUABLE OBJECT VALUE FOR DATE
		String dt2;			// STRING REPRESENTATION OF OBJECT VALUE FOR DATE
		String cost;		// REUSUABLE DOUBLE VALUE FOR COST
		int confirm; 		// REUSUABLE INT INPUT FOR CONFIRMING AN ACTION
		int totSz;			// REUSUABLE INT VALUE FOR SIZE
		int bus;			// REUSUBALE INT VALUE FOR AMOUNT OF BUSES
		int refund;			// REUSUABLE INT VALUE FOR NUMBER OF REFUNDS
		int seats;			// REUSUABLE INT VALUE FOR NUMBER OF AVAILABLE SEATS
		
		action = event.getActionCommand();	// CALL TO GET ACTION COMMAND
		totSz = 0;			// INITIALIZES TOTAL SIZE
		bus = 0;			// INITIALIZES TOTAL BUSES
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF QUIT BUTTON WAS PRESSED */	
		/****************************************************/
		if(action.equals("Quit Program"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WINDOW
			
			/******************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF QUITTING PROGRAM */	
			/******************************************************/
			if(confirm == 0)
			{
				System.exit(0);			// TERMINATES PROGRAM
			}
		}
		
		/***********************************************************/
		/* ELSE IF STATEMENT TO CHECK IF RETURN BUTTON WAS PRESSED */	
		/***********************************************************/
		else if(action.equals("Return"))
		{
			confirm = confirmWindow();	// CALL TO CONFIRM WIDNOW
			
			/************************************************************/
			/* IF STATEMENT TO CONFIRM ACTION OF RETURNING TO MAIN MENU */	
			/************************************************************/
			if(confirm == 0)
			{
				container.setVisible(false);// HIDES THE FRAME
				frame.dispose();			// DISPOSES OF PRINT_DATE FRAME
				super.frame.dispose();		// DISPOSES OF PARENT FRAME
				new Menu_GUI();				// CREATES A NEW MENU GUI WINDOW
			}
		}
		
		dt = actionPerformedDate();						// CALL TO ACTION PERFORMED DATE
		dt2 = (String) dt;								// CONVERTS TO STRING
		cost = df.format(calculateDateCost(dt));		// CALL TO CALCULATE DATE COST
		totSz = calculateDateSize(dt);					// CALL TO CALCULATE DATE SIZE
		bus = calculateDateBus(dt);						// CALL TO CALCULATE DATE BUS
		refund = calculateDateRefund(dt);				// CALL TO CALCULATE DATE REFUND
		seats = calculateDateSeat(dt);					// CALL TO CALCULATE DATE SEAT
		
		/*****************************************************/
		/* IF STATEMENT TO CHECK IF ENTER BUTTON WAS PRESSED */	
		/*****************************************************/
		if(action.equals("Enter"))
		{
			/****************************************************************/
			/* IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/****************************************************************/
			if (dateCB.getSelectedItem().equals(""))
			{
				errorMessage(error2);	// CALL TO ERROR MESSAGE
			}
			
			/*********************************************************************/
			/* ELSE IF STATEMENT TO CHECK IF MONTH, DAY, AND YEAR WERE FILLED IN */	
			/*********************************************************************/
			else if(dateCB.getSelectedItem() != "")
			{
				frame.setVisible(false);// HIDES THE FRAME
				frame.dispose();		// GETS RID OF FRAME
				super.frame.dispose();	// DISPOSES OF PARENT FRAME
				new Print_ArrayList(custList, 0, 5, cost, dt2, totSz, bus, refund, seats);	// NEW PRINT ARRAYLIST
			}
		}
	}
	
	public Object actionPerformedDate()
	/****************************************************/
	/* PRECONDITION - NEEDS DATE FOR OUTPUTTING COST 	*/
	/* POSTCONDITION - RETURNS DATE FOR OUTPUTTING COST */
	/****************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;		// REUSUABLE VALUE FOR DATE
		
		date = dateCB.getSelectedItem();	// GETS SELECTED ITEM FROM COMBO BOX
			
		/******************/
		/* RETURN SECTION */
		/******************/
		return date;			// RETURNS DT 
	}
	
	public int calculateDateBus(Object dt)
	/******************************************************************************************/
	/* PRECONDITION - NEEDS TOTAL NUMBER OF BUSES FOR ALL SKI TRIPS FOR A SPECIFIC DATE 	  */
	/* POSTCONDITION - CALCULATES TOTAL NUMBER OF BUSES FOR ALL SKI TRIPS FOR A SPECIFIC DATE */
	/******************************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		Object date;		// CURRENT CUSTOMER SKI TRIP DATE
		int totBus;			// TOTAL NUMBER OF BUSES FOR SPECIFIC DATE
		int size;			// SIZE OF SKI TRIP
		
		date = "";		// INITIALIZES DATE
		totBus = 0;		// INITIALIZES TOTAL BUS
		size = 0;		// INITIALIZES SIZE
		
		size = calculateDateSize(dt);	// CALL TO CALCULATE DATE SIZE
		totBus = size / 20;				// CALCULATES TOTAL BUSES NEEDED FOR DATE
		
		/***********************************************************/
		/* IF STATEMENT TO CHECK IF DATE MATCHES THE SELECTED DATE */	
		/***********************************************************/
		if(size%20 >= 10)
		{
			totBus+=1;
		}
		
		/*****************************************************************/
		/* IF STATEMENT TO CHECK IF MAX NUMBER OF CUSTOMERS WAS EXCEEDED */	
		/*****************************************************************/
		if(size > 400)
		{
			totBus = 20;
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return totBus;		// RETURNS TOTAL BUS
	}
	
	public double calculateDateCost(Object date)
	/******************************************************************************/
	/* PRECONDITION - NEEDS TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE 	  */
	/* POSTCONDITION - CALCULATES TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE */
	/******************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String costi;		// STRING REPRESENTATION OF COST
		double cost;		// COST OF ALL SKI TRIPS FOR A SPECIFIC DATE 
		double num;			// COST OF ONE SKI TRIP FOR A SPECIFIC DATE
		Object dt;			// DATE OF SKI TRIP
		
		costi = "";			// INITIALIZES THE STRING FORM OF COST
		dt = "";			// INITIALIZES THE MONTH
		cost = 0.00;		// INITIALIZES TOTAL COST FOR A SPECIFIC DATE
		num = 0.00;			// INITIALIZES A SINGLE COST FOR A SPECIFIC DATE
		
		/*************************************************************************/
		/* FOR LOOP TO CALCULATE TOTAL COST OF ALL SKI TRIPS FOR A SPECIFIC DATE */
		/*************************************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			dt = custList.get(i).getDate();	// GETS DATE FROM CURRENT CUSTOMER
			
			/***********************************************************/
			/* IF STATEMENT TO CHECK IF DATE MATCHES THE SELECTED DATE */	
			/***********************************************************/
			if(dt.equals(date))
			{
				costi = custList.get(i).getCost();	// GETS COST OF EACH CUSTOMER
				num = Double.parseDouble(costi);	// PARSES STRING VALUE TO DOUBLE
				cost+=num;							// TOTALS COST 
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return cost;		// RETURNS COST	
	}
	
	public int calculateDateRefund(Object date)
	/*********************************************************************************************/
	/* PRECONDITION - NEEDS TOTAL NUMBER OF PEOPLE REFUNDED ON ALL SKI TRIPS FOR A SPECIFIC DATE */
	/* POSTCONDITION - CALCULATES TOTAL NUMBER OF PEOPLE ON ALL SKI TRIPS FOR A SPECIFIC DATE 	 */
	/*********************************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int refund;			// NUMBER OF REFUNDS
		int size;			// SIZE OF SKI TRIP FOR DATE
		
		refund = 0;			// INITIALIZES REFUND 
		size = calculateDateSize(date);		// CALLS CALCULATE DATE SIZE
		
		/****************************************************/
		/* IF STATEMENT TO CHECK IF REMAINDER NEED A REFUND */	
		/****************************************************/
		if(size%20 < 10)
		{
			refund = size%20;	// REMAINING NUMBER OF PEOPLE NEED A REFUND 
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return refund;		// RETURNS REFUND
	}
	
	public int calculateDateSeat(Object date)
	/************************************************************************************/
	/* PRECONDITION - NEEDS AVAILABLE SEATS FOR ALL SKI TRIPS FOR A SPECIFIC DATE 	  	*/
	/* POSTCONDITION - CALCULATES AVAILABLE SEATS FOR ALL SKI TRIPS FOR A SPECIFIC DATE */
	/************************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int seats;			// NUMBER OF AVAIABLE SEATS
		int size;			// SIZE OF ALL SKI TRIPS FOR DATE
		
		seats = 0;			// INITIALIZES SEATS
		size = calculateDateSize(date);		// CALL TO CALCULATE DATE SIZE
		
		/************************************************/
		/* IF STATEMENT TO CHECK IF SEATS ARE AVAILABLE */	
		/************************************************/
		if(size%20 >=10)
		{
			seats = 20 - (size%20);	// NUMBER OF AVAILABLE SEATS
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return seats;		// RETURNS SEATS
	}
	
	public int calculateDateSize(Object date)
	/******************************************************************************************/
	/* PRECONDITION - NEEDS TOTAL NUMBER OF PEOPLE ON ALL SKI TRIPS FOR A SPECIFIC DATE 	  */
	/* POSTCONDITION - CALCULATES TOTAL NUMBER OF PEOPLE ON ALL SKI TRIPS FOR A SPECIFIC DATE */
	/******************************************************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int totSz;			// TOTAL NUMBER OF PEOPLE FOR SPECIFIC DATE
		Object dt;			// DATE OF CURRENT CUSTOMER
		
		totSz = 0;	// INITIALIZES TOTAL SIZE
		dt = "";	// INITIALIZES DATE
		
		/*************************************************************************************/
		/* FOR LOOP TO CALCULATE TOTAL NUMBER OF PEOPLE ON ALL SKI TRIPS FOR A SPECIFIC DATE */
		/*************************************************************************************/
		for(int i = 0; i < custList.size(); i++)
		{
			dt = custList.get(i).getDate(); 	// CALL TO GET DATE
			
			/***********************************************************/
			/* IF STATEMENT TO CHECK IF DATE MATCHES THE SELECTED DATE */	
			/***********************************************************/
			if(dt.equals(date))
			{
				totSz+=custList.get(i).getSize();	// TOTALS SIZE
			}
		}
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return totSz;		// RETURNS TOTAL SIZE
	}
	
	public static void refundWindow(String str)
	/************************************************/
	/* PRECONDITION - NEEDS DIALOG BOX FOR REFUNDS	*/
	/* POSTCONDITION - CREATES WINDOW TO TELL USER	*/
	/* 				   IF THEY WILL HAVE REFUNDS	*/
	/************************************************/
	{
		/***********************/
		/* MAKES REFUND WINDOW */
		/***********************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Refund Window",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
