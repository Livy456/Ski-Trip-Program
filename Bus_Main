/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA				   			  */
/* FINAL PROJECT 		   	  			  */
/* PROGRAM 12							  */
/* FEBRUARY 10, 2020		   			  */
/******************************************/

/**********************************************/
/* THIS IS A PROGRAM TO HAVE USER SCHEDULE	  */
/* A SKI TRIP. USER WILL HAVE TO INPUT NAME,  */
/* DATE, GROUP ID, AND NUMBER OF PEOPLE IN	  */
/* THEIR GROUP. IT WILL CALCULATE THE COST	  */
/* AND THE NUMBER OF BUSES NEEDED. IF NOT 	  */
/* ENOUGH SEATS ON THE BUS, REFUNDS WILL BE   */
/* GIVEN. USER WILL BE ALLOWED TO REMOVE, ADD,*/ 
/* OR MODIFY MEMBERS OF THEIR SKI TRIP. 	  */
/**********************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.util.*;					// IMPORTS ARRAYLIST
import javax.swing.*;				// IMPORTS SWING
import java.text.DecimalFormat;		// IMPORTS DECIMAL FORMAT

public class Bus_Main 
{
	/*****************/
	/* FINAL SECTION */
	/*****************/
	final static String message1 = "Input the name of your Ski trip: ";
	final static String message2 = "Input the group ID number(three digit number between 100 - 999): ";
	final static String message3 = "Input the number of people in your group (must be greater than 0): ";
	final static String heading1 = "Input Name of Ski Group";
	final static String heading2 = "Input Group ID";
	final static String heading3 = "Input Group Size";
	final static String error2 = "ERROR!!! Number must be between 100 and 999";
	final static String error3 = "ERROR!!!Number must be greater than 0!!!";
	
	public static void main(String[]args)
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String name;		// NAME OF SKI TRIP GROUP
		String option;		// RESPONSE FOR MENU OPTION
		int id;				// NUMBER FOR THE GROUP ID 
		int grpsize;		// NUMBER OF PEOPLE GOING ON SKI TRIP
		int bus;			// NUMBER OF BUSES NEEDED FOR SKI TRIP
		int remainder;		// NUMBER OF REMAINING SEATS
		int runAgain;		// INT RESPONSE TO RE-RUNNING PROGRAM
		
		/*******************************/
		/* PROGRAM DESCRIPTION SECTION */
		/*******************************/
		programDescription();
		
		/**************************/
		/* LOOP TO RE-RUN PROGRAM */
		/**************************/
		do
		{
			/**************************/
			/* INITIALIZATION SECTION */
			/**************************/
			remainder = 0;
			
			/*************************/
			/* INSTANTIATION SECTION */
			/*************************/
			Customer customer = new Customer();
			
			/*****************/
			/* INPUT SECTION */
			/*****************/
			
			/***************/
			/* INPUTS NAME */
			/***************/
			name = inputString(message1, heading1);		// CALL TO INPUT STRING
			customer.setName(name);			// CALL TO SET NAME
			
			/*********************/
			/* INPUTS GROUP ID */
			/*********************/
			id = inputInt2(message2, heading2);			// CALL TO INPUT INT 2
			customer.setID(id);				// CALL TO SET ID
			
			/*********************/
			/* INPUTS GROUP SIZE */
			/*********************/
			grpsize = inputInt(message3, heading3);		// CALL TO INPUT INT
			customer.setGroup(grpsize);		// CALL TO SET GROUP
			
			bus = customer.getBus();
			remainder = customer.getRemain();
			
			/**********************/
			/* INPUTS MENU CHOICE */
			/**********************/
			option = optionMenu();			// CALL TO OPTIONS MENU
			
			/***********************************/
			/* IF STATEMENT TO INSERT CUSTOMER */
			/***********************************/
			if (option == "Insert Customer")
			{
				underConstruction();
			}
			
			/****************************************/
			/* ELSE IF STATEMENT TO REMOVE CUSTOMER */
			/****************************************/
			else if (option == "Remove Customer")
			{
				underConstruction();
			}
			
			/****************************************/
			/* ELSE IF STATEMENT TO MODIFY CUSTOMER */
			/****************************************/
			else if (option == "Modify Customer")
			{
				underConstruction();
			}
			
			/***************************************/
			/* ELSE IF STATEMENT TO PRINT CUSTOMER */
			/***************************************/
			else if(option == "Print Customer")
			{
				underConstruction();
			}
			
			/***********************************************/
			/* ELSE IF STATEMENT TO OUTPUT NUMBER OF BUSES */
			/***********************************************/
			else if (option == "Number of Buses")
			{
				underConstruction();
			}
			
			/*****************************************/
			/* ELSE STATEMENT TO OUTPUT COST OF TRIP */
			/*****************************************/
			else 
			{
				underConstruction();
			}
		
			runAgain = runAgain();		// CALL TO RUN PROGRAM AGAIN
		}
		while(runAgain == 0);
	}
	/******************************************************************************/
	/* 								FUNCTION SECTION 							  */
	/******************************************************************************/
	public static void errorMessage(String str)
	/*********************************************************************/
	/* PRECONDITION - NEEDS ERROR MESSAGE FOR INPUTS OF NEGATIVE NUMBERS */
	/* POSTCONDITION - CREATES WIMDOW TO SHOW THE ERROR THE USER MADE 	 */
	/*********************************************************************/
	{
		/******************************/
		/* MAKES ERROR MESSAGE WINDOW */
		/******************************/
		JOptionPane.showMessageDialog(
				null,
				str,
				"Error Message",
				JOptionPane.ERROR_MESSAGE);
	}
	
	public static int inputInt(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String inum;		// REUSABLE STRING INPUT
		int num;			// REUSABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*****************************/
			/* MAKES INPUT DIALOG WINDOW */
			/*****************************/
			inum = JOptionPane.showInputDialog(
					null,
					str,
					hdstr,
					JOptionPane.QUESTION_MESSAGE);
			num = Integer.parseInt(inum);		// ASSIGNS THE STRING INUM 
												// TO THE INTEGER NUM
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if(num < 0)
			{
				errorMessage(error3);		// CALL TO ERROR MESSAGE
			}
		}
		while(num < 0);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static int inputInt2(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS INTEGER VALUE	 		 */
	/* POSTCONDITION - GETS INTEGER VALUE			 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String inum;		// REUSABLE STRING INPUT
		int num;			// REUSABLE INT VALUE
		
		/*****************************/
		/* LOOP UNTIL VALUE IS VALID */
		/*****************************/
		do
		{
			/*****************************/
			/* MAKES INPUT DIALOG WINDOW */
			/*****************************/
			inum = JOptionPane.showInputDialog(
					null,
					str,
					hdstr,
					JOptionPane.QUESTION_MESSAGE);
			num = Integer.parseInt(inum);	// ASSIGNS THE STRING INUM 
											// TO THE INTEGER NUM
			
			/*******************************/
			/* IF STATEMENT TO ERROR CHECK */
			/*******************************/
			if ((num < 100) || (num > 999))
			{
				errorMessage(error2);		// CALL TO ERROR MESSAGE
			}
		}
		while((num < 100) || (num > 999));
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static String inputString(String str, String hdstr)
	/*************************************************/
	/* PRECONDITION - NEEDS STRING VALUE FOR NAME	 */
	/* POSTCONDITION - GETS STRING VALUE FOR NAME	 */
	/*************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String nm;		// INPUTS NUMBER AS A STRING
		
		/*****************************/
		/* MAKES INPUT DIALOG WINDOW */
		/*****************************/
		nm = JOptionPane.showInputDialog(
				null,
				str,
				hdstr,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return nm;		// RETURNS NUM
	}
	
	public static String optionMenu()
	/*******************************************************/
	/* PRECONDITION - NEEDS TO CHOOSE TYPE OF BANK ACCOUNT */
	/* POSTCONDITION - GETS TO CHOOSE TYPE OF BANK ACCOUNT */
	/*******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;			// REUSUABLE STRING INPUT 
		
		/*************************************/
		/* MAKES AN ARRAY FOR DROP-DOWN MENU */
		/*************************************/
		Object[] options = {"Insert Customer", "Remove Customer", "Modify Customer",
							"Print Customer", "Number of Buses", "Cost of Trip"};
		
		/*****************************/
		/* MAKES INPUT DIALOG WINDOW */
		/*****************************/ 
		str = (String)JOptionPane.showInputDialog(
				new JDialog(),
				"Ski Trip Option Menu",
				"Ski Trip Menu",
				JOptionPane.INFORMATION_MESSAGE,
				null,
				options,
				"");

		/******************/
		/* RETURN SECTION */
		/******************/
		return str;			// RETURNS STR
	}
	
	public static void programDescription()
	/************************************************/
	/* PRECONDITION - NEEDS PROGRAM DESCRIPTION		*/
	/* POSTCONDITION - CREATES WINDOW TO DESCRIBE	*/
	/* 					WHAT THE PROGRAM DOES 		*/
	/************************************************/
	{
		/************************************/
		/* MAKES PROGRAM DESCRIPTION WINDOW */
		/************************************/
		JOptionPane.showMessageDialog(
				null,
				"This program is a program to schedule a ski trip." + "\n" +
				"The user will input the name of their ski group, the" + "\n" +
				"date, the group ID, and the number of people going in their group." + "\n" +
				"The program will output the name, date, group ID, number of" + "\n" +
				"people, cost or refunds, and number of buses sorted. The customer will" + "\n" +
				"allowed to remove, add, or modify their input information.",
				"Program Description for Final Project",
				JOptionPane.INFORMATION_MESSAGE);
	}
	
	public static int runAgain()
	/************************************************/
	/* PRECONDITION - NEEDS CONFIRM DIALOG BOX		*/
	/* POSTCONDITION - CREATES WINDOW TO CONFIRM IF	*/
	/* 				   USER WANTS TO RE-RUN PROGRAM	*/
	/************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		int num;			// INTEGER ANSWER TO RE-RUN PROGRAM
		
		/*******************************/
		/* MAKES CONFIRM DIALOG WINDOW */
		/*******************************/ 
		num = JOptionPane.showConfirmDialog(
				null,
				"Do you want to re-run the ski trip program?",
				"Re-run Ski Trip Program",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return num;			// RETURNS NUM
	}
	
	public static void underConstruction()
	/****************************************************/
	/* PRECONDITION - NEEDS UNDER CONSTRUCTION WINDOW 	*/
	/* POSTCONDITION - CREATES WINDOW TO TELL USER		*/
	/* 				   THAT THE SECTION THEY ARE TRYING */
	/*  			   TO USE IS UNDER CONSTRUCTION 	*/
	/****************************************************/
	{
		/***********************/
		/* MAKES DIALOG WINDOW */
		/***********************/ 
		JOptionPane.showMessageDialog(
				null,
				"This part of the option menu is under construction",
				"Under construction menu",
				JOptionPane.INFORMATION_MESSAGE);
	}
}
